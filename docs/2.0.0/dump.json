[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Animation.js",
    "memberof": null,
    "longname": "lib/Animation.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nconst vendorize = require('./vendorize');\n\n/* istanbul ignore next */\n/**\n * @type {function(callback: function(time: number): number, element?: HTMLElement)}\n * @access private\n */\nconst requestAnimationFrame = vendorize('requestAnimationFrame') ||\n    (callback => setTimeout(() => callback(new Date().getTime()), 1000 / 60));\n\n/**\n * Generic AnimationRule function interface\n *\n * @typedef {function(percent: number): number} AnimationRule\n */\n\n/**\n * Callback for animation step draw event.\n * It will be called each time animation step is executed, bypassing\n * as first argument a percent of animation completeness. It is expected\n * that this callback will do an actual work of animating an elements or\n * whatever, as far as animation engine is just calculating and executing\n * animation steps without any knowledge about things under animation.\n *\n * @typedef {function(percent: number): *} DrawEventCallback\n */\n\n/**\n * Callback for animation complete event.\n * It is called once each animation is complete.\n *\n * @typedef {function(): *} EndEventCallback\n */\n\n/**\n * Predefined known animation rules.\n * It's a simple collection of math for some most used animations.\n *\n * @typedef {{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}} AnimationRules\n */\n\n/* istanbul ignore next: no reason covering this */\nlet rules = {\n    linear: p => p,\n    quad: p => Math.pow(p, 2),\n    dequad: p => 1 - rules.quad(1 - p),\n    quint: p => Math.pow(p, 5),\n    dequint: p => 1 - Math.pow(1 - p, 5),\n    cycle: p => 1 - Math.sin(Math.acos(p)),\n    decycle: p => Math.sin(Math.acos(1 - p)),\n    bounce: p => 1 - rules.debounce(1 - p),\n    debounce: p => {\n        let a = 0, b = 1;\n        for (; 1; a += b, b /= 2) {\n            if (p >= (7 - 4 * a) / 11) {\n                return -Math.pow((11 - 6 * a - 11 * p) / 4, 2) +\n                    Math.pow(b, 2);\n            }\n        }\n    },\n    elastic: p => 1 - rules.delastic(1 - p),\n    delastic: p => {\n        let x = 1.5;\n        return Math.pow(2, 10 * (p - 1)) *\n            Math.cos(20 * Math.PI * x / 3 * p);\n    }\n};\n\n/* istanbul ignore next: private, not testable */\n/**\n * Evaluates animation step and decides if the next step required or\n * stops animation calling a proper events.\n *\n * @access private\n * @param {number} time\n * @param {DrawEventCallback} draw\n * @param {number} start\n * @param {AnimationRule} rule\n * @param {number} duration\n * @param {EndEventCallback} end\n * @param {Animation} anim\n */\nfunction step(time, draw, start, rule, duration, end, anim) {\n    if (typeof rule !== 'function') {\n        throw new TypeError('Invalid animation rule:', rule);\n    }\n\n    let progress = time - start;\n    let percent = progress / duration;\n\n    if (percent > 1) {\n        percent = 1;\n    }\n\n    draw && draw(percent === 1 ? percent : rule(percent));\n\n    if (progress < duration) {\n        anim.frame = requestAnimationFrame(time =>\n            step(time, draw, start, rule, duration, end, anim)\n        );\n    }\n\n    else {\n        end && end();\n    }\n}\n\n/**\n * Animation engine API for JavaScript-based animations.\n * This is simply an animation core framework which simplifies creation\n * of various animations for generic purposes.\n *\n * @example\n * // create 'linear' animation engine, 500ms duration\n * let linear = new Animation('linear', 500);\n *\n * // create 'elastic' animation engine\n * let elastic = new Animation('elastic');\n *\n * // define animation behavior\n * let bounced = new Animation('bounce', 500, percent => {\n *     let value = parseInt(percent * 100, 10);\n *\n *     $('div.bounced').css({\n *         width: value + '%',\n *         height: value + '%'\n *     });\n * });\n *\n * // execute animation\n * bounced.animate();\n *\n * // execute animation and handle when its finished\n * bounced.animate(null, () => {\n *    console.log('Animation finished!');\n * });\n */\nexport default class Animation {\n\n    /**\n     * @constructor\n     * @param {string|AnimationRule} rule\n     * @param {number} duration\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    constructor(rule = 'linear', duration = 250, draw = (()=>{}),\n                end = (()=>{}))\n    {\n        /**\n         * Overall animation duration in milliseconds.\n         * By default is equal to 250 ms.\n         *\n         * @type {number}\n         */\n        this.duration = duration;\n\n        /**\n         * Animation rule. By default is linear animation.\n         * Animation rule is a subject to animation rules, which are\n         * a simple object containing math-based methods for calculating\n         * animation steps.\n         *\n         * @type {string|AnimationRule}\n         */\n        this.rule = rule;\n\n        /**\n         * Callback function for the animation step draw event.\n         *\n         * @type {DrawEventCallback}\n         */\n        this.draw = draw;\n\n        /**\n         * Callback for the animation complete event.\n         *\n         * @type {EndEventCallback}\n         */\n        this.end = end;\n\n        if (typeof this.draw !== 'function') {\n            throw new TypeError('Invalid animation draw callback:', draw);\n        }\n\n        if (typeof this.end !== 'function') {\n            throw new TypeError('Invalid animation end callback:', end);\n        }\n    }\n\n    /* istanbul ignore next: non-testable */\n    /**\n     * Performs animation calling each animation step draw callback and\n     * end callback at the end of animation. Callbacks are optional to this\n     * method call. If them are not bypassed will be used that ones which\n     * was pre-set on constructing an Animation object or pre-set after\n     * construction.\n     *\n     * @example\n     * function draw(percent) {\n     *     $('.my-animated-divs').css({\n     *         width: parseInt(percent * 100, 10) + '%'\n     *     });\n     * }\n     * function done() {\n     *     console.log('Animation complete!');\n     * }\n     *\n     * // Define 'draw' and 'end' callbacks on construction\n     * var animation = new Animation('cycle', 500, draw, done);\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks after construction\n     * var animation = new Animation('cycle', 500);\n     * animation.draw = draw;\n     * animation.end = done;\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks at animation\n     * var animation = new Animation('cycle', 500);\n     * animation.animate(draw, done);\n     *\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    animate(draw, end) {\n        //noinspection JSUnresolvedVariable\n        const start = vendorize('animationStartTime') ||\n            window.performance && window.performance.now ?\n                window.performance.now() :\n                Date.now();\n\n        draw = draw || this.draw;\n        end = end || this.end;\n\n        /**\n         * Current requested animation frame identifier\n         *\n         * @type {number}\n         */\n        this.frame = requestAnimationFrame(time =>\n            step(time, draw, start, rules[this.rule] || this.rule,\n                this.duration, end, this));\n    }\n\n    /**\n     * Destroys this object properly\n     */\n    destroy() {\n        if (this.frame) {\n            const cancelAnimationFrame = vendorize('cancelAnimationFrame') ||\n                /* istanbul ignore next */\n                ((id) => {});\n\n            cancelAnimationFrame(this.frame);\n            this.frame = null;\n        }\n\n        this.draw = null;\n        this.end = null;\n    }\n}\n\n/**\n * Animation rules bound statically to Animation constructor.\n *\n * @type {AnimationRules}\n * @static\n */\nAnimation.rules = rules;\n\nmodule.exports = Animation;\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "vendorize",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~vendorize",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Animation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "requestAnimationFrame",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~requestAnimationFrame",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Animation.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "function(callback: function(time: number): number, element?: HTMLElement)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "AnimationRule",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~AnimationRule",
    "access": null,
    "description": "Generic AnimationRule function interface",
    "type": {
      "types": [
        "function(percent: number): number"
      ],
      "optional": false,
      "name": "AnimationRule"
    }
  },
  {
    "__docId__": 4,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DrawEventCallback",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~DrawEventCallback",
    "access": null,
    "description": "Callback for animation step draw event.\nIt will be called each time animation step is executed, bypassing\nas first argument a percent of animation completeness. It is expected\nthat this callback will do an actual work of animating an elements or\nwhatever, as far as animation engine is just calculating and executing\nanimation steps without any knowledge about things under animation.",
    "type": {
      "types": [
        "function(percent: number): *"
      ],
      "optional": false,
      "name": "DrawEventCallback"
    }
  },
  {
    "__docId__": 5,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "EndEventCallback",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~EndEventCallback",
    "access": null,
    "description": "Callback for animation complete event.\nIt is called once each animation is complete.",
    "type": {
      "types": [
        "function(): *"
      ],
      "optional": false,
      "name": "EndEventCallback"
    }
  },
  {
    "__docId__": 6,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "AnimationRules",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~AnimationRules",
    "access": null,
    "description": "Predefined known animation rules.\nIt's a simple collection of math for some most used animations.",
    "lineNumber": 69,
    "type": {
      "types": [
        "{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}"
      ],
      "optional": false,
      "name": "AnimationRules"
    }
  },
  {
    "__docId__": 7,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "step",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~step",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Animation.js",
    "importStyle": null,
    "description": "Evaluates animation step and decides if the next step required or\nstops animation calling a proper events.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AnimationRule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Animation"
        ],
        "spread": false,
        "optional": false,
        "name": "anim",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Animation",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~Animation",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/Animation.js",
    "importStyle": "Animation",
    "description": "Animation engine API for JavaScript-based animations.\nThis is simply an animation core framework which simplifies creation\nof various animations for generic purposes.",
    "examples": [
      "// create 'linear' animation engine, 500ms duration\nlet linear = new Animation('linear', 500);\n\n// create 'elastic' animation engine\nlet elastic = new Animation('elastic');\n\n// define animation behavior\nlet bounced = new Animation('bounce', 500, percent => {\n    let value = parseInt(percent * 100, 10);\n\n    $('div.bounced').css({\n        width: value + '%',\n        height: value + '%'\n    });\n});\n\n// execute animation\nbounced.animate();\n\n// execute animation and handle when its finished\nbounced.animate(null, () => {\n   console.log('Animation finished!');\n});"
    ],
    "lineNumber": 164,
    "interface": false
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#constructor",
    "access": null,
    "description": "",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "AnimationRule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "end",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "duration",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#duration",
    "access": null,
    "description": "Overall animation duration in milliseconds.\nBy default is equal to 250 ms.",
    "lineNumber": 182,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rule",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#rule",
    "access": null,
    "description": "Animation rule. By default is linear animation.\nAnimation rule is a subject to animation rules, which are\na simple object containing math-based methods for calculating\nanimation steps.",
    "lineNumber": 192,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "AnimationRule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#draw",
    "access": null,
    "description": "Callback function for the animation step draw event.",
    "lineNumber": 199,
    "type": {
      "nullable": null,
      "types": [
        "DrawEventCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#end",
    "access": null,
    "description": "Callback for the animation complete event.",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "EndEventCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "animate",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#animate",
    "access": null,
    "description": "Performs animation calling each animation step draw callback and\nend callback at the end of animation. Callbacks are optional to this\nmethod call. If them are not bypassed will be used that ones which\nwas pre-set on constructing an Animation object or pre-set after\nconstruction.",
    "examples": [
      "function draw(percent) {\n    $('.my-animated-divs').css({\n        width: parseInt(percent * 100, 10) + '%'\n    });\n}\nfunction done() {\n    console.log('Animation complete!');\n}\n\n// Define 'draw' and 'end' callbacks on construction\nvar animation = new Animation('cycle', 500, draw, done);\nanimation.animate();\n\n// Define 'draw' and 'end' callbacks after construction\nvar animation = new Animation('cycle', 500);\nanimation.draw = draw;\nanimation.end = done;\nanimation.animate();\n\n// Define 'draw' and 'end' callbacks at animation\nvar animation = new Animation('cycle', 500);\nanimation.animate(draw, done);"
    ],
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "end",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frame",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#frame",
    "access": null,
    "description": "Current requested animation frame identifier",
    "lineNumber": 267,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#destroy",
    "access": null,
    "description": "Destroys this object properly",
    "lineNumber": 275,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frame",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#frame",
    "access": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#draw",
    "access": null,
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#end",
    "access": null,
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/BaseGauge.js",
    "memberof": null,
    "longname": "lib/BaseGauge.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const SmartCanvas = require('./SmartCanvas');\nconst Animation = require('./Animation');\nconst Collection = require('./Collection');\nconst DomObserver = require('./DomObserver');\n\nlet gaugesCollection = new Collection();\n\n/**\n * Basic abstract BaseGauge class implementing common functionality\n * for different type of gauges.\n *\n * It should not be instantiated directly but must be extended by a final\n * gauge implementation.\n *\n * @abstract\n * @example\n *\n * class MyCoolGauge extends BaseGauge {\n *\n *     // theses methods below MUST be implemented:\n *\n *     constructor(options) {\n *        // ... do something with options\n *        super(options);\n *        // ... implement anything else\n *     }\n *\n *     draw() {\n *         // ... some implementation here\n *         return this;\n *     }\n * }\n */\nexport default class BaseGauge {\n\n    /**\n     * @constructor\n     * @abstract\n     * @param {GenericOptions} options\n     */\n    constructor(options) {\n        let className = this.constructor.name;\n\n        if (className === 'BaseGauge') {\n            throw new TypeError('Attempt to instantiate abstract class!');\n        }\n\n        gaugesCollection.push(this);\n\n        /**\n         * Gauge type name\n         *\n         * @type {string} typeName\n         */\n        this.typeName = className;\n\n        /**\n         * Gauge type class\n         *\n         * @type {BaseGauge} type\n         */\n        this.type = window[className];\n\n        options.minValue = parseFloat(options.minValue);\n        options.maxValue = parseFloat(options.maxValue);\n\n        /**\n         * Gauge options\n         *\n         * @type {GenericOptions} options\n         */\n        this.options = options || {};\n\n        if (!options.renderTo) {\n            throw TypeError('Canvas element was not specified when creating ' +\n                'the Gauge object!');\n        }\n\n        let canvas = options.renderTo.tagName ?\n            options.renderTo :\n            /* istanbul ignore next: to be tested with e2e tests */\n            document.getElementById(options.renderTo);\n\n        /**\n         * @type {SmartCanvas} canvas\n         */\n        this.canvas = new SmartCanvas(canvas, options.width, options.height);\n        this.canvas.onRedraw = this.draw.bind(this);\n\n        /**\n         * @type {Animation} animation\n         */\n        this.animation = new Animation(\n            options.animationRule,\n            options.animationDuration);\n    }\n\n    /**\n     * Sets new value for this gauge.\n     * If gauge is animated by configuration it will trigger a proper animation.\n     * Upsetting a value triggers gauge redraw.\n     *\n     * @param {number} value\n     */\n    set value(value) {\n        if (value === this.options.value) return;\n\n        if (this.options.animation) {\n            let fromValue = this.options.value;\n\n            /**\n             * @type {number}\n             * @access private\n             */\n            this._value = value;\n\n            this.animation.animate(percent => {\n                this.options.value = fromValue + (value - fromValue) * percent;\n\n                this.draw();\n            }, () => {\n                this.options.value = value;\n                delete this._value;\n                this.draw();\n            });\n        }\n\n        else {\n            this.options.value = value;\n            this.draw();\n        }\n    }\n\n    /**\n     * Returns current value of the gauge\n     *\n     * @return {number}\n     */\n    get value() {\n        return typeof this._value === 'undefined' ?\n            this.options.value : this._value;\n    }\n\n    /**\n     * Updates gauge configuration options at runtime and redraws the gauge\n     *\n     * @param {GenericOptions} options\n     * @returns {BaseGauge}\n     */\n    update(options) {\n        Object.assign(this.options, options || {});\n\n        this.canvas.width = this.options.width;\n        this.canvas.height = this.options.height;\n\n        this.animation.rule = this.options.animationRule;\n        this.animation.duration = this.options.animationDuration;\n\n        this.canvas.redraw();\n\n        return this;\n    }\n\n    /**\n     * Performs destruction of this object properly\n     */\n    destroy() {\n        let index = gaugesCollection.indexOf(this);\n\n        /* istanbul ignore else */\n        if (~index) {\n            //noinspection JSUnresolvedFunction\n            gaugesCollection.splice(index, 1);\n        }\n\n        this.canvas.destroy();\n        this.canvas = null;\n\n        this.animation.destroy();\n        this.animation = null;\n    }\n\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @abstract\n     * @returns {BaseGauge}\n     */\n    draw() {\n        throw new TypeError('draw() must be implemented by a child class!');\n    }\n\n    /**\n     * Collection of the gauges on a page.\n     * The collection is singleton collection of the gauges spread\n     * across all gauge types.\n     *\n     * @return {Collection}\n     */\n    static get collection() {\n        return gaugesCollection;\n    }\n\n    /**\n     * Inject given gauge object into DOM\n     *\n     * @param {string} Type\n     * @param {GenericOptions} options\n     */\n    static initialize(Type, options) {\n        new DomObserver(options, 'canvas', Type);\n    }\n}\n\nwindow['BaseGauge'] = BaseGauge;\n\nmodule.exports = BaseGauge;\n"
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~SmartCanvas",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Animation",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~Animation",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Collection",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~Collection",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DomObserver",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~DomObserver",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "gaugesCollection",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~gaugesCollection",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "Collection"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~BaseGauge",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/BaseGauge.js",
    "importStyle": "BaseGauge",
    "description": "Basic abstract BaseGauge class implementing common functionality\nfor different type of gauges.\n\nIt should not be instantiated directly but must be extended by a final\ngauge implementation.",
    "examples": [
      "\nclass MyCoolGauge extends BaseGauge {\n\n    // theses methods below MUST be implemented:\n\n    constructor(options) {\n       // ... do something with options\n       super(options);\n       // ... implement anything else\n    }\n\n    draw() {\n        // ... some implementation here\n        return this;\n    }\n}"
    ],
    "lineNumber": 34,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 27,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "typeName",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#typeName",
    "access": null,
    "description": "Gauge type name",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#type",
    "access": null,
    "description": "Gauge type class",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#options",
    "access": null,
    "description": "Gauge options",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "GenericOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#canvas",
    "access": null,
    "description": "",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "SmartCanvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "animation",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#animation",
    "access": null,
    "description": "",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Animation"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 33,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#value",
    "access": null,
    "description": "Sets new value for this gauge.\nIf gauge is animated by configuration it will trigger a proper animation.\nUpsetting a value triggers gauge redraw.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#_value",
    "access": "private",
    "description": "",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#value",
    "access": null,
    "description": "Returns current value of the gauge",
    "lineNumber": 139,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#update",
    "access": null,
    "description": "Updates gauge configuration options at runtime and redraws the gauge",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseGauge}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#destroy",
    "access": null,
    "description": "Performs destruction of this object properly",
    "lineNumber": 167,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#canvas",
    "access": null,
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "animation",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#animation",
    "access": null,
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#draw",
    "access": null,
    "description": "Triggering gauge render on a canvas.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseGauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "collection",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge.collection",
    "access": null,
    "description": "Collection of the gauges on a page.\nThe collection is singleton collection of the gauges spread\nacross all gauge types.",
    "lineNumber": 200,
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "initialize",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge.initialize",
    "access": null,
    "description": "Inject given gauge object into DOM",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "Type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Collection.js",
    "memberof": null,
    "longname": "lib/Collection.js",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Gauge collections type.\n *\n * It is used ES5 declaration here, because babel\n * transpiles inheritance incorrectly in this case.\n *\n * @class Collection\n * @constructor\n */\nexport default function Collection () {\n    Array.prototype.constructor.apply(this, arguments);\n}\n\nCollection.prototype = Object.create(Array.prototype);\nCollection.prototype.constructor = Collection;\n\n    /**\n     * Returns gauge object by its identifier or index in the collection\n     *\n     * @param {string|number} id\n     * @return {*}\n     */\nCollection.prototype.get = function(id) {\n    if (typeof id === 'string') {\n        let i = 0;\n        let s = this.length;\n\n        for (; i < s; i++) {\n            let canvas = this[i].options.renderTo.tagName ?\n                this[i].options.renderTo :\n                /* istanbul ignore next: should be tested with e2e tests */\n                document.getElementById(this[i].options.renderTo || '');\n\n            if (canvas.getAttribute('id') === id) {\n                return this[i];\n            }\n        }\n    }\n\n    else if (typeof id === 'number') {\n        return this[id];\n    }\n\n    return null;\n};\n\nmodule.exports = Collection;\n"
  },
  {
    "__docId__": 44,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Collection",
    "memberof": "lib/Collection.js",
    "longname": "lib/Collection.js~Collection",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/Collection.js",
    "importStyle": "Collection",
    "description": "Gauge collections type.\n\nIt is used ES5 declaration here, because babel\ntranspiles inheritance incorrectly in this case.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Collection"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "get",
    "memberof": "lib/Collection.js",
    "longname": "lib/Collection.js~get",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Collection.js",
    "importStyle": null,
    "description": "Returns gauge object by its identifier or index in the collection",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/DomObserver.js",
    "memberof": null,
    "longname": "lib/DomObserver.js",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * @typedef {{ constructor: function(options: object): GaugeInterface, draw: function(): GaugeInterface }} GaugeInterface\n */\n\n/**\n * DOM Observer.\n * It will observe DOM document for a configured element types and\n * instantiate associated Types for an existing or newly added DOM elements\n *\n * @example\n * class ProgressBar {\n *     constructor(options) {}\n *     draw() {}\n * }\n *\n * // It will observe DOM document for elements <div>\n * // having attribute 'data-type=\"progress\"'\n * // and instantiate for each new instance of ProgressBar\n *\n * new DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n *\n * // assume we could have HTML like this\n * // <div data-type=\"progress\" color=\"blue\"></div>\n * // in this case all matching attributes names for a given options will be\n * // parsed and bypassed to an instance from HTML attributes\n */\nexport default class DomObserver {\n\n    /**\n     * @constructor\n     * @param {object} options\n     * @param {string} element\n     * @param {string} Type\n     */\n    constructor(options, element, Type) {\n        //noinspection JSUnresolvedVariable\n        /**\n         * Default instantiation options for the given Type\n         *\n         * @type {Object}\n         */\n        this.options = options;\n\n        /**\n         * Name of an element to lookup/observe\n         *\n         * @type {string}\n         */\n        this.element = element.toLowerCase();\n\n        /**\n         * data-type attribute value to lookup\n         *\n         * @type {string}\n         */\n        this.type = DomObserver.toDashed(Type);\n\n        /**\n         * Actual type constructor to instantiate for each found element\n         *\n         * @type {Function}\n         */\n        this.Type = window[Type];\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        DomObserver.domReady(() => {\n            this.traverse();\n\n            if (window.MutationObserver) {\n                //noinspection JSCheckFunctionSignatures\n                new MutationObserver(this.observe.bind(this))\n                    .observe(document.body, {\n                        childList: true,\n                        subtree: true,\n                        attributes: true,\n                        characterData: true,\n                        attributeOldValue: true,\n                        characterDataOldValue: true\n                    });\n            }\n        });\n    }\n\n    /**\n     * Checks if given node is valid node to process\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {boolean}\n     */\n    isValidNode(node) {\n        return !!(\n            node.tagName &&\n            node.tagName.toLowerCase() === this.element &&\n            node.getAttribute('data-type') === this.type\n        );\n    }\n\n    /**\n     * Traverse entire current DOM tree and process matching nodes.\n     * Usually it should be called only once on document initialization.\n     */\n    traverse() {\n        let elements = document.getElementsByTagName(this.element);\n        let i = 0, s = elements.length;\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        for (; i < s; i++) {\n            let node = elements[i];\n\n            if (this.isValidNode(node)) {\n                this.process(node);\n            }\n        }\n    }\n\n    /**\n     * Observes given mutation records for an elements to process\n     *\n     * @param {MutationRecord[]} records\n     */\n    observe(records) {\n        let i = 0;\n        let s = records.length;\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        for (; i < s; i++) {\n            let record = records[i];\n\n            if (record.type === 'attributes' &&\n                record.attributeName === 'data-type' &&\n                this.isValidNode(record.target) &&\n                record.oldValue !== this.type) // skip false-positive mutations\n            {\n                this.process(record.target);\n            }\n\n            else if (record.addedNodes && record.addedNodes.length) {\n                let ii = 0;\n                let ss = record.addedNodes.length;\n\n                for (; ii < ss; ii++) {\n                    let node = record.addedNodes[ii];\n\n                    if (this.isValidNode(node)) {\n                        this.process(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Parses given attribute value to a proper JavaScript value.\n     * For example it will parse some stringified value to a proper type\n     * value, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}\n     *\n     * @param {*} value\n     * @return {*}\n     */\n    static parse(value) {\n        // parse boolean\n        if (value === 'true') return true;\n        if (value === 'false') return false;\n\n        // parse undefined\n        if (value === 'undefined') return undefined;\n\n        // parse null\n        if (value === 'null') return null;\n\n        // Comma-separated strings to array parsing.\n        // It won't match strings which contains non alphanum characters to\n        // prevent strings like 'rgba(0,0,0,0)' or JSON-like from being parsed.\n        // Typically it simply allows easily declare arrays as comma-separated\n        // numbers or plain strings. If something more complicated is\n        // required it can be declared using JSON format syntax\n        if (/^[\\w\\d\\s]+(?:,[\\w\\d\\s]+)+$/.test(value)) {\n            return value.split(',');\n        }\n\n        // parse JSON\n        try { return JSON.parse(value); } catch(e) {}\n\n        // plain value - no need to parse\n        return value;\n    }\n\n    /**\n     * Processes a given node, instantiating a proper type constructor for it\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {GaugeInterface}\n     */\n    process(node) {\n        let prop;\n        let options = JSON.parse(JSON.stringify(this.options));\n\n        for (prop in options) {\n            /* istanbul ignore else: non-testable in most cases */\n            if (options.hasOwnProperty(prop)) {\n                let attributeName = DomObserver.toAttributeName(prop);\n                let attributeValue = DomObserver.parse(\n                    node.getAttribute(attributeName));\n\n                if (attributeValue !== null && attributeValue !== undefined) {\n                    options[prop] = attributeValue;\n                }\n            }\n        }\n\n        options.renderTo = node;\n\n        return new (this.Type)(options).draw();\n    }\n\n    /**\n     * Transforms camelCase string to dashed string\n     *\n     * @static\n     * @param {string} camelCase\n     * @return {string}\n     */\n    static toDashed(camelCase) {\n        let arr = camelCase.split(/(?=[A-Z])/);\n        let i = 1;\n        let s = arr.length;\n        let str = arr[0].toLowerCase();\n\n        for (; i < s; i++) {\n            str += '-' + arr[i].toLowerCase();\n        }\n\n        return str;\n    }\n\n    /**\n     * Transforms camel case property name to dash separated attribute name\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     */\n    static toAttributeName(str) {\n        return 'data-' + DomObserver.toDashed(str);\n    }\n\n    /**\n     * Cross-browser DOM ready handler\n     *\n     * @static\n     * @param {Function} handler\n     */\n    static domReady(handler) {\n        if (window.addEventListener) {\n            window.addEventListener('DOMContentLoaded', handler, false);\n        }\n\n        else {\n            window.attachEvent('onload', handler);\n        }\n    }\n}\n\nmodule.exports = DomObserver;\n"
  },
  {
    "__docId__": 47,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "GaugeInterface",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~GaugeInterface",
    "access": null,
    "description": "",
    "type": {
      "types": [
        "{ constructor: function(options: object): GaugeInterface, draw: function(): GaugeInterface }"
      ],
      "optional": false,
      "name": "GaugeInterface"
    }
  },
  {
    "__docId__": 48,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DomObserver",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~DomObserver",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/DomObserver.js",
    "importStyle": "DomObserver",
    "description": "DOM Observer.\nIt will observe DOM document for a configured element types and\ninstantiate associated Types for an existing or newly added DOM elements",
    "examples": [
      "class ProgressBar {\n    constructor(options) {}\n    draw() {}\n}\n\n// It will observe DOM document for elements <div>\n// having attribute 'data-type=\"progress\"'\n// and instantiate for each new instance of ProgressBar\n\nnew DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n\n// assume we could have HTML like this\n// <div data-type=\"progress\" color=\"blue\"></div>\n// in this case all matching attributes names for a given options will be\n// parsed and bypassed to an instance from HTML attributes"
    ],
    "lineNumber": 53,
    "interface": false
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#constructor",
    "access": null,
    "description": "",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "Type",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#options",
    "access": null,
    "description": "Default instantiation options for the given Type",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#element",
    "access": null,
    "description": "Name of an element to lookup/observe",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#type",
    "access": null,
    "description": "data-type attribute value to lookup",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "Type",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#Type",
    "access": null,
    "description": "Actual type constructor to instantiate for each found element",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValidNode",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#isValidNode",
    "access": null,
    "description": "Checks if given node is valid node to process",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "traverse",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#traverse",
    "access": null,
    "description": "Traverse entire current DOM tree and process matching nodes.\nUsually it should be called only once on document initialization.",
    "lineNumber": 128,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observe",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#observe",
    "access": null,
    "description": "Observes given mutation records for an elements to process",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "MutationRecord[]"
        ],
        "spread": false,
        "optional": false,
        "name": "records",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parse",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.parse",
    "access": null,
    "description": "Parses given attribute value to a proper JavaScript value.\nFor example it will parse some stringified value to a proper type\nvalue, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "process",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#process",
    "access": null,
    "description": "Processes a given node, instantiating a proper type constructor for it",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{GaugeInterface}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GaugeInterface"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toDashed",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.toDashed",
    "access": null,
    "description": "Transforms camelCase string to dashed string",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "camelCase",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toAttributeName",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.toAttributeName",
    "access": null,
    "description": "Transforms camel case property name to dash separated attribute name",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "domReady",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.domReady",
    "access": null,
    "description": "Cross-browser DOM ready handler",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Gauge.js",
    "memberof": null,
    "longname": "lib/Gauge.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nrequire('./polyfill');\n\nconst GenericOptions = require('./GenericOptions');\nconst BaseGauge = require('./BaseGauge');\nconst SmartCanvas = require('./SmartCanvas');\nconst drawings = require('./drawings');\n\n// todo: customizable fonts\n// todo: readme and documentation update\n// todo: github pages\n// todo: wiki\n// todo: LinearGauge implementation\n// todo: online configurator\n// todo: online packager\n// todo: e2e tests\n// todo: angular 2 integration\n// todo: react integrations\n// todo: typescript definitions\n\n/**\n * Gauge configuration options\n *\n * @typedef {GenericOptions|{ticksAngle: number, startAngle: number, colorNeedleCircleOuterStart: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInnerStart: string, colorNeedleCircleInnerEnd: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, colorValueBoxRectStart: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, needleStart: number, needleEnd: number, needleWidth: number, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean}} GaugeOptions\n */\n\n/**\n * Default gauge configuration options\n *\n * @access private\n * @type {GaugeOptions}\n */\nconst defaultGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    ticksAngle: 270,\n    startAngle: 45,\n\n    // colors\n    colorNeedleCircleOuterStart: '#f0f0f0',\n    colorNeedleCircleOuterEnd: '#ccc',\n    colorNeedleCircleInnerStart: '#e8e8e8',\n    colorNeedleCircleInnerEnd: '#f5f5f5',\n    colorNeedleShadowUp: 'rgba(2,255,255,0.2)',\n    colorNeedleShadowDown: 'rgba(188,143,143,0.45)',\n    colorValueBoxRectStart: '#888',\n    colorValueBoxRectEnd: '#666',\n    colorValueBoxBackground: '#babab2',\n    colorValueBoxShadow: 'rgba(0,0,0,1)',\n\n    // needle\n    needleStart: 0,\n    needleEnd: 85,\n    needleWidth: 4,\n    needleCircleSize: 10,\n    needleCircleInner: true,\n    needleCircleOuter: true\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gradient-filled circle on a canvas\n *\n * @access private\n * @param {number} radius\n * @param {Canvas2DContext} context\n * @param {string} start gradient start color\n * @param {string} end gradient end color\n */\nfunction drawCircle(radius, context, start, end) {\n    context.beginPath();\n    context.arc(0, 0, radius, 0, Math.PI * 2, true);\n    context.fillStyle = drawings.linearGradient(context, start, end, radius);\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns max radius without borders for the gauge\n *\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n * @return {number}\n */\nfunction maxRadius(context, options) {\n    if (!context.maxRadius) {\n        context.maxRadius = context.max\n            - options.borderShadowWidth\n            - options.borderOuterWidth\n            - options.borderMiddleWidth\n            - options.borderInnerWidth;\n    }\n\n    return context.maxRadius;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge plate on the canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawPlate(context, options) {\n    let d0 = options.borderShadowWidth;\n    let r0 = context.max -  options.borderShadowWidth;\n    let r1 = r0 - options.borderOuterWidth;\n    let r2 = r1 - options.borderMiddleWidth;\n    let r3 = maxRadius(context, options);\n\n    context.save();\n\n    if (options.glow) {\n        context.shadowBlur = d0;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    if (options.borderOuterWidth) {\n        drawCircle(r0, context,\n            options.colorBorderOuterStart,\n            options.colorBorderOuterEnd);\n    }\n\n    if (options.borderMiddleWidth) {\n        drawCircle(r1, context,\n            options.colorBorderMiddleStart,\n            options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawCircle(r2, context,\n            options.colorBorderInnerStart,\n            options.colorBorderInnerEnd);\n    }\n\n    context.restore();\n\n    context.beginPath();\n    context.arc(0, 0, r3, 0, Math.PI * 2, true);\n    context.fillStyle = options.colorPlate;\n    context.fill();\n    context.closePath();\n\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge highlight areas on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawHighlights(context, options) {\n    context.save();\n\n    let r1 = maxRadius(context, options) - context.max * .05;\n    let r2 = r1 - context.max * .15;\n    let i = 0, s = options.highlights.length;\n\n    for (; i < s; i++) {\n        let hlt = options.highlights[i];\n        let vd = (options.maxValue - options.minValue) / options.ticksAngle;\n        let sa = drawings.radians(options.startAngle +\n                (hlt.from - options.minValue) / vd);\n        let ea = drawings.radians(options.startAngle + (hlt.to - options.minValue) / vd);\n        let ps = drawings.radialPoint(r2, sa);\n        let pe = drawings.radialPoint(r1, sa);\n        let ps1 = drawings.radialPoint(r1, ea);\n        let pe1 = drawings.radialPoint(r2, ea);\n\n        context.beginPath();\n        context.rotate(drawings.radians(90));\n        context.arc(0, 0, r1, sa, ea, false);\n        context.restore();\n        context.save();\n        context.moveTo(ps.x, ps.y);\n        context.lineTo(pe.x, pe.y);\n        context.lineTo(ps1.x, ps1.y);\n        context.lineTo(pe1.x, pe1.y);\n        context.lineTo(ps.x, ps.y);\n        context.closePath();\n\n        context.fillStyle = hlt.color;\n        context.fill();\n\n        context.beginPath();\n        context.rotate(drawings.radians(90));\n        context.arc(0, 0, r2, sa - 0.2, ea + 0.2, false);\n        context.restore();\n        context.closePath();\n\n        context.fillStyle = options.colorPlate;\n        context.fill();\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks bar on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawMinorTicks(context, options) {\n    let radius = maxRadius(context, options) - context.max * .05;\n\n    context.lineWidth = SmartCanvas.pixelRatio;\n    context.strokeStyle = options.colorMinorTicks;\n\n    context.save();\n\n    let s = options.minorTicks * (options.majorTicks.length - 1);\n    let i = 0;\n\n    for (; i < s; ++i) {\n        let angle = options.startAngle + i * (options.ticksAngle / s);\n\n        context.rotate(drawings.radians(angle));\n\n        context.beginPath();\n        context.moveTo(0, radius);\n        context.lineTo(0, radius - context.max * .075);\n        context.stroke();\n        context.restore();\n        context.closePath();\n\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge major ticks bar on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawMajorTicks(context, options) {\n    let r = maxRadius(context, options) - context.max * .05;\n    let i = 0;\n    let s = options.majorTicks.length;\n    let pixelRatio = SmartCanvas.pixelRatio;\n\n    context.lineWidth = 2 * pixelRatio;\n    context.strokeStyle = options.colorMajorTicks;\n    context.save();\n\n    if (s === 0) {\n        let numberOfDefaultTicks = 5;\n        let tickSize = (options.maxValue - options.minValue) /\n            numberOfDefaultTicks;\n\n        for (; i < numberOfDefaultTicks; i++) {\n            options.majorTicks.push(drawings.formatMajorTickNumber(\n                options.minValue + (tickSize * i),\n                options));\n        }\n        options.majorTicks.push(drawings.formatMajorTickNumber(\n            options.maxValue,\n            options));\n    }\n\n    i = 0;\n    for (; i < s; ++i) {\n        let a = options.startAngle + i * (options.ticksAngle / (s - 1));\n        context.rotate(drawings.radians(a));\n\n        context.beginPath();\n        context.moveTo(0, r);\n        context.lineTo(0, r - context.max * .15);\n        context.stroke();\n\n        context.restore();\n        context.closePath();\n        context.save();\n    }\n\n    if (options.strokeTicks) {\n        context.rotate(drawings.radians(90));\n\n        context.beginPath();\n        context.arc(0, 0, r,\n            drawings.radians(options.startAngle),\n            drawings.radians(options.startAngle + options.ticksAngle),\n            false\n        );\n        context.stroke();\n        context.restore();\n        context.closePath();\n\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar numbers\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawNumbers(context, options) {\n    let radius = maxRadius(context, options) - context.max * .35;\n    let points = {};\n    let i = 0;\n    let s = options.majorTicks.length;\n\n    for (; i < s; ++i) {\n        let angle = options.startAngle + i * (options.ticksAngle / (s - 1));\n        let point = drawings.radialPoint(radius, drawings.radians(angle));\n\n        if (angle === 360) angle = 0;\n\n        if (points[angle]) {\n            continue; //already drawn at this place, skipping\n        }\n\n        points[angle] = true;\n\n        context.font = 20 * (context.max / 200) + 'px Arial';\n        context.fillStyle = options.colorNumbers;\n        context.lineWidth = 0;\n        context.textAlign = 'center';\n        context.fillText(options.majorTicks[i], point.x, point.y + 3);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge title\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawTitle(context, options) {\n    if (!options.title) return;\n\n    context.save();\n    context.font = 24 * (context.max / 200) + 'px Arial';\n    context.fillStyle = options.colorTitle;\n    context.textAlign = 'center';\n    context.fillText(options.title, 0, -context.max / 4.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws units name on the gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawUnits(context, options) {\n    if (!options.units) return;\n\n    context.save();\n    context.font = 22 * (context.max / 200) + 'px Arial';\n    context.fillStyle = options.colorUnits;\n    context.textAlign = 'center';\n    context.fillText(options.units, 0, context.max / 3.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle shadow\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawNeedleShadow(context, options) {\n    if (!options.needleShadow) return;\n\n    context.shadowOffsetX = 2;\n    context.shadowOffsetY = 2;\n    context.shadowBlur = 10;\n    context.shadowColor = options.colorNeedleShadowDown;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n */\nfunction drawNeedle(context, options) {\n    if (!options.needle) return;\n\n    let value = options.value;\n    let max = maxRadius(context, options);\n    let r1 = max / 100 * options.needleCircleSize;\n    let r2 = max / 100 * options.needleCircleSize * 0.75;\n    let rIn = max / 100 * options.needleEnd;\n    let rStart = options.needleStart ?\n            max / 100 * options.needleStart : 0,\n            rOut = max * .2;\n    let pad1 = max / 100 * options.needleWidth;\n    let pad2 = max / 100 * options.needleWidth / 2;\n    let pixelRatio = SmartCanvas.pixelRatio;\n\n    drawNeedleShadow(context, options);\n\n    context.save();\n\n    context.rotate(drawings.radians(\n        options.startAngle + (value - options.minValue) /\n        (options.maxValue - options.minValue) * options.ticksAngle));\n\n    if (options.needleType === 'arrow') {\n        context.beginPath();\n        context.moveTo(-pad2, -rOut);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(pixelRatio, rIn);\n        context.lineTo(pad1, 0);\n        context.lineTo(pad2, -rOut);\n        context.closePath();\n\n        context.fillStyle = drawings.linearGradient(\n            context,\n            options.colorNeedleStart,\n            options.colorNeedleEnd,\n            rIn - rOut);\n        context.fill();\n\n        context.beginPath();\n        context.lineTo(-0.5 * pixelRatio, rIn);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-pad2, -rOut);\n        context.lineTo(pad2 / 2 * pixelRatio - 2 * pixelRatio, -rOut);\n        context.closePath();\n        context.fillStyle = options.colorNeedleShadowUp;\n        context.fill();\n    }\n\n    else { // simple line needle\n        context.beginPath();\n        context.moveTo(-pad2, rIn);\n        context.lineTo(-pad2, rStart);\n        context.lineTo(pad2, rStart);\n        context.lineTo(pad2, rIn);\n        context.closePath();\n\n        context.fillStyle = drawings.linearGradient(\n            context,\n            options.colorNeedleStart,\n            options.colorNeedleEnd,\n            rIn - rOut\n        );\n        context.fill();\n    }\n\n    context.restore();\n\n    if (options.needleCircleSize) {\n        drawNeedleShadow(context, options);\n\n        if (options.needleCircleOuter) {\n            context.beginPath();\n            context.arc(0, 0, r1, 0, Math.PI * 2, true);\n            context.fillStyle = drawings.linearGradient(\n                context,\n                options.colorNeedleCircleOuterStart,\n                options.colorNeedleCircleOuterEnd,\n                r1\n            );\n            context.fill();\n            context.restore();\n            context.closePath();\n        }\n\n        if (options.needleCircleInner) {\n            context.beginPath();\n            context.arc(0, 0, r2, 0, Math.PI * 2, true);\n            context.fillStyle = drawings.linearGradient(\n                context,\n                options.colorNeedleCircleInnerStart,\n                options.colorNeedleCircleInnerEnd,\n                r2\n            );\n            context.fill();\n            context.closePath();\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge value box\n *\n * @param {Canvas2DContext} context\n * @param {GaugeOptions} options\n * @param {number} value\n */\nfunction drawValueBox(context, options, value) {\n    if (!options.valueText) return;\n\n    let max = context.max;\n    let text = drawings.padValue(value, options);\n    let y = max - max * .33;\n    let x = 0;\n\n    context.save();\n    context.font = 40 * (max / 200) + 'px Led';\n    context.save();\n\n    if (options.valueBox) {\n        let th = 0.12 * max;\n        let tw = context.measureText('-' + drawings.padValue(0, options)).width;\n\n        drawings.roundRect(context,\n            -tw / 2 - 0.025 * max,\n            y - th - 0.04 * max,\n            tw + 0.05 * max,\n            th + 0.07 * max,\n            0.025 * max);\n    }\n\n    let grd = context.createRadialGradient(\n        x,\n        y - 0.12 * max - 0.025 * max + (0.12 * max + 0.045 * max) / 2,\n        max / 10,\n        x,\n        y - 0.12 * max - 0.025 * max + (0.12 * max + 0.045 * max) / 2,\n        max / 5\n    );\n\n    grd.addColorStop(0, options.colorValueBoxRectStart);\n    grd.addColorStop(1, options.colorValueBoxRectEnd);\n\n    context.strokeStyle = grd;\n    context.lineWidth = 0.05 * max;\n    context.stroke();\n\n    context.shadowBlur = 0.012 * max;\n    context.shadowColor = options.colorValueBoxShadow;\n\n    context.fillStyle = options.colorValueBoxBackground;\n    context.fill();\n\n    context.restore();\n\n    context.shadowOffsetX = 0.004 * max;\n    context.shadowOffsetY = 0.004 * max;\n    context.shadowBlur = 0.012 * max;\n    context.shadowColor = options.colorValueTextShadow;\n\n    context.fillStyle = options.colorValueText;\n    context.textAlign = 'center';\n    context.fillText(text, -x, y);\n\n    context.restore();\n}\n\n/**\n * Minimalistic HTML5 Canvas Gauge\n * @example\n *  var gauge = new Gauge({\n *     renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n *     width: 400,\n *     height: 400,\n *     units: 'Km/h',\n *     title: false,\n *     value: 0,\n *     minValue: 0,\n *     maxValue: 220,\n *     majorTicks: [\n *         '0','20','40','60','80','100','120','140','160','180','200','220'\n *     ],\n *     minorTicks: 2,\n *     strokeTicks: false,\n *     highlights: [\n *         { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n *         { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n *         { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n *         { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n *         { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n *     ],\n *     colorPlate: '#222',\n *     colorMajorTicks: '#f5f5f5',\n *     colorMinorTicks: '#ddd',\n *     colorTitle: '#fff',\n *     colorUnits: '#ccc',\n *     colorNumbers: '#eee',\n *     colorNeedleStart: 'rgba(240, 128, 128, 1)',\n *     colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n *     valueBox: true,\n *     animationRule: 'bounce'\n * });\n * // draw initially\n * gauge.draw();\n * // animate\n * setInterval(() => {\n *    gauge.value = Math.random() * -220 + 220;\n * }, 1000);\n */\nexport default class Gauge extends BaseGauge {\n\n    /**\n     * @constructor\n     * @param {GaugeOptions} options\n     */\n    constructor(options) {\n        options = Object.assign({}, defaultGaugeOptions, options || {});\n\n        /* istanbul ignore if */\n        if (isNaN(options.startAngle)) options.startAngle = 45;\n        /* istanbul ignore if */\n        if (isNaN(options.ticksAngle)) options.ticksAngle = 270;\n\n        /* istanbul ignore if */\n        if (options.ticksAngle > 360) options.ticksAngle = 360;\n        /* istanbul ignore if */\n        if (options.ticksAngle < 0) options.ticksAngle = 0;\n\n        /* istanbul ignore if */\n        if (options.startAngle < 0) options.startAngle = 0;\n        /* istanbul ignore if */\n        if (options.startAngle > 360) options.startAngle = 360;\n\n        super(options);\n    }\n\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @returns {Gauge}\n     */\n    draw() {\n        let canvas = this.canvas;\n        let [x, y, w, h] = [\n            -canvas.drawX,\n            -canvas.drawY,\n            canvas.drawWidth,\n            canvas.drawHeight\n        ];\n        let options = this.options;\n\n        if (!canvas.elementClone.initialized) {\n            let context = canvas.contextClone;\n\n            // clear the cache\n            context.clearRect(x, y, w, h);\n            context.save();\n\n            drawPlate(context, options);\n            drawHighlights(context, options);\n            drawMinorTicks(context, options);\n            drawMajorTicks(context, options);\n            drawNumbers(context, options);\n            drawTitle(context, options);\n            drawUnits(context, options);\n\n            canvas.elementClone.initialized = true;\n        }\n\n        this.canvas.commit();\n\n        // clear the canvas\n        canvas.context.clearRect(x, y, w, h);\n        canvas.context.save();\n\n        canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n        canvas.context.save();\n\n        drawValueBox(canvas.context, options, this.value);\n        drawNeedle(canvas.context, options);\n\n        return this;\n    }\n}\n\nwindow['Gauge'] = Gauge;\n\nBaseGauge.initialize('Gauge', defaultGaugeOptions);\n\nmodule.exports = Gauge;\n"
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~GenericOptions",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~BaseGauge",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~SmartCanvas",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawings",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "GaugeOptions",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~GaugeOptions",
    "access": null,
    "description": "Gauge configuration options",
    "type": {
      "types": [
        "GenericOptions",
        "{ticksAngle: number, startAngle: number, colorNeedleCircleOuterStart: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInnerStart: string, colorNeedleCircleInnerEnd: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, colorValueBoxRectStart: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, needleStart: number, needleEnd: number, needleWidth: number, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean}"
      ],
      "optional": false,
      "name": "GaugeOptions"
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultGaugeOptions",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~defaultGaugeOptions",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Default gauge configuration options",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "GaugeOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawCircle",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawCircle",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gradient-filled circle on a canvas",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "gradient start color"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "gradient end color"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "maxRadius",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~maxRadius",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Returns max radius without borders for the gauge",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawPlate",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawPlate",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge plate on the canvas",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawHighlights",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawHighlights",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge highlight areas on a canvas",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawMinorTicks",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawMinorTicks",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws minor ticks bar on a canvas",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawMajorTicks",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawMajorTicks",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge major ticks bar on a canvas",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawNumbers",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawNumbers",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge bar numbers",
    "lineNumber": 333,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawTitle",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawTitle",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge title",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawUnits",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawUnits",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws units name on the gauge",
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawNeedleShadow",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawNeedleShadow",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge needle shadow",
    "lineNumber": 405,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawNeedle",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawNeedle",
    "access": "private",
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge needle",
    "lineNumber": 422,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawValueBox",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~drawValueBox",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": null,
    "description": "Draws gauge value box",
    "lineNumber": 532,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Gauge",
    "memberof": "lib/Gauge.js",
    "longname": "lib/Gauge.js~Gauge",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/Gauge.js",
    "importStyle": "Gauge",
    "description": "Minimalistic HTML5 Canvas Gauge",
    "examples": [
      " var gauge = new Gauge({\n    renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n    width: 400,\n    height: 400,\n    units: 'Km/h',\n    title: false,\n    value: 0,\n    minValue: 0,\n    maxValue: 220,\n    majorTicks: [\n        '0','20','40','60','80','100','120','140','160','180','200','220'\n    ],\n    minorTicks: 2,\n    strokeTicks: false,\n    highlights: [\n        { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n        { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n        { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n        { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n        { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n    ],\n    colorPlate: '#222',\n    colorMajorTicks: '#f5f5f5',\n    colorMinorTicks: '#ddd',\n    colorTitle: '#fff',\n    colorUnits: '#ccc',\n    colorNumbers: '#eee',\n    colorNeedleStart: 'rgba(240, 128, 128, 1)',\n    colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n    valueBox: true,\n    animationRule: 'bounce'\n});\n// draw initially\ngauge.draw();\n// animate\nsetInterval(() => {\n   gauge.value = Math.random() * -220 + 220;\n}, 1000);"
    ],
    "lineNumber": 634,
    "interface": false,
    "extends": [
      "BaseGauge"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Gauge.js~Gauge",
    "longname": "lib/Gauge.js~Gauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 640,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "GaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/Gauge.js~Gauge",
    "longname": "lib/Gauge.js~Gauge#draw",
    "access": null,
    "description": "Triggering gauge render on a canvas.",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Gauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Gauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/GenericOptions.js",
    "memberof": null,
    "longname": "lib/GenericOptions.js",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Describes rendering target element. Can be either string identifier of\n * the element or the element itself.\n *\n * @typedef {HTMLElement|string} RenderTarget\n */\n\n/**\n * Highlight area definition.\n * It describes highlight area starting from value to value using\n * color. Color can be describes with hex, rgb or rgba value.\n *\n * @typedef {{ from: number, to: number, color: string}} Highlight\n */\n\n/**\n *\n * @type {{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, updateValueOnAnimation: boolean, glow: boolean, title: string|boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedleStart: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuterStart: string, colorBorderOuterEnd: string, colorBorderMiddleStart: string, colorBorderMiddleEnd: string, colorBorderInnerStart: string, colorBorderInnerEnd: string, needle: boolean, needleShadow: boolean, needleType: string, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueText: string|boolean, highlights: Highlight[]}} GenericOptions\n */\nconst GenericOptions = {\n    // basic options\n    renderTo: null,\n    width: 200,\n    height: 200,\n    minValue: 0,\n    maxValue: 100,\n    value: 0,\n    units: false,\n    majorTicks: [0, 20, 40, 60, 80, 100],\n    minorTicks: 10,\n    strokeTicks: true,\n    updateValueOnAnimation: false,\n    glow: true,\n    title: false,\n\n    // number formats\n    valueInt: 3,\n    valueDec: 2,\n    majorTicksInt: 1,\n    majorTicksDec: 0,\n\n    // animations\n    animation: true,\n    animationDuration: 250,\n    animationRule: 'cycle',\n\n    // colors\n    colorPlate: '#fff',\n    colorMajorTicks: '#444',\n    colorMinorTicks: '#666',\n    colorTitle: '#888',\n    colorUnits: '#888',\n    colorNumbers: '#444',\n    colorNeedleStart: 'rgba(240,128,128,1)',\n    colorNeedleEnd: 'rgba(255,160,122,.9)',\n    colorValueText: '#444',\n    colorValueTextShadow: 'rgba(0,0,0,0.3)',\n    colorBorderShadow: 'rgba(0,0,0,0.5)',\n    colorBorderOuterStart: '#ddd',\n    colorBorderOuterEnd: '#aaa',\n    colorBorderMiddleStart: '#eee',\n    colorBorderMiddleEnd: '#f0f0f0',\n    colorBorderInnerStart: '#fafafa',\n    colorBorderInnerEnd: '#ccc',\n\n    // needle\n    needle: true,\n    needleShadow: true,\n    needleType: 'arrow',\n\n    // borders\n    borderOuterWidth: 3,\n    borderMiddleWidth: 3,\n    borderInnerWidth: 3,\n    borderShadowWidth: 3,\n\n    // value and highlights\n    valueBox: true,\n    valueText: true,\n    highlights: [\n        { from: 20, to: 60, color: '#eee' },\n        { from: 60, to: 80, color: '#ccc' },\n        { from: 80, to: 100, color: '#999' }]\n};\n\nexport default GenericOptions;\n\nmodule.exports = GenericOptions;\n"
  },
  {
    "__docId__": 85,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "RenderTarget",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~RenderTarget",
    "access": null,
    "description": "Describes rendering target element. Can be either string identifier of\nthe element or the element itself.",
    "type": {
      "types": [
        "HTMLElement",
        "string"
      ],
      "optional": false,
      "name": "RenderTarget"
    }
  },
  {
    "__docId__": 86,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Highlight",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~Highlight",
    "access": null,
    "description": "Highlight area definition.\nIt describes highlight area starting from value to value using\ncolor. Color can be describes with hex, rgb or rgba value.",
    "type": {
      "types": [
        "{ from: number, to: number, color: string}"
      ],
      "optional": false,
      "name": "Highlight"
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~GenericOptions",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/GenericOptions.js",
    "importStyle": "GenericOptions",
    "description": "",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, updateValueOnAnimation: boolean, glow: boolean, title: string|boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedleStart: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuterStart: string, colorBorderOuterEnd: string, colorBorderMiddleStart: string, colorBorderMiddleEnd: string, colorBorderInnerStart: string, colorBorderInnerEnd: string, needle: boolean, needleShadow: boolean, needleType: string, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueText: string|boolean, highlights: Highlight[]}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/LinearGauge.js",
    "memberof": null,
    "longname": "lib/LinearGauge.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nrequire('./polyfill');\n\nconst BaseGauge = require('./BaseGauge');\nconst GenericOptions = require('./GenericOptions');\nconst drawings = require('./drawings');\n\n/**\n * Linear gauge configuration options\n *\n * @typedef {GenericOptions|{orientation: string}} LinearGaugeOptions\n */\n\n/**\n * Default linear gauge configuration options\n *\n * @type {LinearGaugeOptions}\n */\nlet defaultLinearGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    orientation: 'vertical',\n    borderRadius: 0,\n    width: 80,\n    height: 240\n});\n\nfunction drawRectangle(contaxt, options, x, y, w, h) {\n    if (options.borderRadius) {\n        // rounded corners rect\n    }\n\n    else {\n        // flat rect\n    }\n}\n\nfunction drawLinearPlate(context, options) {\n    context.save();\n    console.log(options);\n}\n\n/**\n * Minimalistic HTML5 Canvas Linear Gauge\n */\nexport default class LinearGauge extends BaseGauge {\n\n    /**\n     * @constructor\n     * @param {LinearGaugeOptions} options\n     */\n    constructor(options) {\n        if (!options.width) options.width = defaultLinearGaugeOptions.width;\n        if (!options.height) options.height = defaultLinearGaugeOptions.height;\n\n        if (!options.orientation) {\n            options.orientation = options.width > options.height ?\n                'horizontal' : 'vertical';\n        }\n\n        options = Object.assign({}, defaultLinearGaugeOptions, options || {});\n\n        super(options);\n    }\n\n    /**\n     * Triggering linear gauge render on a canvas.\n     *\n     * @returns {LinearGauge}\n     */\n    draw() {\n        let canvas = this.canvas;\n        let [x, y, w, h] = [\n            -canvas.drawX,\n            -canvas.drawY,\n            canvas.drawWidth,\n            canvas.drawHeight\n        ];\n        let options = this.options;\n\n        if (!canvas.elementClone.initialized) {\n            let context = canvas.contextClone;\n\n            // clear the cache\n            context.clearRect(x, y, w, h);\n            context.save();\n\n            drawLinearPlate(context, options);\n\n            canvas.elementClone.initialized = true;\n        }\n\n        this.canvas.commit();\n\n        // clear the canvas\n        canvas.context.clearRect(x, y, w, h);\n        canvas.context.save();\n\n        canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n        canvas.context.save();\n\n        return this;\n    }\n\n}\n\nwindow['LinearGauge'] = LinearGauge;\n\nBaseGauge.initialize('LinearGauge', defaultLinearGaugeOptions);\n\nmodule.exports = LinearGauge;\n"
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~BaseGauge",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~GenericOptions",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawings",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "LinearGaugeOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~LinearGaugeOptions",
    "access": null,
    "description": "Linear gauge configuration options",
    "type": {
      "types": [
        "GenericOptions",
        "{orientation: string}"
      ],
      "optional": false,
      "name": "LinearGaugeOptions"
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultLinearGaugeOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~defaultLinearGaugeOptions",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Default linear gauge configuration options",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "LinearGaugeOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRectangle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawRectangle",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "contaxt",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearPlate",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearPlate",
    "access": null,
    "export": false,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LinearGauge",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~LinearGauge",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/LinearGauge.js",
    "importStyle": "LinearGauge",
    "description": "Minimalistic HTML5 Canvas Linear Gauge",
    "lineNumber": 70,
    "interface": false,
    "extends": [
      "BaseGauge"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/LinearGauge.js~LinearGauge",
    "longname": "lib/LinearGauge.js~LinearGauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/LinearGauge.js~LinearGauge",
    "longname": "lib/LinearGauge.js~LinearGauge#draw",
    "access": null,
    "description": "Triggering linear gauge render on a canvas.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LinearGauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "LinearGauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/SmartCanvas.js",
    "memberof": null,
    "longname": "lib/SmartCanvas.js",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Drawings on canvas using hidden canvas as a cache for better\n * performance drawings during canvas animations. SmartCanvas also\n * adopts a canvas to\n */\nexport default class SmartCanvas {\n\n    /**\n     * @constructor\n     * @param {HTMLCanvasElement} canvas\n     * @param {number} width\n     * @param {number} height\n     */\n    constructor(canvas, width, height) {\n        SmartCanvas.collection.push(this);\n\n        /**\n         * Canvas base width\n         *\n         * @type {number}\n         */\n        this.width = width || 0;\n\n        /**\n         * Canvas base height\n         *\n         * @type {number}\n         */\n        this.height = height || 0;\n\n        /**\n         * Target drawings canvas element\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.element = canvas;\n\n        this.init();\n    }\n\n    /**\n     * Initializes canvases and contexts\n     */\n    init() {\n        let pixelRatio = SmartCanvas.pixelRatio;\n\n        this.element.width = this.width * pixelRatio;\n        this.element.height = this.height * pixelRatio;\n\n        this.element.style.width = this.width + 'px';\n        this.element.style.height = this.height + 'px';\n\n        /**\n         * Canvas caching element\n         *\n         * @type {HTMLCanvasElement|Node}\n         */\n        this.elementClone = this.element.cloneNode(true);\n\n        //noinspection JSUnresolvedVariable\n        /**\n         * Target drawings canvas element 2D context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.context = this.element.getContext('2d');\n\n        /**\n         * Canvas caching element 2D context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.contextClone = this.elementClone.getContext('2d');\n\n        /**\n         * Actual drawings width\n         *\n         * @type {number}\n         */\n        this.drawWidth = this.element.width;\n\n        /**\n         * Actual drawings height\n         *\n         * @type {number}\n         */\n        this.drawHeight = this.element.height;\n\n        /**\n         * X-coordinate of drawings zero point\n         *\n         * @type {number}\n         */\n        this.drawX = this.drawWidth / 2;\n\n        /**\n         * Y-coordinate of drawings zero point\n         *\n         * @type {number}\n         */\n        this.drawY = this.drawHeight / 2;\n\n        /**\n         * Minimal side length in pixels of the drawing\n         *\n         * @type {number}\n         */\n        this.minSide = this.drawX < this.drawY ? this.drawX : this.drawY;\n\n        this.elementClone.initialized = false;\n\n        this.contextClone.translate(this.drawX, this.drawY);\n        this.contextClone.save();\n\n        this.context.translate(this.drawX, this.drawY);\n        this.context.save();\n\n        this.context.max = this.contextClone.max = this.minSide;\n        this.context.maxRadius = this.contextClone.maxRadius = null;\n    }\n\n    /**\n     * Destroys this object, removing the references from memory\n     */\n    destroy() {\n        let index = SmartCanvas.collection.indexOf(this);\n\n        /* istanbul ignore else */\n        if (~index) {\n            SmartCanvas.collection.splice(index, 1);\n        }\n\n        // derefecence all created elements\n        this.context.max = null;\n        delete this.context.max;\n\n        this.context.maxRadius = null;\n        delete this.context.maxRadius;\n\n        this.context = null;\n        this.contextClone = null;\n        this.elementClone = null;\n        this.element = null;\n\n        /**\n         * On canvas redraw event callback\n         *\n         * @type {function|null|undefined}\n         */\n        this.onRedraw = null;\n    }\n\n    /**\n     * Commits the drawings\n     */\n    commit() {\n        let scale = SmartCanvas.pixelRatio;\n\n        if (scale !== 1) {\n            this.contextClone.scale(scale, scale);\n            this.contextClone.save();\n        }\n\n        return this;\n    }\n\n    /**\n     * Redraw this object\n     */\n    redraw() {\n        this.init();\n\n        /**\n         * On canvas redraw event callback\n         *\n         * @type {function(): *}\n         */\n        this.onRedraw && this.onRedraw();\n\n        return this;\n    }\n\n    /**\n     * Returns current device pixel ratio\n     *\n     * @returns {number}\n     */\n    static get pixelRatio() {\n        /* istanbul ignore next */\n        //noinspection JSUnresolvedVariable\n        return window.devicePixelRatio || 1;\n    }\n\n    /**\n     * Forces redraw all canvas in the current collection\n     */\n    static redraw() {\n        let i = 0;\n        let s = SmartCanvas.collection.length;\n\n        for (; i < s; i++) {\n            SmartCanvas.collection[i].redraw();\n        }\n    }\n}\n\nSmartCanvas.collection = [];\n\n/* istanbul ignore next: very browser-specific testing required to cover */\n//noinspection JSUnresolvedVariable\nif (window.matchMedia) {\n    //noinspection JSUnresolvedFunction\n    window.matchMedia('screen and (min-resolution: 2dppx)')\n        .addListener(SmartCanvas.redraw);\n}\n\nmodule.exports = SmartCanvas;\n"
  },
  {
    "__docId__": 100,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/SmartCanvas.js",
    "longname": "lib/SmartCanvas.js~SmartCanvas",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/SmartCanvas.js",
    "importStyle": "SmartCanvas",
    "description": "Drawings on canvas using hidden canvas as a cache for better\nperformance drawings during canvas animations. SmartCanvas also\nadopts a canvas to",
    "lineNumber": 32,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#constructor",
    "access": null,
    "description": "",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#width",
    "access": null,
    "description": "Canvas base width",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#height",
    "access": null,
    "description": "Canvas base height",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#element",
    "access": null,
    "description": "Target drawings canvas element",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#init",
    "access": null,
    "description": "Initializes canvases and contexts",
    "lineNumber": 70,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "elementClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#elementClone",
    "access": null,
    "description": "Canvas caching element",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement",
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#context",
    "access": null,
    "description": "Target drawings canvas element 2D context",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contextClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#contextClone",
    "access": null,
    "description": "Canvas caching element 2D context",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawWidth",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawWidth",
    "access": null,
    "description": "Actual drawings width",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawHeight",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawHeight",
    "access": null,
    "description": "Actual drawings height",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawX",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawX",
    "access": null,
    "description": "X-coordinate of drawings zero point",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawY",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawY",
    "access": null,
    "description": "Y-coordinate of drawings zero point",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minSide",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#minSide",
    "access": null,
    "description": "Minimal side length in pixels of the drawing",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#destroy",
    "access": null,
    "description": "Destroys this object, removing the references from memory",
    "lineNumber": 151,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#context",
    "access": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contextClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#contextClone",
    "access": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "elementClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#elementClone",
    "access": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#element",
    "access": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onRedraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#onRedraw",
    "access": null,
    "description": "On canvas redraw event callback",
    "lineNumber": 176,
    "type": {
      "nullable": null,
      "types": [
        "function",
        "null",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "commit",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#commit",
    "access": null,
    "description": "Commits the drawings",
    "lineNumber": 182,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "redraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#redraw",
    "access": null,
    "description": "Redraw this object",
    "lineNumber": 196,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onRedraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#onRedraw",
    "access": null,
    "description": "On canvas redraw event callback",
    "lineNumber": 204,
    "type": {
      "nullable": null,
      "types": [
        "function(): *"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "pixelRatio",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas.pixelRatio",
    "access": null,
    "description": "Returns current device pixel ratio",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "redraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas.redraw",
    "access": null,
    "description": "Forces redraw all canvas in the current collection",
    "lineNumber": 223,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/drawings.js",
    "memberof": null,
    "longname": "lib/drawings.js",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @access private\n * @typedef {CanvasRenderingContext2D|{max: number, maxRadius: number}} Canvas2DContext\n */\n\n/* istanbul ignore next: private, not testable */\n/**\n * Common canvas drawings functions\n */\nlet drawings = {\n\n    /**\n     * Draws rounded corners rectangle\n     *\n     * @access private\n     * @param {Canvas2DContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @param {number} r\n     */\n    roundRect(context, x, y, w, h, r) {\n        context.beginPath();\n\n        context.moveTo(x + r, y);\n        context.lineTo(x + w - r, y);\n\n        context.quadraticCurveTo(x + w, y, x + w, y + r);\n        context.lineTo(x + w, y + h - r);\n\n        context.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n        context.lineTo(x + r, y + h);\n\n        context.quadraticCurveTo(x, y + h, x, y + h - r);\n        context.lineTo(x, y + r);\n\n        context.quadraticCurveTo(x, y, x + r, y);\n\n        context.closePath();\n    },\n\n    /* istanbul ignore next: private, not testable */\n    /**\n     * Pads a given value with leading zeros using the given options\n     *\n     * @access private\n     * @param {number} val\n     * @param {GaugeOptions|{valueInt: number, valueDec: number}} options\n     * @returns {string}\n     */\n    padValue(val, options) {\n        let dec = options.valueDec;\n        let int = options.valueInt;\n        let i = 0;\n        let s, strVal, n;\n\n        val = parseFloat(val);\n        n = (val < 0);\n        val = Math.abs(val);\n\n        if (dec > 0) {\n            strVal = val.toFixed(dec).toString().split('.');\n            s = int - strVal[0].length;\n\n            for (; i < s; ++i) {\n                strVal[0] = '0' + strVal[0];\n            }\n\n            strVal = (n ? '-' : '') + strVal[0] + '.' + strVal[1];\n        }\n\n        else {\n            strVal = Math.round(val).toString();\n            s = int - strVal.length;\n\n            for (; i < s; ++i) {\n                strVal = '0' + strVal;\n            }\n\n            strVal = (n ? '-' : '') + strVal;\n        }\n\n        return strVal;\n    },\n\n    /**\n     * Formats a number for display on the dial's plate using the majorTicksFormat\n     * config option.\n     *\n     * @access private\n     * @param {number} num number to format\n     * @param {object} options\n     * @returns {string} formatted number\n     */\n    formatMajorTickNumber(num, options) {\n        let right, hasDec = false;\n\n        // First, force the correct number of digits right of the decimal.\n        if (options.majorTicksDec === 0) {\n            right = Math.round(num).toString();\n        }\n\n        else {\n            right = num.toFixed(options.majorTicksDec);\n        }\n\n        // Second, force the correct number of digits left of the decimal.\n        if (options.majorTicksInt > 1) {\n            // Does this number have a decimal?\n            hasDec = ~right.indexOf('.');\n\n            // Is this number a negative number?\n            if (~right.indexOf('-')) {\n                return '-' + [\n                        options.majorTicksInt +\n                        options.majorTicksDec +\n                        2 + (hasDec ? 1 : 0) - right.length\n                    ].join('0') + right.replace('-', '');\n            }\n\n            else {\n                return [\n                        options.majorTicksInt +\n                        options.majorTicksDec +\n                        1 + (hasDec ? 1 : 0) - right.length\n                    ].join('0') + right;\n            }\n        }\n\n        return right;\n    },\n\n    /**\n     * Transforms degrees to radians\n     *\n     * @param {number} degrees\n     * @returns {number}\n     */\n    radians(degrees) {\n        return degrees * Math.PI / 180;\n    },\n\n    /**\n     * Calculates and returns radial point coordinates\n     *\n     * @access private\n     * @param {number} radius\n     * @param {number} angle\n     * @returns {{x: number, y: number}}\n     */\n    radialPoint(radius, angle) {\n        return { x: -radius * Math.sin(angle), y: radius * Math.cos(angle) };\n    },\n\n    /**\n     * Creates and returns linear gradient canvas object\n     *\n     * @access private\n     * @param {Canvas2DContext} context\n     * @param {string} colorFrom\n     * @param {string} colorTo\n     * @param {number} length\n     * @returns {CanvasGradient}\n     */\n    linearGradient(context, colorFrom, colorTo, length) {\n        let grad = context.createLinearGradient(0, 0, 0, length);\n\n        grad.addColorStop(0, colorFrom);\n        grad.addColorStop(1, colorTo);\n\n        return grad;\n    }\n};\n\nexport default  drawings;\n\nmodule.exports = drawings;\n"
  },
  {
    "__docId__": 126,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Canvas2DContext",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~Canvas2DContext",
    "access": "private",
    "description": "",
    "type": {
      "types": [
        "CanvasRenderingContext2D",
        "{max: number, maxRadius: number}"
      ],
      "optional": false,
      "name": "Canvas2DContext"
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~drawings",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/drawings.js",
    "importStyle": "drawings",
    "description": "Common canvas drawings functions",
    "lineNumber": 37,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/polyfill.js",
    "memberof": null,
    "longname": "lib/polyfill.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @external {Object.assign} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n/* istanbul ignore next */\nif (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function(target, firstSource) {\n            'use strict';\n\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert first argument to object');\n            }\n\n            var to = Object(target);\n            var i = 1;\n\n            for (; i < arguments.length; i++) {\n                var nextSource = arguments[i];\n\n                if (nextSource === undefined || nextSource === null) {\n                    continue;\n                }\n\n                var keysArray = Object.keys(Object(nextSource));\n                var nextIndex = 0, len = keysArray.length;\n\n                for (; nextIndex < len; nextIndex++) {\n                    var nextKey = keysArray[nextIndex];\n                    var desc = Object.getOwnPropertyDescriptor(\n                        nextSource, nextKey);\n\n                    if (desc !== undefined && desc.enumerable) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n\n            return to;\n        }\n    });\n}\n\n/**\n * @external {Array.indexOf} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\n/* istanbul ignore next */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(searchElement, fromIndex) {\n        var k;\n\n        if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var O = Object(this);\n        var len = O.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n\n        var n = +fromIndex || 0;\n\n        if (Math.abs(n) === Infinity) {\n            n = 0;\n        }\n\n        if (n >= len) {\n            return -1;\n        }\n\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        while (k < len) {\n            if (k in O && O[k] === searchElement) {\n                return k;\n            }\n\n            k++;\n        }\n\n        return -1;\n    };\n}\n"
  },
  {
    "__docId__": 129,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object.assign",
    "externalLink": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
    "memberof": "lib/polyfill.js",
    "longname": "lib/polyfill.js~Object.assign",
    "access": null,
    "description": "",
    "lineNumber": 5
  },
  {
    "__docId__": 130,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array.indexOf",
    "externalLink": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
    "memberof": "lib/polyfill.js",
    "longname": "lib/polyfill.js~Array.indexOf",
    "access": null,
    "description": "",
    "lineNumber": 50
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/vendorize.js",
    "memberof": null,
    "longname": "lib/vendorize.js",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Look-ups for a proper vendor-specific property and returns its value\n *\n * @example\n * var requestAnimationFrame = vendorize('requestAnimationFrame');\n * // it will refer properly to:\n * //  - window.requestAnimationFrame by default or to\n * //  - window.webkitRequestAnimationFrame or to\n * //  - window.mozRequestAnimationFrame or to\n * //  - window.msRequestAnimationFrame or to\n * //  - window.oRequestAnimationFrame\n * // depending on the current browser vendor\n *\n * @author Mykhailo Stadnyk <mikhus@gmail.com>\n * @param {string} prop\n * @param {HTMLElement|Window|object} [from] - default is window\n * @returns {*}\n */\nexport default function vendorize(prop, from) {\n    /* istanbul ignore else: no reason to cover */\n    if (!from) {\n        from = typeof window === 'undefined' ? global : window;\n    }\n\n    if (typeof from[prop] !== 'undefined') {\n        return from[prop];\n    }\n\n    let vendors = ['webkit', 'moz', 'ms', 'o'];\n    let i = 0;\n    let s = vendors.length;\n    let capitalized = prop.charAt(0).toUpperCase() + prop.substr(1);\n\n    for (; i < s; i++) {\n        let vendorProp = from[vendors[i] + capitalized];\n\n        /* istanbul ignore if: requires very complex environment to test (specific browser version) */\n        if (typeof vendorProp !== 'undefined') {\n            return vendorProp;\n        }\n    }\n\n    return null;\n}\n\nmodule.exports = vendorize;\n"
  },
  {
    "__docId__": 132,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "vendorize",
    "memberof": "lib/vendorize.js",
    "longname": "lib/vendorize.js~vendorize",
    "access": null,
    "export": true,
    "importPath": "canv-gauge/lib/vendorize.js",
    "importStyle": "vendorize",
    "description": "Look-ups for a proper vendor-specific property and returns its value",
    "examples": [
      "var requestAnimationFrame = vendorize('requestAnimationFrame');\n// it will refer properly to:\n//  - window.requestAnimationFrame by default or to\n//  - window.webkitRequestAnimationFrame or to\n//  - window.mozRequestAnimationFrame or to\n//  - window.msRequestAnimationFrame or to\n//  - window.oRequestAnimationFrame\n// depending on the current browser vendor"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Mykhailo Stadnyk <mikhus@gmail.com>"
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "Window",
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "from",
        "description": "default is window"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]