[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Animation.js",
    "memberof": null,
    "longname": "lib/Animation.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nconst vendorize = require('./vendorize');\n\n/**\n * @ignore\n * @typedef {object} ns\n */\n\n/* istanbul ignore next */\n/**\n * @type {function(callback: function(time: number): number, element?: HTMLElement)}\n * @access private\n */\nconst requestAnimationFrame = vendorize('requestAnimationFrame') ||\n    (callback => setTimeout(() => callback(new Date().getTime()), 1000 / 60));\n\n/**\n * Generic AnimationRule function interface\n *\n * @typedef {function(percent: number): number} AnimationRule\n */\n\n/**\n * Callback for animation step draw event.\n * It will be called each time animation step is executed, bypassing\n * as first argument a percent of animation completeness. It is expected\n * that this callback will do an actual work of animating an elements or\n * whatever, as far as animation engine is just calculating and executing\n * animation steps without any knowledge about things under animation.\n *\n * @typedef {function(percent: number): *} DrawEventCallback\n */\n\n/**\n * Callback for animation complete event.\n * It is called once each animation is complete.\n *\n * @typedef {function(): *} EndEventCallback\n */\n\n/**\n * Predefined known animation rules.\n * It's a simple collection of math for some most used animations.\n *\n * @typedef {{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}} AnimationRules\n */\n\n/* istanbul ignore next: no reason covering this */\nlet rules = {\n    linear: p => p,\n    quad: p => Math.pow(p, 2),\n    dequad: p => 1 - rules.quad(1 - p),\n    quint: p => Math.pow(p, 5),\n    dequint: p => 1 - Math.pow(1 - p, 5),\n    cycle: p => 1 - Math.sin(Math.acos(p)),\n    decycle: p => Math.sin(Math.acos(1 - p)),\n    bounce: p => 1 - rules.debounce(1 - p),\n    debounce: p => {\n        let a = 0, b = 1;\n        for (; 1; a += b, b /= 2) {\n            if (p >= (7 - 4 * a) / 11) {\n                return -Math.pow((11 - 6 * a - 11 * p) / 4, 2) +\n                    Math.pow(b, 2);\n            }\n        }\n    },\n    elastic: p => 1 - rules.delastic(1 - p),\n    delastic: p => {\n        let x = 1.5;\n        return Math.pow(2, 10 * (p - 1)) *\n            Math.cos(20 * Math.PI * x / 3 * p);\n    }\n};\n\n/* istanbul ignore next: private, not testable */\n/**\n * Evaluates animation step and decides if the next step required or\n * stops animation calling a proper events.\n *\n * @access private\n * @param {number} time\n * @param {DrawEventCallback} draw\n * @param {number} start\n * @param {AnimationRule} rule\n * @param {number} duration\n * @param {EndEventCallback} end\n * @param {Animation} anim\n */\nfunction step(time, draw, start, rule, duration, end, anim) {\n    if (typeof rule !== 'function') {\n        throw new TypeError('Invalid animation rule:', rule);\n    }\n\n    let progress = time - start;\n    let percent = progress / duration;\n\n    if (percent > 1) {\n        percent = 1;\n    }\n\n    draw && draw(percent === 1 ? percent : rule(percent));\n\n    if (progress < duration) {\n        anim.frame = requestAnimationFrame(time =>\n            step(time, draw, start, rule, duration, end, anim)\n        );\n    }\n\n    else {\n        end && end();\n    }\n}\n\n/**\n * Animation engine API for JavaScript-based animations.\n * This is simply an animation core framework which simplifies creation\n * of various animations for generic purposes.\n *\n * @example\n * // create 'linear' animation engine, 500ms duration\n * let linear = new Animation('linear', 500);\n *\n * // create 'elastic' animation engine\n * let elastic = new Animation('elastic');\n *\n * // define animation behavior\n * let bounced = new Animation('bounce', 500, percent => {\n *     let value = parseInt(percent * 100, 10);\n *\n *     $('div.bounced').css({\n *         width: value + '%',\n *         height: value + '%'\n *     });\n * });\n *\n * // execute animation\n * bounced.animate();\n *\n * // execute animation and handle when its finished\n * bounced.animate(null, () => {\n *    console.log('Animation finished!');\n * });\n */\nexport default class Animation {\n\n    /**\n     * @constructor\n     * @param {string|AnimationRule} rule\n     * @param {number} duration\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    constructor(rule = 'linear', duration = 250, draw = (()=>{}),\n                end = (()=>{}))\n    {\n        /**\n         * Overall animation duration in milliseconds.\n         * By default is equal to 250 ms.\n         *\n         * @type {number}\n         */\n        this.duration = duration;\n\n        /**\n         * Animation rule. By default is linear animation.\n         * Animation rule is a subject to animation rules, which are\n         * a simple object containing math-based methods for calculating\n         * animation steps.\n         *\n         * @type {string|AnimationRule}\n         */\n        this.rule = rule;\n\n        /**\n         * Callback function for the animation step draw event.\n         *\n         * @type {DrawEventCallback}\n         */\n        this.draw = draw;\n\n        /**\n         * Callback for the animation complete event.\n         *\n         * @type {EndEventCallback}\n         */\n        this.end = end;\n\n        if (typeof this.draw !== 'function') {\n            throw new TypeError('Invalid animation draw callback:', draw);\n        }\n\n        if (typeof this.end !== 'function') {\n            throw new TypeError('Invalid animation end callback:', end);\n        }\n    }\n\n    /* istanbul ignore next: non-testable */\n    /**\n     * Performs animation calling each animation step draw callback and\n     * end callback at the end of animation. Callbacks are optional to this\n     * method call. If them are not bypassed will be used that ones which\n     * was pre-set on constructing an Animation object or pre-set after\n     * construction.\n     *\n     * @example\n     * function draw(percent) {\n     *     $('.my-animated-divs').css({\n     *         width: parseInt(percent * 100, 10) + '%'\n     *     });\n     * }\n     * function done() {\n     *     console.log('Animation complete!');\n     * }\n     *\n     * // Define 'draw' and 'end' callbacks on construction\n     * var animation = new Animation('cycle', 500, draw, done);\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks after construction\n     * var animation = new Animation('cycle', 500);\n     * animation.draw = draw;\n     * animation.end = done;\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks at animation\n     * var animation = new Animation('cycle', 500);\n     * animation.animate(draw, done);\n     *\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    animate(draw, end) {\n        //noinspection JSUnresolvedVariable\n        const start = ns.performance && ns.performance.now ?\n                ns.performance.now() :\n                (vendorize('animationStartTime') || Date.now());\n\n        draw = draw || this.draw;\n        end = end || this.end;\n\n        /**\n         * Current requested animation frame identifier\n         *\n         * @type {number}\n         */\n        this.frame = requestAnimationFrame(time =>\n            step(time, draw, start, rules[this.rule] || this.rule,\n                this.duration, end, this));\n    }\n\n    /**\n     * Destroys this object properly\n     */\n    destroy() {\n        if (this.frame) {\n            const cancelAnimationFrame = vendorize('cancelAnimationFrame') ||\n                /* istanbul ignore next */\n                ((id) => {});\n\n            cancelAnimationFrame(this.frame);\n            this.frame = null;\n        }\n\n        this.draw = null;\n        this.end = null;\n    }\n}\n\n/**\n * Animation rules bound statically to Animation constructor.\n *\n * @type {AnimationRules}\n * @static\n */\nAnimation.rules = rules;\n\nmodule.exports = Animation;\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "vendorize",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~vendorize",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/Animation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~ns",
    "access": null,
    "description": "",
    "ignore": true,
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "requestAnimationFrame",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~requestAnimationFrame",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/Animation.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "function(callback: function(time: number): number, element?: HTMLElement)"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "AnimationRule",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~AnimationRule",
    "access": null,
    "description": "Generic AnimationRule function interface",
    "type": {
      "types": [
        "function(percent: number): number"
      ],
      "optional": false,
      "name": "AnimationRule"
    }
  },
  {
    "__docId__": 5,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DrawEventCallback",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~DrawEventCallback",
    "access": null,
    "description": "Callback for animation step draw event.\nIt will be called each time animation step is executed, bypassing\nas first argument a percent of animation completeness. It is expected\nthat this callback will do an actual work of animating an elements or\nwhatever, as far as animation engine is just calculating and executing\nanimation steps without any knowledge about things under animation.",
    "type": {
      "types": [
        "function(percent: number): *"
      ],
      "optional": false,
      "name": "DrawEventCallback"
    }
  },
  {
    "__docId__": 6,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "EndEventCallback",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~EndEventCallback",
    "access": null,
    "description": "Callback for animation complete event.\nIt is called once each animation is complete.",
    "type": {
      "types": [
        "function(): *"
      ],
      "optional": false,
      "name": "EndEventCallback"
    }
  },
  {
    "__docId__": 7,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "AnimationRules",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~AnimationRules",
    "access": null,
    "description": "Predefined known animation rules.\nIt's a simple collection of math for some most used animations.",
    "lineNumber": 74,
    "type": {
      "types": [
        "{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}"
      ],
      "optional": false,
      "name": "AnimationRules"
    }
  },
  {
    "__docId__": 8,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "step",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~step",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/Animation.js",
    "importStyle": null,
    "description": "Evaluates animation step and decides if the next step required or\nstops animation calling a proper events.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AnimationRule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Animation"
        ],
        "spread": false,
        "optional": false,
        "name": "anim",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Animation",
    "memberof": "lib/Animation.js",
    "longname": "lib/Animation.js~Animation",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/Animation.js",
    "importStyle": "Animation",
    "description": "Animation engine API for JavaScript-based animations.\nThis is simply an animation core framework which simplifies creation\nof various animations for generic purposes.",
    "examples": [
      "// create 'linear' animation engine, 500ms duration\nlet linear = new Animation('linear', 500);\n\n// create 'elastic' animation engine\nlet elastic = new Animation('elastic');\n\n// define animation behavior\nlet bounced = new Animation('bounce', 500, percent => {\n    let value = parseInt(percent * 100, 10);\n\n    $('div.bounced').css({\n        width: value + '%',\n        height: value + '%'\n    });\n});\n\n// execute animation\nbounced.animate();\n\n// execute animation and handle when its finished\nbounced.animate(null, () => {\n   console.log('Animation finished!');\n});"
    ],
    "lineNumber": 169,
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#constructor",
    "access": null,
    "description": "",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "AnimationRule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "end",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "duration",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#duration",
    "access": null,
    "description": "Overall animation duration in milliseconds.\nBy default is equal to 250 ms.",
    "lineNumber": 187,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rule",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#rule",
    "access": null,
    "description": "Animation rule. By default is linear animation.\nAnimation rule is a subject to animation rules, which are\na simple object containing math-based methods for calculating\nanimation steps.",
    "lineNumber": 197,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "AnimationRule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#draw",
    "access": null,
    "description": "Callback function for the animation step draw event.",
    "lineNumber": 204,
    "type": {
      "nullable": null,
      "types": [
        "DrawEventCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#end",
    "access": null,
    "description": "Callback for the animation complete event.",
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "EndEventCallback"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "animate",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#animate",
    "access": null,
    "description": "Performs animation calling each animation step draw callback and\nend callback at the end of animation. Callbacks are optional to this\nmethod call. If them are not bypassed will be used that ones which\nwas pre-set on constructing an Animation object or pre-set after\nconstruction.",
    "examples": [
      "function draw(percent) {\n    $('.my-animated-divs').css({\n        width: parseInt(percent * 100, 10) + '%'\n    });\n}\nfunction done() {\n    console.log('Animation complete!');\n}\n\n// Define 'draw' and 'end' callbacks on construction\nvar animation = new Animation('cycle', 500, draw, done);\nanimation.animate();\n\n// Define 'draw' and 'end' callbacks after construction\nvar animation = new Animation('cycle', 500);\nanimation.draw = draw;\nanimation.end = done;\nanimation.animate();\n\n// Define 'draw' and 'end' callbacks at animation\nvar animation = new Animation('cycle', 500);\nanimation.animate(draw, done);"
    ],
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "DrawEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "draw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EndEventCallback"
        ],
        "spread": false,
        "optional": true,
        "name": "end",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frame",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#frame",
    "access": null,
    "description": "Current requested animation frame identifier",
    "lineNumber": 271,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#destroy",
    "access": null,
    "description": "Destroys this object properly",
    "lineNumber": 279,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frame",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#frame",
    "access": null,
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#draw",
    "access": null,
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "lib/Animation.js~Animation",
    "longname": "lib/Animation.js~Animation#end",
    "access": null,
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/BaseGauge.js",
    "memberof": null,
    "longname": "lib/BaseGauge.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "require('./polyfill');\n\nconst SmartCanvas = require('./SmartCanvas');\nconst Animation = require('./Animation');\nconst Collection = require('./Collection');\nconst DomObserver = require('./DomObserver');\n\nlet gauges = new Collection();\n\n/**\n * Basic abstract BaseGauge class implementing common functionality\n * for different type of gauges.\n *\n * It should not be instantiated directly but must be extended by a final\n * gauge implementation.\n *\n * @abstract\n * @example\n *\n * class MyCoolGauge extends BaseGauge {\n *\n *     // theses methods below MUST be implemented:\n *\n *     constructor(options) {\n *        // ... do something with options\n *        super(options);\n *        // ... implement anything else\n *     }\n *\n *     draw() {\n *         // ... some implementation here\n *         return this;\n *     }\n * }\n */\nexport default class BaseGauge {\n\n    /**\n     * @constructor\n     * @abstract\n     * @param {GenericOptions} options\n     */\n    constructor(options) {\n        let className = this.constructor.name;\n\n        if (className === 'BaseGauge') {\n            throw new TypeError('Attempt to instantiate abstract class!');\n        }\n\n        gauges.push(this);\n\n        /**\n         * Gauge type class\n         *\n         * @type {BaseGauge} type\n         */\n        this.type = ns[className];\n\n        /**\n         * True if gauge has been drawn for the first time, false otherwise.\n         *\n         * @type {boolean}\n         */\n        this.initialized = false;\n\n        options.minValue = parseFloat(options.minValue);\n        options.maxValue = parseFloat(options.maxValue);\n        options.value = parseFloat(options.value) || 0;\n\n        if (!options.borders) {\n            options.borderInnerWidth = options.borderMiddleWidth =\n                options.borderOuterWidth = 0;\n        }\n\n        if (!options.renderTo) {\n            throw TypeError('Canvas element was not specified when creating ' +\n                'the Gauge object!');\n        }\n\n        let canvas = options.renderTo.tagName ?\n            options.renderTo :\n            /* istanbul ignore next: to be tested with e2e tests */\n            document.getElementById(options.renderTo);\n\n        if (!(canvas instanceof HTMLCanvasElement)) {\n            throw TypeError('Given gauge canvas element is invalid!');\n        }\n\n        if (!options.width || !options.height) {\n            if (!options.width) options.width = canvas.parentNode ?\n                canvas.parentNode.offsetWidth : canvas.offsetWidth;\n            if (!options.height) options.height = canvas.parentNode ?\n                canvas.parentNode.offsetHeight : canvas.offsetHeight;\n        }\n\n        /**\n         * Gauge options\n         *\n         * @type {GenericOptions} options\n         */\n        this.options = options || {};\n\n        if (this.options.animateOnInit) {\n            this._value = this.options.value;\n            this.options.value = this.options.minValue;\n        }\n\n        /**\n         * @type {SmartCanvas} canvas\n         */\n        this.canvas = new SmartCanvas(canvas, options.width, options.height);\n        this.canvas.onRedraw = this.draw.bind(this);\n\n        /**\n         * @type {Animation} animation\n         */\n        this.animation = new Animation(\n            options.animationRule,\n            options.animationDuration);\n    }\n\n    /**\n     * Sets new value for this gauge.\n     * If gauge is animated by configuration it will trigger a proper animation.\n     * Upsetting a value triggers gauge redraw.\n     *\n     * @param {number} value\n     */\n    set value(value) {\n        let fromValue = this.options.value;\n\n        if (value === this.options.value) return;\n\n        if (this.options.animation) {\n            /**\n             * @type {number}\n             * @access private\n             */\n            this._value = value;\n\n            this.animation.animate(percent => {\n                this.options.value = fromValue + (value - fromValue) * percent;\n\n                this.draw();\n            }, () => {\n                this.options.value = value;\n                delete this._value;\n                this.draw();\n            });\n        }\n\n        else {\n            this.options.value = value;\n            this.draw();\n        }\n    }\n\n    /**\n     * Returns current value of the gauge\n     *\n     * @return {number}\n     */\n    get value() {\n        return typeof this._value === 'undefined' ?\n            this.options.value : this._value;\n    }\n\n    /**\n     * Updates gauge configuration options at runtime and redraws the gauge\n     *\n     * @param {RadialGaugeOptions} options\n     * @returns {BaseGauge}\n     */\n    update(options) {\n        Object.assign(this.options, options || {});\n\n        this.canvas.width = this.options.width;\n        this.canvas.height = this.options.height;\n\n        this.animation.rule = this.options.animationRule;\n        this.animation.duration = this.options.animationDuration;\n\n        this.canvas.redraw();\n\n        return this;\n    }\n\n    /**\n     * Performs destruction of this object properly\n     */\n    destroy() {\n        let index = gauges.indexOf(this);\n\n        /* istanbul ignore else */\n        if (~index) {\n            //noinspection JSUnresolvedFunction\n            gauges.splice(index, 1);\n        }\n\n        this.canvas.destroy();\n        this.canvas = null;\n\n        this.animation.destroy();\n        this.animation = null;\n    }\n\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @abstract\n     * @returns {BaseGauge}\n     */\n    draw() {\n        if (this.options.animateOnInit && !this.initialized) {\n            this.value = this._value;\n            this.initialized = true;\n        }\n    }\n\n    /**\n     * Inject given gauge object into DOM\n     *\n     * @param {string} type\n     * @param {GenericOptions} options\n     */\n    static initialize(type, options) {\n        new DomObserver(options, 'canvas', type);\n    }\n}\n\n\n/**\n * @ignore\n * @typedef {object} ns\n */\n/* istanbul ignore if */\nif (typeof ns !== 'undefined') {\n    ns['BaseGauge'] = BaseGauge;\n    (ns.document || ns)['gauges'] = gauges;\n}\n\nmodule.exports = BaseGauge;\n"
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~SmartCanvas",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Animation",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~Animation",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Collection",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~Collection",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DomObserver",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~DomObserver",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "gauges",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~gauges",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "Collection"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~BaseGauge",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/BaseGauge.js",
    "importStyle": "BaseGauge",
    "description": "Basic abstract BaseGauge class implementing common functionality\nfor different type of gauges.\n\nIt should not be instantiated directly but must be extended by a final\ngauge implementation.",
    "examples": [
      "\nclass MyCoolGauge extends BaseGauge {\n\n    // theses methods below MUST be implemented:\n\n    constructor(options) {\n       // ... do something with options\n       super(options);\n       // ... implement anything else\n    }\n\n    draw() {\n        // ... some implementation here\n        return this;\n    }\n}"
    ],
    "lineNumber": 36,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 28,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#type",
    "access": null,
    "description": "Gauge type class",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "initialized",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#initialized",
    "access": null,
    "description": "True if gauge has been drawn for the first time, false otherwise.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#options",
    "access": null,
    "description": "Gauge options",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "GenericOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#_value",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#canvas",
    "access": null,
    "description": "",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "SmartCanvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "animation",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#animation",
    "access": null,
    "description": "",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Animation"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#value",
    "access": null,
    "description": "Sets new value for this gauge.\nIf gauge is animated by configuration it will trigger a proper animation.\nUpsetting a value triggers gauge redraw.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#_value",
    "access": "private",
    "description": "",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#value",
    "access": null,
    "description": "Returns current value of the gauge",
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#update",
    "access": null,
    "description": "Updates gauge configuration options at runtime and redraws the gauge",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseGauge}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#destroy",
    "access": null,
    "description": "Performs destruction of this object properly",
    "lineNumber": 191,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#canvas",
    "access": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "animation",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#animation",
    "access": null,
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#draw",
    "access": null,
    "description": "Triggering gauge render on a canvas.",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseGauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "BaseGauge"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#value",
    "access": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "initialized",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge#initialized",
    "access": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "initialize",
    "memberof": "lib/BaseGauge.js~BaseGauge",
    "longname": "lib/BaseGauge.js~BaseGauge.initialize",
    "access": null,
    "description": "Inject given gauge object into DOM",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/BaseGauge.js",
    "longname": "lib/BaseGauge.js~ns",
    "access": null,
    "description": "",
    "lineNumber": 237,
    "ignore": true,
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 47,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/Collection.js",
    "memberof": null,
    "longname": "lib/Collection.js",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Gauge collections type.\n *\n * It is used ES5 declaration here, because babel\n * transpiles inheritance incorrectly in this case.\n *\n * @class Collection\n * @constructor\n */\nexport default function Collection () {\n    Array.prototype.constructor.apply(this, arguments);\n}\n\nCollection.prototype = Object.create(Array.prototype);\nCollection.prototype.constructor = Collection;\n\n    /**\n     * Returns gauge object by its identifier or index in the collection\n     *\n     * @param {string|number} id\n     * @return {*}\n     */\nCollection.prototype.get = function(id) {\n    if (typeof id === 'string') {\n        let i = 0;\n        let s = this.length;\n\n        for (; i < s; i++) {\n            let canvas = this[i].options.renderTo.tagName ?\n                this[i].options.renderTo :\n                /* istanbul ignore next: should be tested with e2e tests */\n                document.getElementById(this[i].options.renderTo || '');\n\n            if (canvas.getAttribute('id') === id) {\n                return this[i];\n            }\n        }\n    }\n\n    else if (typeof id === 'number') {\n        return this[id];\n    }\n\n    return null;\n};\n\nmodule.exports = Collection;\n"
  },
  {
    "__docId__": 48,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Collection",
    "memberof": "lib/Collection.js",
    "longname": "lib/Collection.js~Collection",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/Collection.js",
    "importStyle": "Collection",
    "description": "Gauge collections type.\n\nIt is used ES5 declaration here, because babel\ntranspiles inheritance incorrectly in this case.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Collection"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "get",
    "memberof": "lib/Collection.js",
    "longname": "lib/Collection.js~get",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/Collection.js",
    "importStyle": null,
    "description": "Returns gauge object by its identifier or index in the collection",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/DomObserver.js",
    "memberof": null,
    "longname": "lib/DomObserver.js",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * @typedef {{ constructor: function(options: GenericOptions): GaugeInterface, draw: function(): GaugeInterface, destroy: function, update: function(options: GenericOptions) }} GaugeInterface\n */\n/**\n * @typedef {{parse: function, stringify: function}} JSON\n * @external {JSON} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON\n */\n/**\n * @ignore\n * @typedef {{MutationObserver: function}} ns\n */\n\n/**\n * DOM Observer.\n * It will observe DOM document for a configured element types and\n * instantiate associated Types for an existing or newly added DOM elements\n *\n * @example\n * class ProgressBar {\n *     constructor(options) {}\n *     draw() {}\n * }\n *\n * // It will observe DOM document for elements <div>\n * // having attribute 'data-type=\"progress\"'\n * // and instantiate for each new instance of ProgressBar\n *\n * new DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n *\n * // assume we could have HTML like this\n * // <div data-type=\"progress\" color=\"blue\"></div>\n * // in this case all matching attributes names for a given options will be\n * // parsed and bypassed to an instance from HTML attributes\n */\nexport default class DomObserver {\n\n    /**\n     * @constructor\n     * @param {object} options\n     * @param {string} element\n     * @param {string} type\n     */\n    constructor(options, element, type) {\n        //noinspection JSUnresolvedVariable\n        /**\n         * Default instantiation options for the given type\n         *\n         * @type {Object}\n         */\n        this.options = options;\n\n        /**\n         * Name of an element to lookup/observe\n         *\n         * @type {string}\n         */\n        this.element = element.toLowerCase();\n\n        /**\n         * data-type attribute value to lookup\n         *\n         * @type {string}\n         */\n        this.type = DomObserver.toDashed(type);\n\n        /**\n         * Actual type constructor to instantiate for each found element\n         *\n         * @type {Function}\n         */\n        this.Type = ns[type];\n\n        /**\n         * Signals if mutations observer for this type or not\n         *\n         * @type {boolean}\n         */\n        this.mutationsObserved = false;\n\n        /**\n         * Flag specifies whenever the browser supports observing\n         * of DOM tree mutations or not\n         *\n         * @type {boolean}\n         */\n        this.isObservable = !!ns.MutationObserver;\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        DomObserver.domReady(this.traverse.bind(this));\n    }\n\n    /**\n     * Checks if given node is valid node to process\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {boolean}\n     */\n    isValidNode(node) {\n        //noinspection JSUnresolvedVariable\n        return !!(\n            node.tagName &&\n            node.tagName.toLowerCase() === this.element &&\n            node.getAttribute('data-type') === this.type\n        );\n    }\n\n    /**\n     * Traverse entire current DOM tree and process matching nodes.\n     * Usually it should be called only once on document initialization.\n     */\n    traverse() {\n        let elements = document.getElementsByTagName(this.element);\n        let i = 0, s = elements.length;\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        for (; i < s; i++) {\n            this.process(elements[i]);\n        }\n\n        if (this.isObservable && !this.mutationsObserved) {\n            new ns.MutationObserver(this.observe.bind(this))\n                .observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    characterData: true,\n                    attributeOldValue: true,\n                    characterDataOldValue: true\n                });\n\n            this.mutationsObserved = true;\n        }\n    }\n\n    /**\n     * Observes given mutation records for an elements to process\n     *\n     * @param {MutationRecord[]} records\n     */\n    observe(records) {\n        let i = 0;\n        let s = records.length;\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        for (; i < s; i++) {\n            let record = records[i];\n\n            if (record.type === 'attributes' &&\n                record.attributeName === 'data-type' &&\n                this.isValidNode(record.target) &&\n                record.oldValue !== this.type) // skip false-positive mutations\n            {\n                setTimeout(() => this.process(record.target));\n            }\n\n            else if (record.addedNodes && record.addedNodes.length) {\n                let ii = 0;\n                let ss = record.addedNodes.length;\n\n                for (; ii < ss; ii++) {\n                    this.process(record.addedNodes[ii]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Parses given attribute value to a proper JavaScript value.\n     * For example it will parse some stringified value to a proper type\n     * value, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}\n     *\n     * @param {*} value\n     * @return {*}\n     */\n    static parse(value) {\n        // parse boolean\n        if (value === 'true') return true;\n        if (value === 'false') return false;\n\n        // parse undefined\n        if (value === 'undefined') return undefined;\n\n        // parse null\n        if (value === 'null') return null;\n\n        // Comma-separated strings to array parsing.\n        // It won't match strings which contains non alphanumeric characters to\n        // prevent strings like 'rgba(0,0,0,0)' or JSON-like from being parsed.\n        // Typically it simply allows easily declare arrays as comma-separated\n        // numbers or plain strings. If something more complicated is\n        // required it can be declared using JSON format syntax\n        if (/^[-+.\\w\\d\\s]+(?:,[-+.\\w\\d\\s]*)+$/.test(value)) {\n            return value.split(',');\n        }\n\n        // parse JSON\n        try { return JSON.parse(value); } catch(e) {}\n\n        // plain value - no need to parse\n        return value;\n    }\n\n    /**\n     * Processes a given node, instantiating a proper type constructor for it\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {GaugeInterface|null}\n     */\n    process(node) {\n        if (!this.isValidNode(node)) return null;\n\n        let prop;\n        let options = JSON.parse(JSON.stringify(this.options));\n        let instance = null;\n\n        for (prop in options) {\n            /* istanbul ignore else: non-testable in most cases */\n            if (options.hasOwnProperty(prop)) {\n                let attributeName = DomObserver.toAttributeName(prop);\n                let attributeValue = DomObserver.parse(\n                    node.getAttribute(attributeName));\n\n                if (attributeValue !== null && attributeValue !== undefined) {\n                    options[prop] = attributeValue;\n                }\n            }\n        }\n\n        options.renderTo = node;\n        instance = new (this.Type)(options);\n        instance.draw && instance.draw();\n\n        if (!this.isObservable) return instance;\n\n        instance.observer = new ns.MutationObserver(records => {\n            records.forEach(record => {\n                if (record.type === 'attributes') {\n                    let attr = record.attributeName.toLowerCase();\n                    let type = node.getAttribute(attr).toLowerCase();\n\n                    if (attr === 'data-type' && type && type !== this.type) {\n                        instance.observer.disconnect();\n                        delete instance.observer;\n                        instance.destroy && instance.destroy();\n                    }\n\n                    else if (attr.substr(0, 5) === 'data-') {\n                        let prop = attr.substr(5).split('-').map((part, i) => {\n                            return !i ? part :\n                            part.charAt(0).toUpperCase() + part.substr(1);\n                        }).join('');\n                        let options = {};\n\n                        options[prop] = node.getAttribute(record.attributeName);\n\n                        instance.update && instance.update(options);\n                    }\n                }\n            });\n        });\n\n        //noinspection JSCheckFunctionSignatures\n        instance.observer.observe(node, { attributes: true });\n\n        return instance;\n    }\n\n    /**\n     * Transforms camelCase string to dashed string\n     *\n     * @static\n     * @param {string} camelCase\n     * @return {string}\n     */\n    static toDashed(camelCase) {\n        let arr = camelCase.split(/(?=[A-Z])/);\n        let i = 1;\n        let s = arr.length;\n        let str = arr[0].toLowerCase();\n\n        for (; i < s; i++) {\n            str += '-' + arr[i].toLowerCase();\n        }\n\n        return str;\n    }\n\n    /**\n     * Transforms camel case property name to dash separated attribute name\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     */\n    static toAttributeName(str) {\n        return 'data-' + DomObserver.toDashed(str);\n    }\n\n    /**\n     * Cross-browser DOM ready handler\n     *\n     * @static\n     * @param {Function} handler\n     */\n    static domReady(handler) {\n        if (/comp|inter|loaded/.test((ns.document || {}).readyState + ''))\n            return handler();\n\n        if (ns.addEventListener)\n            ns.addEventListener('DOMContentLoaded', handler, false);\n\n        else if (ns.attachEvent)\n            ns.attachEvent('onload', handler);\n    }\n}\n\nmodule.exports = DomObserver;\n"
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "GaugeInterface",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~GaugeInterface",
    "access": null,
    "description": "",
    "type": {
      "types": [
        "{ constructor: function(options: GenericOptions): GaugeInterface, draw: function(): GaugeInterface, destroy: function, update: function(options: GenericOptions) }"
      ],
      "optional": false,
      "name": "GaugeInterface"
    }
  },
  {
    "__docId__": 52,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~JSON",
    "access": null,
    "description": "",
    "unknown": [
      {
        "tagName": "@typedef",
        "tagValue": "{{parse: function, stringify: function}} JSON"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~ns",
    "access": null,
    "description": "",
    "ignore": true,
    "type": {
      "types": [
        "{MutationObserver: function}"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 54,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DomObserver",
    "memberof": "lib/DomObserver.js",
    "longname": "lib/DomObserver.js~DomObserver",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/DomObserver.js",
    "importStyle": "DomObserver",
    "description": "DOM Observer.\nIt will observe DOM document for a configured element types and\ninstantiate associated Types for an existing or newly added DOM elements",
    "examples": [
      "class ProgressBar {\n    constructor(options) {}\n    draw() {}\n}\n\n// It will observe DOM document for elements <div>\n// having attribute 'data-type=\"progress\"'\n// and instantiate for each new instance of ProgressBar\n\nnew DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n\n// assume we could have HTML like this\n// <div data-type=\"progress\" color=\"blue\"></div>\n// in this case all matching attributes names for a given options will be\n// parsed and bypassed to an instance from HTML attributes"
    ],
    "lineNumber": 61,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#constructor",
    "access": null,
    "description": "",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "options",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#options",
    "access": null,
    "description": "Default instantiation options for the given type",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#element",
    "access": null,
    "description": "Name of an element to lookup/observe",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#type",
    "access": null,
    "description": "data-type attribute value to lookup",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "Type",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#Type",
    "access": null,
    "description": "Actual type constructor to instantiate for each found element",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mutationsObserved",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#mutationsObserved",
    "access": null,
    "description": "Signals if mutations observer for this type or not",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isObservable",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#isObservable",
    "access": null,
    "description": "Flag specifies whenever the browser supports observing\nof DOM tree mutations or not",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValidNode",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#isValidNode",
    "access": null,
    "description": "Checks if given node is valid node to process",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "traverse",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#traverse",
    "access": null,
    "description": "Traverse entire current DOM tree and process matching nodes.\nUsually it should be called only once on document initialization.",
    "lineNumber": 137,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mutationsObserved",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#mutationsObserved",
    "access": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observe",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#observe",
    "access": null,
    "description": "Observes given mutation records for an elements to process",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "MutationRecord[]"
        ],
        "spread": false,
        "optional": false,
        "name": "records",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parse",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.parse",
    "access": null,
    "description": "Parses given attribute value to a proper JavaScript value.\nFor example it will parse some stringified value to a proper type\nvalue, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "process",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver#process",
    "access": null,
    "description": "Processes a given node, instantiating a proper type constructor for it",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{GaugeInterface|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GaugeInterface",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toDashed",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.toDashed",
    "access": null,
    "description": "Transforms camelCase string to dashed string",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "camelCase",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "toAttributeName",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.toAttributeName",
    "access": null,
    "description": "Transforms camel case property name to dash separated attribute name",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "domReady",
    "memberof": "lib/DomObserver.js~DomObserver",
    "longname": "lib/DomObserver.js~DomObserver.domReady",
    "access": null,
    "description": "Cross-browser DOM ready handler",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@static",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/GenericOptions.js",
    "memberof": null,
    "longname": "lib/GenericOptions.js",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Describes rendering target element. Can be either string identifier of\n * the element or the element itself.\n *\n * @typedef {HTMLElement|string} RenderTarget\n */\n\n/**\n * Highlight area definition.\n * It describes highlight area starting from value to value using\n * color. Color can be describes with hex, rgb or rgba value.\n *\n * @typedef {{ from: number, to: number, color: string}} Highlight\n */\n\n/**\n * Shared generic gauges options\n *\n * @type {{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, animatedValue: boolean, animateOnInit: boolean, title: string|boolean, borders: boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorPlateEnd: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedle: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuter: string, colorBorderOuterEnd: string, colorBorderMiddle: string, colorBorderMiddleEnd: string, colorBorderInner: string, colorBorderInnerEnd: string, colorValueBoxRect: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, needle: boolean, needleShadow: boolean, needleType: string, needleStart: number, needleEnd: number, needleWidth: number, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueBoxStroke: number, valueText: string, valueTextShadow: boolean, valueBoxBorderRadius: number, highlights: Highlight[], fontNumbers: string, fontTitle: string, fontUnits: string, fontValue: string, fontTitleSize: number, fontValueSize: number, fontUnitsSize: number, fontNumbersSize: number}} GenericOptions\n */\nconst GenericOptions = {\n    // basic options\n    renderTo: null,\n    width: 0,\n    height: 0,\n    minValue: 0,\n    maxValue: 100,\n    value: 0,\n    units: false,\n    majorTicks: [0, 20, 40, 60, 80, 100],\n    minorTicks: 10,\n    strokeTicks: true,\n    animatedValue: false,\n    animateOnInit: false,\n    title: false,\n    borders: true,\n\n    // number formats\n    valueInt: 3,\n    valueDec: 2,\n    majorTicksInt: 1,\n    majorTicksDec: 0,\n\n    // animations\n    animation: true,\n    animationDuration: 500,\n    animationRule: 'cycle',\n\n    // colors\n    colorPlate: '#fff',\n    colorPlateEnd: '',\n    colorMajorTicks: '#444',\n    colorMinorTicks: '#666',\n    colorTitle: '#888',\n    colorUnits: '#888',\n    colorNumbers: '#444',\n    colorNeedle: 'rgba(240,128,128,1)',\n    colorNeedleEnd: 'rgba(255,160,122,.9)',\n    colorValueText: '#444',\n    colorValueTextShadow: 'rgba(0,0,0,0.3)',\n    colorBorderShadow: 'rgba(0,0,0,0.5)',\n    colorBorderOuter: '#ddd',\n    colorBorderOuterEnd: '#aaa',\n    colorBorderMiddle: '#eee',\n    colorBorderMiddleEnd: '#f0f0f0',\n    colorBorderInner: '#fafafa',\n    colorBorderInnerEnd: '#ccc',\n    colorValueBoxRect: '#888',\n    colorValueBoxRectEnd: '#666',\n    colorValueBoxBackground: '#babab2',\n    colorValueBoxShadow: 'rgba(0,0,0,1)',\n    colorNeedleShadowUp: 'rgba(2,255,255,0.2)',\n    colorNeedleShadowDown: 'rgba(188,143,143,0.45)',\n\n    fontNumbers: 'Arial',\n    fontTitle: 'Arial',\n    fontUnits: 'Arial',\n    fontValue: 'Arial',\n\n    fontNumbersSize: 20,\n    fontTitleSize: 24,\n    fontUnitsSize: 22,\n    fontValueSize: 40,\n\n    // needle\n    needle: true,\n    needleShadow: true,\n    needleType: 'arrow',\n    needleStart: 5,\n    needleEnd: 85,\n    needleWidth: 4,\n\n    // borders\n    borderOuterWidth: 3,\n    borderMiddleWidth: 3,\n    borderInnerWidth: 3,\n    borderShadowWidth: 3,\n\n    // value and highlights\n    valueBox: true,\n    valueBoxStroke: 5,\n    valueText: '',\n    valueTextShadow: true,\n    valueBoxBorderRadius: 2.5,\n    highlights: [\n        { from: 20, to: 60, color: '#eee' },\n        { from: 60, to: 80, color: '#ccc' },\n        { from: 80, to: 100, color: '#999' }]\n};\n\nexport default GenericOptions;\n\nmodule.exports = GenericOptions;\n"
  },
  {
    "__docId__": 72,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "RenderTarget",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~RenderTarget",
    "access": null,
    "description": "Describes rendering target element. Can be either string identifier of\nthe element or the element itself.",
    "type": {
      "types": [
        "HTMLElement",
        "string"
      ],
      "optional": false,
      "name": "RenderTarget"
    }
  },
  {
    "__docId__": 73,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Highlight",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~Highlight",
    "access": null,
    "description": "Highlight area definition.\nIt describes highlight area starting from value to value using\ncolor. Color can be describes with hex, rgb or rgba value.",
    "type": {
      "types": [
        "{ from: number, to: number, color: string}"
      ],
      "optional": false,
      "name": "Highlight"
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/GenericOptions.js",
    "longname": "lib/GenericOptions.js~GenericOptions",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/GenericOptions.js",
    "importStyle": "GenericOptions",
    "description": "Shared generic gauges options",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, animatedValue: boolean, animateOnInit: boolean, title: string|boolean, borders: boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorPlateEnd: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedle: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuter: string, colorBorderOuterEnd: string, colorBorderMiddle: string, colorBorderMiddleEnd: string, colorBorderInner: string, colorBorderInnerEnd: string, colorValueBoxRect: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, needle: boolean, needleShadow: boolean, needleType: string, needleStart: number, needleEnd: number, needleWidth: number, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueBoxStroke: number, valueText: string, valueTextShadow: boolean, valueBoxBorderRadius: number, highlights: Highlight[], fontNumbers: string, fontTitle: string, fontUnits: string, fontValue: string, fontTitleSize: number, fontValueSize: number, fontUnitsSize: number, fontNumbersSize: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/LinearGauge.js",
    "memberof": null,
    "longname": "lib/LinearGauge.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nrequire('./polyfill');\n\nconst BaseGauge = require('./BaseGauge');\nconst GenericOptions = require('./GenericOptions');\nconst drawings = require('./drawings');\nconst SmartCanvas = require('./SmartCanvas');\n\n/**\n * Linear gauge configuration options\n *\n * @typedef {GenericOptions|{borderRadius: number, barBeginCircle: number, barWidth: number, barStrokeWidth: number, barProgress: boolean, colorBar: string, colorBarEnd: string, colorBarStroke: string, colorBarProgress: string, colorBarProgressEnd: string, tickSide: string, needleSide: string, numberSide: string, ticksWidth: number, ticksWidthMinor: number, ticksPadding: number, barLength: number}} LinearGaugeOptions\n */\n\nconst round = Math.round;\nconst abs = Math.abs;\n\n/**\n * Default linear gauge configuration options\n *\n * @type {LinearGaugeOptions}\n */\nlet defaultLinearGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    borderRadius: 0,\n    // width: 150,\n    // height: 400,\n\n    // bar\n    barBeginCircle: 30, // percents\n    barWidth: 20, // percents\n    barStrokeWidth: 0, // pixels\n    barProgress: true,\n\n    colorBarStroke: '#222',\n    colorBar: '#ccc',\n    colorBarEnd: '',\n    colorBarProgress: '#888',\n    colorBarProgressEnd: '',\n\n    needleWidth: 6,\n\n    tickSide: 'both', // available: 'left', 'right', 'both'\n    needleSide: 'both', // available: 'left', 'right', 'both'\n\n    numberSide: 'both', // available: 'left', 'right', 'both'\n\n    ticksWidth: 10,\n    ticksWidthMinor: 5,\n    ticksPadding: 5,\n    barLength: 85,\n    fontTitleSize: 26\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rectangle on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {number} r radius for founded corner rectangle if 0 or less won't be drawn\n * @param {number} x x-coordinate of the top-left corner\n * @param {number} y y-coordinate of the top-left corner\n * @param {number} w width of the rectangle\n * @param {number} h height of the rectangle\n * @param {string} colorStart base fill color of the rectangle\n * @param {string} [colorEnd] gradient color of the rectangle\n */\nfunction drawRectangle(context, r, x, y, w, h, colorStart, colorEnd) {\n    context.beginPath();\n    context.fillStyle = colorEnd ?\n        drawings.linearGradient(context, colorStart, colorEnd,\n            w > h ? w: h, h > w, w > h ? x : y) : colorStart;\n\n    (r > 0)  ?\n        drawings.roundRect(context, x, y, w, h, r) :\n        context.rect(x, y, w, h);\n\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns linear gauge base bar dimensions.\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions|{barStrokeWidth: number, barBeginCircle: number, barWidth: number, hasLeft: boolean, hasRight: boolean}} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @return {{isVertical: boolean, width: number, length: number, barWidth: number, barLength: number, strokeWidth: number, barMargin: number, radius: number, x0: number, y0: number, barOffset: number, titleMargin: number, unitsMargin: number, X: number, Y: number, baseX: number, baseY: number, ticksPadding: number}}\n */\nfunction barDimensions(context, options, x, y, w, h) {\n    let pixelRatio = SmartCanvas.pixelRatio;\n    let isVertical = h >= w;\n    let width = isVertical ? w * .85 : h;\n    let length = isVertical ? h : w;\n\n    x = isVertical ? round(x + (w - width) / 2) : x;\n\n    let hasTitle = !!options.title;\n    let hasUnits = !!options.units;\n    let hasValue = !!options.valueBox;\n\n    let titleMargin;\n    let unitsMargin;\n    let valueMargin;\n\n    if (isVertical) {\n        unitsMargin = round(length * .05);\n        titleMargin = round(length * .075);\n        valueMargin = round(length * .075);\n\n        if (hasTitle) {\n            length -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) length -= unitsMargin;\n        if (hasValue) length -= valueMargin;\n    }\n\n    else {\n        unitsMargin = titleMargin = round(width * .15);\n\n        if (hasTitle) {\n            width -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) width -= unitsMargin;\n    }\n\n    let strokeWidth = options.barStrokeWidth * 2;\n    let radius = options.barBeginCircle ?\n        round(width * options.barBeginCircle / 200 - strokeWidth / 2) : 0;\n\n    let barWidth = round(width * options.barWidth / 100 - strokeWidth);\n    let barLength = round(length * options.barLength / 100 - strokeWidth);\n    let barMargin = round((length - barLength) / 2);\n\n    // coordinates for arc of the bar if configured\n    let x0 = round(x + (isVertical ? width / 2 : barMargin + radius));\n    let y0 = round(y + (isVertical ?\n        length - barMargin - radius + strokeWidth / 2:\n        width / 2));\n    let dx = isVertical && !(options.hasLeft && options.hasRight) ?\n        ((options.hasRight ? -1 : 1) * options.ticksWidth / 100 * width) : 0;\n    let dy = !isVertical && !(options.hasLeft && options.hasRight) ?\n        ((options.hasRight ? -1 : 1) * options.ticksWidth / 100 * width) : 0;\n\n    //noinspection JSUndefinedPropertyAssignment\n    context.barDimensions = {\n        isVertical: isVertical,\n        width: width,\n        length: length,\n        barWidth: barWidth,\n        barLength: barLength,\n        strokeWidth: strokeWidth,\n        barMargin: barMargin,\n        radius: radius,\n        pixelRatio: pixelRatio,\n        barOffset: null,\n        titleMargin: hasTitle ? titleMargin : 0,\n        unitsMargin: hasUnits ? unitsMargin : 0,\n        get ticksLength() {\n            return this.barLength - this.barOffset - this.strokeWidth;\n        },\n        X: x + dx,\n        Y: y + dy,\n        x0: x0 + dx,\n        y0: y0 + dy,\n        baseX: x,\n        baseY: y,\n        ticksPadding: options.ticksPadding / 100\n    };\n\n    return context.barDimensions;\n}\n\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws bar shape from the given options on a given canvas context\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {string} type\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearBarShape(context, options, type, x, y, w, h) {\n    let {isVertical, width, barWidth, barLength, strokeWidth, barMargin, radius,\n        x0, y0, X, Y} = barDimensions(context, options, x, y, w, h);\n    let fullBarLength = barLength;\n\n    context.save();\n    context.beginPath();\n\n    if (options.barBeginCircle) {\n        let direction = drawings.radians(isVertical ? 270 : 0);\n        let alpha = Math.asin(barWidth / 2 / radius);\n        let cosAlpha = Math.cos(alpha);\n        let sinAlpha = Math.sin(alpha);\n\n        let x1 = x0 + (isVertical ?\n            radius * sinAlpha :\n            radius * cosAlpha - strokeWidth / 2);\n        let y1 = isVertical ?\n            y0 - radius * cosAlpha:\n            y0 + radius * sinAlpha;\n        let cutRadius = isVertical ? abs(y1 - y0) : abs(x1 - x0);\n\n        context.barDimensions.barOffset = round(cutRadius + radius);\n\n        // bottom point\n        let x2 = isVertical ? round(x0 - radius * sinAlpha) : x1;\n        let y2 = isVertical ? y1 : round(y0 - radius * sinAlpha);\n\n        if (type === 'progress') {\n            barLength = context.barDimensions.barOffset +\n                (barLength - context.barDimensions.barOffset) *\n                (options.value - options.minValue) /\n                (options.maxValue - options.minValue);\n        }\n\n        // bar ends at\n        let x3 = round(x1 + barLength - context.barDimensions.barOffset +\n            strokeWidth / 2); // h\n        let y3 = round(y1 - barLength + context.barDimensions.barOffset -\n            strokeWidth / 2); // v\n\n        context.arc(x0, y0, radius, direction + alpha, direction - alpha);\n\n        if (isVertical) {\n            context.moveTo(x1, y2);\n            context.lineTo(x1, y3);\n            context.lineTo(x2, y3);\n            context.lineTo(x2, y2);\n        }\n\n        else {\n            context.moveTo(x1, y2);\n            context.lineTo(x3, y2);\n            context.lineTo(x3, y1);\n            context.lineTo(x1, y1);\n        }\n    }\n\n    else {\n        // simply rectangle\n        let rx = round(isVertical ?\n            (X +  (width - barWidth) / 2) : (X + barMargin));\n        let ry = round(isVertical ?\n            (Y + barLength + barMargin) : (Y +  (width - barWidth) / 2));\n\n        if (type === 'progress') {\n            barLength *= (options.value - options.minValue) /\n                (options.maxValue - options.minValue);\n        }\n\n        if (isVertical) context.rect(rx, ry, barWidth, -barLength);\n        else context.rect(rx, ry, barLength, barWidth);\n    }\n\n    if (type !== 'progress' && options.barStrokeWidth) {\n        context.lineWidth = strokeWidth;\n        context.strokeStyle = options.colorBarStroke;\n        //context.lineJoin = 'round';\n        context.stroke();\n    }\n\n    if (type !== 'progress' && options.colorBar) {\n        context.fillStyle = options.colorBarEnd ?\n            drawings.linearGradient(context, options.colorBar,\n                options.colorBarEnd, barLength, isVertical,\n                isVertical ? Y : X):\n            options.colorBar;\n        context.fill();\n    }\n\n    else if (type === 'progress' && options.colorBarProgress) {\n        context.fillStyle = options.colorBarProgressEnd ?\n            drawings.linearGradient(context, options.colorBarProgress,\n                options.colorBarProgressEnd, fullBarLength, isVertical,\n                isVertical ? Y : X):\n            options.colorBarProgress;\n        context.fill();\n    }\n\n    context.closePath();\n\n    // fix dimensions for further usage\n    if (options.barBeginCircle)\n        context.barDimensions.radius += strokeWidth;\n\n    context.barDimensions.barWidth += strokeWidth;\n    context.barDimensions.barLength += strokeWidth;\n}\n\n/**\n * Draws gauge bar\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBar(context, options, x, y, w, h) {\n    drawLinearBarShape(context, options, '', x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Helper function to calculate bar ticks presence on the sides\n *\n * @param {string} notWhich\n * @param {LinearGaugeOptions} options\n * @return {boolean}\n */\nfunction hasTicksBar(notWhich, options) {\n    return options.needleSide !== notWhich ||\n            options.tickSide !== notWhich ||\n            options.numberSide !== notWhich;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar progress\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBarProgress(context, options, x, y, w, h) {\n    options.barProgress &&\n    drawLinearBarShape(context, options, 'progress', x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar highlighted areas\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarHighlights(context, options) {\n    let {isVertical, width, length, barWidth, barOffset, barMargin,\n        X, Y, ticksLength, ticksPadding} = context.barDimensions;\n\n    if (!options.highlights) return ;\n\n    let hasLeft = options.tickSide !== 'right';\n    let hasRight = options.tickSide !== 'left';\n    let i = 0;\n    let s = options.highlights.length;\n    let tickOffset = (width - barWidth) / 2;\n    let interval = options.maxValue - options.minValue;\n    let eX = round(isVertical ? X + tickOffset : X + barMargin + barOffset);\n    let eH = (options.ticksWidth / 100 * width);\n    let eY = isVertical ? Y + length - barMargin - barOffset: Y + tickOffset;\n    let hLeft = round((options.ticksWidth / 100 + ticksPadding) * width);\n    let hRight = round(barWidth + ticksPadding * width);\n\n    context.save();\n\n    for (; i < s; i++) {\n        let entry = options.highlights[i];\n        let eStart = ticksLength * abs(entry.from) / interval;\n        let eW = ticksLength * abs((entry.to - entry.from) / interval);\n\n        context.beginPath();\n        context.fillStyle = entry.color;\n\n        if (isVertical) {\n            if (hasLeft)\n                context.rect(eX - hLeft, eY - eStart, eH, -eW);\n\n            if (hasRight)\n                context.rect(eX + hRight, eY - eStart, eH, -eW);\n        }\n\n        else {\n            if (hasLeft)\n                context.rect(eX + eStart, eY - hLeft, eW, eH);\n\n            if (hasRight)\n                context.rect(eX + eStart, eY + hRight, eW, eH);\n        }\n\n        context.fill();\n        context.closePath();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws a tick line on a linear gauge\n *\n * @param {Canvas2DContext} context\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */\nfunction drawLinearTick(context, x1, y1, x2, y2) {\n    context.beginPath();\n\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks\n *\n * @param {Canvas2DContext} context\n * @param {string} color\n * @param {number} ticksSize\n * @param {number} deltaLen\n * @param {boolean} hasLeft\n * @param {boolean} hasRight\n * @param {number} lineWidth\n * @param {number} lineLength\n */\nfunction drawLinearTicks(context,  color, ticksSize, deltaLen,\n                         hasLeft, hasRight, lineWidth, lineLength)\n{\n    let {isVertical, length, barWidth, barOffset, barMargin,\n        pixelRatio, width, X, Y, ticksLength, ticksPadding} =\n            context.barDimensions;\n    let tickOffset = (width - barWidth) / 2;\n    let tickX, tickY;\n    let i = 0;\n    let tickLen = lineLength * width;\n    let tickLeft = tickOffset - ticksPadding * width;\n    let tickRight = tickOffset + barWidth + tickLen + ticksPadding * width;\n    let tickSpace = ticksLength / (ticksSize - deltaLen);\n\n    context.lineWidth = lineWidth * pixelRatio;\n    context.strokeStyle = color;\n    context.save();\n\n    for (; i < ticksSize; i++) {\n        if (isVertical) {\n            tickY = Y + length - barMargin - barOffset - i * tickSpace;\n\n            if (hasLeft) {\n                tickX = X + tickLeft;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen),\n                    tickY);\n            }\n\n            if (hasRight) {\n                tickX = X + tickRight;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen),\n                    tickY);\n            }\n        }\n\n        else {\n            tickX = X + barMargin + barOffset + i * tickSpace;\n\n            if (hasLeft) {\n                tickY = Y + tickLeft;\n                drawLinearTick(context, tickX, tickY, tickX,\n                    round(tickY - tickLen));\n            }\n\n            if (hasRight) {\n                tickY = Y + tickRight;\n                drawLinearTick(context, tickX, round(tickY), tickX,\n                    tickY - tickLen);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Prepares major ticks data\n *\n * @access private\n * @param {LinearGaugeOptions} options\n * @return {[boolean, boolean]}\n */\nfunction prepareTicks(options) {\n    if (!options.majorTicks.length) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(\n            options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(\n            options.maxValue, options));\n    }\n\n    return [options.tickSide !== 'right', options.tickSide !== 'left'];\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicks(context, options) {\n    let [hasLeft, hasRight] = prepareTicks(options);\n    let lineWidth = 2;\n\n    drawLinearTicks(context, options.colorMajorTicks, options.majorTicks.length,\n        1, hasLeft, hasRight, lineWidth, options.ticksWidth / 100);\n\n    if (options.strokeTicks) {\n        let {isVertical, length, width, barWidth, barMargin, barOffset, X, Y,\n            ticksLength, pixelRatio, ticksPadding} = context.barDimensions;\n        let rightTicks = (width - barWidth) / 2 + barWidth +\n            ticksPadding * width;\n        let leftTicks = (width - barWidth) / 2 - ticksPadding * width;\n        let sX, sY, eX, eY;\n\n        lineWidth *= pixelRatio;\n\n        if (isVertical) {\n            sY = Y + length - barMargin - barOffset + lineWidth / 2;\n            eY = sY - ticksLength - lineWidth;\n\n            if (hasLeft) {\n                eX = sX = round(X + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eX = sX = round(X + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        }\n\n        else {\n            sX = X + barMargin + barOffset - lineWidth / 2;\n            eX = sX + ticksLength + lineWidth;\n\n            if (hasLeft) {\n                eY = sY = round(Y + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eY = sY = round(Y + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks stroke\n *\n * @param {Canvas2DContext} context\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n */\nfunction drawLinearTickStroke(context, sX, sY, eX, eY) {\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMinorTicks(context, options) {\n    let [hasLeft, hasRight] = prepareTicks(options);\n\n    drawLinearTicks(context, options.colorMajorTicks,\n        options.minorTicks * (options.majorTicks.length - 1), 0,\n        hasLeft, hasRight, 1, options.ticksWidthMinor / 100);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major tick numbers\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicksNumbers(context, options) {\n    let {isVertical, length, width, barWidth,\n        barMargin, barOffset, X, Y, ticksLength, ticksPadding} =\n            context.barDimensions;\n    let ticks = options.majorTicks.length;\n    let hasLeft = options.numberSide !== 'right';\n    let hasRight = options.numberSide !== 'left';\n    let textHeight = options.fontNumbersSize * width / 200;\n    let i = 0;\n    let ticksWidth = (options.ticksWidth / 100 + ticksPadding * 2) * width;\n    let numLeft = (width - barWidth) / 2 - ticksWidth;\n    let numRight = (width - barWidth) / 2 + barWidth + ticksWidth;\n    let textX, textY, textWidth, numberOffset, tick;\n\n    context.font = textHeight + 'px ' + options.fontNumbers;\n    context.fillStyle = options.colorNumbers;\n    context.lineWidth = 0;\n    context.textAlign = 'center';\n\n    for (; i < ticks; i++) {\n        tick = options.majorTicks[i];\n        numberOffset = i * ticksLength / (ticks - 1);\n\n        if (isVertical) {\n            textY = Y + length - barMargin - barOffset - numberOffset\n                + textHeight / 3;\n\n            if (hasLeft) {\n                context.textAlign = 'right';\n                context.fillText(tick, X + numLeft, textY);\n            }\n\n            if (hasRight) {\n                context.textAlign = 'left';\n                context.fillText(tick, X + numRight, textY);\n            }\n        }\n\n        else {\n            textWidth = context.measureText(tick).width;\n            textX = X + barMargin + barOffset + numberOffset;\n\n            if (hasLeft) {\n                context.fillText(tick, textX, Y + numLeft);\n            }\n\n            if (hasRight) {\n                context.fillText(tick, textX, Y + numRight + textHeight);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge title\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearTitle(context, options) {\n    if (!options.title) return ;\n\n    let {isVertical, width, length, baseX, baseY, titleMargin} =\n        context.barDimensions;\n    let textHeight = options.fontTitleSize * width / 200;\n    let textX = round(baseX + (isVertical ? width : length) / 2);\n    let textY = round(baseY + titleMargin / 2 -\n        (isVertical ? textHeight : textHeight / 2) -\n        .025 * (isVertical ? length : width));\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontTitle;\n    context.lineWidth = 0;\n    context.fillText(options.title, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge units\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearUnits(context, options) {\n    if (!options.units) return ;\n\n    let {isVertical, width, length, baseX, baseY, unitsMargin} =\n        context.barDimensions;\n    let textHeight = options.fontUnitsSize * width / 200;\n    let textX = round(baseX + (isVertical ? width : length) / 2);\n    let textY = round(baseY + (isVertical ? length : width) +\n        unitsMargin / 2 - textHeight / 2);\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontUnits;\n    context.lineWidth = 0;\n    context.fillText(options.units, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge needles\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarNeedle(context, options) {\n    if (!options.needle) return;\n\n    let {isVertical, width, length, barWidth, barOffset, barMargin,\n        ticksLength, X, Y, ticksPadding} = context.barDimensions;\n    let hasLeft = options.needleSide !== 'right';\n    let hasRight = options.needleSide !== 'left';\n    let position = ticksLength *\n        (options.value - options.minValue) /\n        (options.maxValue - options.minValue);\n    let tickWidth = (options.ticksWidth / 100 + ticksPadding) * width;\n    let baseLength = (barWidth / 2 + tickWidth);\n    let needleLength = baseLength * (options.needleEnd / 100);\n    let sX, eX, sY, eY;\n    let draw = options.needleType.toLowerCase() === 'arrow' ?\n        drawLinearArrowNeedle :\n        drawLinearLineNeedle;\n    let barStart = (width - barWidth) / 2;\n    let needleStart = baseLength * (options.needleStart / 100);\n    let nLeft = barStart - tickWidth - needleStart;\n    let nRight = barStart + barWidth + tickWidth + needleStart;\n\n    context.save();\n\n    drawings.drawNeedleShadow(context, options);\n\n    if (isVertical) {\n        sY = round(Y + length - barMargin - barOffset - position);\n\n        if (hasLeft) {\n            sX = round(X + nLeft);\n            eX = sX + needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength);\n        }\n\n        if (hasRight) {\n            sX = round(X + nRight);\n            eX = sX - needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength, true);\n        }\n    }\n\n    else {\n        sX = round(X + barMargin + barOffset + position);\n\n        if (hasLeft) {\n            sY = round(Y + nLeft);\n            eY = sY + needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength);\n        }\n\n        if (hasRight) {\n            sY = round(Y + nRight);\n            eY = sY - needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength, true);\n        }\n    }\n\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns needle color style\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} length\n * @param {boolean} [isRight]\n * @return {CanvasGradient|string}\n */\nfunction needleStyle(context, options, length, isRight) {\n    return options.colorNeedleEnd ?\n        drawings.linearGradient(context,\n            isRight ? options.colorNeedleEnd : options.colorNeedle,\n            isRight ? options.colorNeedle : options.colorNeedleEnd,\n            length,\n            !context.barDimensions.isVertical\n        ) : options.colorNeedle;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws line needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n * @param {boolean} [isRight]\n */\nfunction drawLinearLineNeedle(context, options, sX, sY, eX, eY, length, \n                              isRight)\n{\n    context.lineWidth = options.needleWidth;\n    context.strokeStyle = needleStyle(context, options, length, isRight);\n\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws arrow needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n * @param {boolean} [isRight]\n */\nfunction drawLinearArrowNeedle(context, options, sX, sY, eX, eY, length,\n                               isRight)\n{\n    let peakLength = round(length *.4);\n    let bodyLength = length - peakLength;\n    let isVertical = sX === eX;\n    let halfWidth = options.needleWidth / 2;\n\n    context.fillStyle = needleStyle(context, options, length, isRight);\n\n    context.beginPath();\n\n    if (isVertical) {\n        if (sY > eY) bodyLength *= -1;\n\n        context.moveTo(sX - halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY + bodyLength);\n        context.lineTo(sX, eY);\n        context.lineTo(sX - halfWidth, sY + bodyLength);\n        context.lineTo(sX - halfWidth, sY);\n    }\n\n    else {\n        if (sX > eX) bodyLength *= -1;\n\n        context.moveTo(sX, sY - halfWidth);\n        context.lineTo(sX, sY + halfWidth);\n        context.lineTo(sX + bodyLength, sY + halfWidth);\n        context.lineTo(eX, sY);\n        context.lineTo(sX + bodyLength, sY - halfWidth);\n        context.lineTo(sX, sY - halfWidth);\n    }\n\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws value box for linear gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} value\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearValueBox(context, options, value, x, y, w, h) {\n    // currently value box is available only for vertical linear gauge,\n    // as far as by design it is hard to find a proper place for\n    // horizontal ones\n    context.barDimensions.isVertical &&\n    drawings.drawValueBox(context, options, value, x + w / 2,\n        y + h - (40 * (w / 300)), w);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge plate\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearPlate(context, options, x, y, w, h) {\n    context.save();\n\n    let r = options.borderRadius;\n\n    let w1 = w - options.borderShadowWidth;\n    let w2 = w1 - options.borderOuterWidth * 2;\n    let w3 = w2 - options.borderMiddleWidth * 2;\n    let w4 = w3 - options.borderInnerWidth * 2;\n\n    let h1 = h - options.borderShadowWidth * 2;\n    let h2 = h1 - options.borderOuterWidth * 2;\n    let h3 = h2 - options.borderMiddleWidth * 2;\n    let h4 = h3 - options.borderInnerWidth * 2;\n\n    let x2 = x - (w2 - w1) / 2;\n    let x3 = x2 - (w3 - w2) / 2;\n    let x4 = x3 - (w4 - w3) / 2;\n\n    let y2 = y - (h2 - h1) / 2;\n    let y3 = y2 - (h3 - h2) / 2;\n    let y4 = y3 - (h4 - h3) / 2;\n\n    if (options.borderOuterWidth) {\n        drawRectangle(context, r, x, y, w1, h1,\n            options.colorBorderOuter, options.colorBorderOuterEnd);\n    }\n\n    if (options.borderMiddleWidth) {\n        drawRectangle(context, --r, x2, y2, w2, h2,\n            options.colorBorderMiddle, options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRectangle(context, --r, x3, y3, w3, h3,\n            options.colorBorderInner, options.colorBorderInnerEnd);\n    }\n\n    if (options.borderShadowWidth) {\n        context.shadowBlur = options.borderShadowWidth;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    drawRectangle(context, r, x4, y4, w4, h4, options.colorPlate,\n        options.colorPlateEnd);\n\n    context.restore();\n\n    return [x4, y4, w4, h4];\n}\n\n/**\n * Minimalistic HTML5 Canvas Linear Gauge\n */\nexport default class LinearGauge extends BaseGauge {\n\n    /**\n     * @constructor\n     * @param {LinearGaugeOptions} options\n     */\n    constructor(options) {\n        options = Object.assign({}, defaultLinearGaugeOptions, options || {});\n\n        /* istanbul ignore else */\n        if (options.barStrokeWidth >= options.barWidth) {\n            options.barStrokeWidth = round(options.barWidth / 2);\n        }\n\n        //noinspection JSUndefinedPropertyAssignment\n        options.hasLeft = hasTicksBar('right', options);\n        //noinspection JSUndefinedPropertyAssignment\n        options.hasRight = hasTicksBar('left', options);\n\n        super(options);\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Triggering linear gauge render on a canvas.\n     *\n     * @returns {LinearGauge}\n     */\n    draw() {\n        let canvas = this.canvas;\n        let [x, y, w, h] = [\n            -canvas.drawX,\n            -canvas.drawY,\n            canvas.drawWidth,\n            canvas.drawHeight\n        ];\n        let options = this.options;\n\n        if (!canvas.elementClone.initialized) {\n            let context = canvas.contextClone;\n\n            // clear the cache\n            context.clearRect(x, y, w, h);\n            context.save();\n\n            this.drawBox = drawLinearPlate(context, options, x, y, w, h);\n\n            drawLinearBar(context, options, ...this.drawBox);\n\n            canvas.context.barDimensions = context.barDimensions;\n\n            drawLinearBarHighlights(context, options);\n            drawLinearMinorTicks(context, options);\n            drawLinearMajorTicks(context, options);\n            drawLinearMajorTicksNumbers(context, options);\n            drawLinearTitle(context, options);\n            drawLinearUnits(context, options);\n\n            canvas.elementClone.initialized = true;\n        }\n\n        this.canvas.commit();\n\n        // clear the canvas\n        canvas.context.clearRect(x, y, w, h);\n        canvas.context.save();\n\n        canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n        canvas.context.save();\n\n        drawLinearBarProgress(canvas.context, options, ...this.drawBox);\n        drawLinearBarNeedle(canvas.context, options);\n        drawLinearValueBox(canvas.context, options, options.animatedValue ?\n                this.options.value : this.value, ...this.drawBox);\n\n        super.draw();\n\n        return this;\n    }\n}\n\n\n/**\n * @ignore\n * @typedef {object} ns\n */\n/* istanbul ignore if */\nif (typeof ns !== 'undefined') {\n    ns['LinearGauge'] = LinearGauge;\n}\n\nBaseGauge.initialize('LinearGauge', defaultLinearGaugeOptions);\n\nmodule.exports = LinearGauge;\n"
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~BaseGauge",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~GenericOptions",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawings",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~SmartCanvas",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "LinearGaugeOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~LinearGaugeOptions",
    "access": null,
    "description": "Linear gauge configuration options",
    "lineNumber": 40,
    "type": {
      "types": [
        "GenericOptions",
        "{borderRadius: number, barBeginCircle: number, barWidth: number, barStrokeWidth: number, barProgress: boolean, colorBar: string, colorBarEnd: string, colorBarStroke: string, colorBarProgress: string, colorBarProgressEnd: string, tickSide: string, needleSide: string, numberSide: string, ticksWidth: number, ticksWidthMinor: number, ticksPadding: number, barLength: number}"
      ],
      "optional": false,
      "name": "LinearGaugeOptions"
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "abs",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~abs",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultLinearGaugeOptions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~defaultLinearGaugeOptions",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Default linear gauge configuration options",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "LinearGaugeOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRectangle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawRectangle",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws rectangle on a canvas",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "radius for founded corner rectangle if 0 or less won't be drawn"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x-coordinate of the top-left corner"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y-coordinate of the top-left corner"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "width of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "height of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "colorStart",
        "description": "base fill color of the rectangle"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "colorEnd",
        "description": "gradient color of the rectangle"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "barDimensions",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~barDimensions",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Calculates and returns linear gauge base bar dimensions.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions",
          "{barStrokeWidth: number, barBeginCircle: number, barWidth: number, hasLeft: boolean, hasRight: boolean}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{isVertical: boolean, width: number, length: number, barWidth: number, barLength: number, strokeWidth: number, barMargin: number, radius: number, x0: number, y0: number, barOffset: number, titleMargin: number, unitsMargin: number, X: number, Y: number, baseX: number, baseY: number, ticksPadding: number}"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearBarShape",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearBarShape",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws bar shape from the given options on a given canvas context",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearBar",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearBar",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws gauge bar",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x-coordinate of the top-left corner of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y-coordinate of the top-left corner of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "width of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "height of the gauge"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "hasTicksBar",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~hasTicksBar",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Helper function to calculate bar ticks presence on the sides",
    "lineNumber": 352,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "notWhich",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearBarProgress",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearBarProgress",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws gauge bar progress",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x-coordinate of the top-left corner of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y-coordinate of the top-left corner of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "width of the gauge"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "height of the gauge"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearBarHighlights",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearBarHighlights",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws gauge bar highlighted areas",
    "lineNumber": 381,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearTick",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearTick",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws a tick line on a linear gauge",
    "lineNumber": 440,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearTicks",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearTicks",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws ticks",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ticksSize",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaLen",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hasLeft",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hasRight",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lineWidth",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lineLength",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "prepareTicks",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~prepareTicks",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Prepares major ticks data",
    "lineNumber": 525,
    "params": [
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[boolean, boolean]"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearMajorTicks",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearMajorTicks",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws major ticks",
    "lineNumber": 543,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearTickStroke",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearTickStroke",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws ticks stroke",
    "lineNumber": 602,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eY",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearMinorTicks",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearMinorTicks",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws minor ticks",
    "lineNumber": 617,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearMajorTicksNumbers",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearMajorTicksNumbers",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws major tick numbers",
    "lineNumber": 632,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearTitle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearTitle",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws linear gauge title",
    "lineNumber": 692,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearUnits",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearUnits",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws linear gauge units",
    "lineNumber": 718,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearBarNeedle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearBarNeedle",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws linear gauge needles",
    "lineNumber": 743,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "needleStyle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~needleStyle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Returns needle color style",
    "lineNumber": 815,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isRight",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CanvasGradient",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearLineNeedle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearLineNeedle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws line needle shape",
    "lineNumber": 839,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isRight",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearArrowNeedle",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearArrowNeedle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws arrow needle shape",
    "lineNumber": 866,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isRight",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearValueBox",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearValueBox",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws value box for linear gauge",
    "lineNumber": 917,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawLinearPlate",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~drawLinearPlate",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": null,
    "description": "Draws linear gauge plate",
    "lineNumber": 937,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LinearGauge",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~LinearGauge",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/LinearGauge.js",
    "importStyle": "LinearGauge",
    "description": "Minimalistic HTML5 Canvas Linear Gauge",
    "lineNumber": 991,
    "interface": false,
    "extends": [
      "BaseGauge"
    ]
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/LinearGauge.js~LinearGauge",
    "longname": "lib/LinearGauge.js~LinearGauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 997,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "LinearGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/LinearGauge.js~LinearGauge",
    "longname": "lib/LinearGauge.js~LinearGauge#draw",
    "access": null,
    "description": "Triggering linear gauge render on a canvas.",
    "lineNumber": 1019,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LinearGauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "LinearGauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawBox",
    "memberof": "lib/LinearGauge.js~LinearGauge",
    "longname": "lib/LinearGauge.js~LinearGauge#drawBox",
    "access": null,
    "description": null,
    "lineNumber": 1036,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/LinearGauge.js",
    "longname": "lib/LinearGauge.js~ns",
    "access": null,
    "description": "",
    "lineNumber": 1078,
    "ignore": true,
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/RadialGauge.js",
    "memberof": null,
    "longname": "lib/RadialGauge.js",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nrequire('./polyfill');\n\nconst GenericOptions = require('./GenericOptions');\nconst BaseGauge = require('./BaseGauge');\nconst SmartCanvas = require('./SmartCanvas');\nconst drawings = require('./drawings');\n\nconst PI = Math.PI;\nconst HPI = PI / 2;\n\n/**\n * Gauge configuration options\n *\n * @typedef {GenericOptions|{ticksAngle: number, startAngle: number, colorNeedleCircleOuter: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInner: string, colorNeedleCircleInnerEnd: string, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean, animationTarget: string}} RadialGaugeOptions\n */\n\n/**\n * Default gauge configuration options\n *\n * @access private\n * @type {RadialGaugeOptions}\n */\nconst defaultRadialGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    ticksAngle: 270,\n    startAngle: 45,\n\n    // colors\n    colorNeedleCircleOuter: '#f0f0f0',\n    colorNeedleCircleOuterEnd: '#ccc',\n    colorNeedleCircleInner: '#e8e8e8',\n    colorNeedleCircleInnerEnd: '#f5f5f5',\n\n    // needle\n    needleCircleSize: 10,\n    needleCircleInner: true,\n    needleCircleOuter: true,\n\n    // custom animations\n    animationTarget: 'needle' // 'needle' or 'plate'\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gradient-filled circle on a canvas\n *\n * @access private\n * @param {number} radius\n * @param {Canvas2DContext} context\n * @param {string} start gradient start color\n * @param {string} end gradient end color\n */\nfunction drawRadialCircle(radius, context, start, end) {\n    context.beginPath();\n    context.arc(0, 0, radius, 0, PI * 2, true);\n    context.fillStyle = drawings.linearGradient(context, start, end, radius);\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns max radius without borders for the gauge\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @return {number}\n */\nfunction maxRadialRadius(context, options) {\n    if (!context.maxRadius) {\n        context.maxRadius = context.max\n            - options.borderShadowWidth\n            - options.borderOuterWidth\n            - options.borderMiddleWidth\n            - options.borderInnerWidth;\n    }\n\n    return context.maxRadius;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge plate on the canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialPlate(context, options) {\n    let d0 = options.borderShadowWidth;\n    let r0 = context.max -  options.borderShadowWidth;\n    let r1 = r0 - options.borderOuterWidth;\n    let r2 = r1 - options.borderMiddleWidth;\n    let r3 = maxRadialRadius(context, options);\n    let grad;\n\n    context.save();\n\n    if (options.borderOuterWidth) {\n        drawRadialCircle(r0, context,\n            options.colorBorderOuter,\n            options.colorBorderOuterEnd);\n    }\n\n    if (options.borderMiddleWidth) {\n        drawRadialCircle(r1, context,\n            options.colorBorderMiddle,\n            options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRadialCircle(r2, context,\n            options.colorBorderInner,\n            options.colorBorderInnerEnd);\n    }\n\n    if (d0) {\n        context.shadowBlur = d0;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    context.beginPath();\n    context.arc(0, 0, r3, 0, PI * 2, true);\n\n    if (options.colorPlateEnd) {\n        grad = context.createRadialGradient(0, 0, r3 / 2, 0, 0, r3);\n        grad.addColorStop(0, options.colorPlate);\n        grad.addColorStop(1, options.colorPlateEnd);\n    }\n\n    else  {\n        grad = options.colorPlate;\n    }\n\n    context.fillStyle = grad;\n\n    context.fill();\n    context.closePath();\n\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge highlight areas on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialHighlights(context, options) {\n    context.save();\n\n    let r1 = radialTicksRadius(context, options);\n    let r2 = r1 - context.max * .15;\n    let i = 0, s = options.highlights.length;\n\n    for (; i < s; i++) {\n        let hlt = options.highlights[i];\n        let vd = (options.maxValue - options.minValue) / options.ticksAngle;\n        let sa = drawings.radians(options.startAngle +\n                (hlt.from - options.minValue) / vd);\n        let ea = drawings.radians(options.startAngle +\n            (hlt.to - options.minValue) / vd);\n        let ps = drawings.radialPoint(r2, sa);\n        let pe = drawings.radialPoint(r1, sa);\n        let ps1 = drawings.radialPoint(r1, ea);\n        let pe1 = drawings.radialPoint(r2, ea);\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r1, sa, ea, false);\n        context.restore();\n        context.save();\n        context.moveTo(ps.x, ps.y);\n        context.lineTo(pe.x, pe.y);\n        context.lineTo(ps1.x, ps1.y);\n        context.lineTo(pe1.x, pe1.y);\n        context.lineTo(ps.x, ps.y);\n        context.closePath();\n\n        context.fillStyle = hlt.color;\n        context.fill();\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r2, sa - 0.2, ea + 0.2, false);\n        context.restore();\n        context.closePath();\n\n        context.fillStyle = options.colorPlate;\n        context.fill();\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks bar on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMinorTicks(context, options) {\n    let radius = radialTicksRadius(context, options);\n\n    context.lineWidth = SmartCanvas.pixelRatio;\n    context.strokeStyle = options.colorMinorTicks;\n\n    context.save();\n\n    let s = options.minorTicks * (options.majorTicks.length - 1);\n    let i = 0;\n\n    for (; i < s; ++i) {\n        let angle = options.startAngle + i * (options.ticksAngle / s);\n\n        context.rotate(drawings.radians(angle));\n\n        context.beginPath();\n        context.moveTo(0, radius);\n        context.lineTo(0, radius - context.max * .075);\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns ticks radius\n *\n * @access private\n * @param context\n * @param options\n * @return {number}\n */\nfunction radialTicksRadius(context, options) {\n    return maxRadialRadius(context, options) - context.max * .05;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge major ticks bar on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMajorTicks(context, options) {\n    let r = radialTicksRadius(context, options);\n    let i;\n    let s = options.majorTicks.length;\n    let pixelRatio = SmartCanvas.pixelRatio;\n\n    context.lineWidth = 2 * pixelRatio;\n    context.strokeStyle = options.colorMajorTicks;\n    context.save();\n\n    if (s === 0) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(\n            options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(\n            options.maxValue, options));\n        s = 2;\n    }\n\n    i = 0;\n    for (; i < s; ++i) {\n        context.rotate(drawings.radians(radialNextAngle(options, i, s)));\n\n        context.beginPath();\n        context.moveTo(0, r);\n        context.lineTo(0, r - context.max * .15);\n        closeStrokedPath(context);\n    }\n\n    if (options.strokeTicks) {\n        context.rotate(HPI);\n\n        context.beginPath();\n        context.arc(0, 0, r,\n            drawings.radians(options.startAngle),\n            drawings.radians(options.startAngle + options.ticksAngle),\n            false\n        );\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\nfunction radialNextAngle(options, i, s) {\n    return options.startAngle + i * (options.ticksAngle / (s - 1));\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Strokes, closes path and restores previous context state\n *\n * @param {Canvas2DContext} context\n */\nfunction closeStrokedPath(context) {\n    context.stroke();\n    context.restore();\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar numbers\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNumbers(context, options) {\n    let radius = maxRadialRadius(context, options) - context.max * .35;\n    let points = {};\n    let i = 0;\n    let s = options.majorTicks.length;\n    let isAnimated = options.animationTarget !== 'needle';\n\n    let plateValueAngle = isAnimated ? -(options.value - options.minValue) /\n        (options.maxValue - options.minValue) * options.ticksAngle : 0;\n\n    if (isAnimated) {\n        context.save();\n        context.rotate(-drawings.radians(plateValueAngle));\n    }\n\n    for (; i < s; ++i) {\n        let angle = plateValueAngle + radialNextAngle(options, i, s);\n        let point = drawings.radialPoint(radius, drawings.radians(angle));\n\n        if (angle === 360) angle = 0;\n\n        if (points[angle]) {\n            continue; //already drawn at this place, skipping\n        }\n\n        points[angle] = true;\n\n        context.font = options.fontNumbersSize *\n            (context.max / 200) + 'px ' + options.fontNumbers;\n        context.fillStyle = options.colorNumbers;\n        context.lineWidth = 0;\n        context.textAlign = 'center';\n        context.fillText(options.majorTicks[i], point.x, point.y + 3);\n    }\n\n    isAnimated && context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge title\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialTitle(context, options) {\n    if (!options.title) return;\n\n    context.save();\n    context.font = options.fontTitleSize *\n        (context.max / 200) + 'px ' + options.fontTitle;\n    context.fillStyle = options.colorTitle;\n    context.textAlign = 'center';\n    context.fillText(options.title, 0, -context.max / 4.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws units name on the gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialUnits(context, options) {\n    if (!options.units) return;\n\n    context.save();\n    context.font = options.fontUnitsSize *\n        (context.max / 200) + 'px ' + options.fontUnits;\n    context.fillStyle = options.colorUnits;\n    context.textAlign = 'center';\n    context.fillText(options.units, 0, context.max / 3.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNeedle(context, options) {\n    if (!options.needle) return;\n\n    let value = options.value;\n    let max = maxRadialRadius(context, options);\n    let r1 = max / 100 * options.needleCircleSize;\n    let r2 = max / 100 * options.needleCircleSize * 0.75;\n    let rIn = max / 100 * options.needleEnd;\n    let rStart = options.needleStart ?\n            max / 100 * options.needleStart : 0,\n            rOut = max * .2;\n    let pad1 = max / 100 * options.needleWidth;\n    let pad2 = max / 100 * options.needleWidth / 2;\n    let pixelRatio = SmartCanvas.pixelRatio;\n    let isFixed = options.animationTarget !== 'needle';\n\n    context.save();\n\n    drawings.drawNeedleShadow(context, options);\n\n    context.rotate(drawings.radians(isFixed ? options.startAngle :\n        (options.startAngle + (value - options.minValue) /\n        (options.maxValue - options.minValue) * options.ticksAngle)));\n\n    context.fillStyle = drawings.linearGradient(\n        context,\n        options.colorNeedle,\n        options.colorNeedleEnd,\n        rIn - rOut);\n\n    if (options.needleType === 'arrow') {\n        context.beginPath();\n        context.moveTo(-pad2, -rOut);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(pixelRatio, rIn);\n        context.lineTo(pad1, 0);\n        context.lineTo(pad2, -rOut);\n        context.closePath();\n        context.fill();\n\n        context.beginPath();\n        context.lineTo(-0.5 * pixelRatio, rIn);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-pad2, -rOut);\n        context.lineTo(pad2 / 2 * pixelRatio - 2 * pixelRatio, -rOut);\n        context.closePath();\n        context.fillStyle = options.colorNeedleShadowUp;\n        context.fill();\n    }\n\n    else { // simple line needle\n        context.beginPath();\n        context.moveTo(-pad2, rIn);\n        context.lineTo(-pad2, rStart);\n        context.lineTo(pad2, rStart);\n        context.lineTo(pad2, rIn);\n        context.closePath();\n        context.fill();\n    }\n\n    if (options.needleCircleSize) {\n        drawings.drawNeedleShadow(context, options);\n\n        if (options.needleCircleOuter) {\n            context.beginPath();\n            context.arc(0, 0, r1, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(\n                context,\n                options.colorNeedleCircleOuter,\n                options.colorNeedleCircleOuterEnd,\n                r1\n            );\n            context.fill();\n            context.closePath();\n        }\n\n        if (options.needleCircleInner) {\n            context.beginPath();\n            context.arc(0, 0, r2, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(\n                context,\n                options.colorNeedleCircleInner,\n                options.colorNeedleCircleInnerEnd,\n                r2\n            );\n            context.fill();\n            context.closePath();\n        }\n\n        context.restore();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge value box\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @param {number} value\n */\nfunction drawRadialValueBox(context, options, value) {\n    drawings.drawValueBox(context, options, value, 0,\n        context.max - context.max * .33, context.max);\n}\n\n/**\n * Minimalistic HTML5 Canvas Gauge\n * @example\n *  var gauge = new RadialGauge({\n *     renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n *     width: 400,\n *     height: 400,\n *     units: 'Km/h',\n *     title: false,\n *     value: 0,\n *     minValue: 0,\n *     maxValue: 220,\n *     majorTicks: [\n *         '0','20','40','60','80','100','120','140','160','180','200','220'\n *     ],\n *     minorTicks: 2,\n *     strokeTicks: false,\n *     highlights: [\n *         { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n *         { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n *         { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n *         { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n *         { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n *     ],\n *     colorPlate: '#222',\n *     colorMajorTicks: '#f5f5f5',\n *     colorMinorTicks: '#ddd',\n *     colorTitle: '#fff',\n *     colorUnits: '#ccc',\n *     colorNumbers: '#eee',\n *     colorNeedleStart: 'rgba(240, 128, 128, 1)',\n *     colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n *     valueBox: true,\n *     animationRule: 'bounce'\n * });\n * // draw initially\n * gauge.draw();\n * // animate\n * setInterval(() => {\n *    gauge.value = Math.random() * -220 + 220;\n * }, 1000);\n */\nexport default class RadialGauge extends BaseGauge {\n\n    /**\n     * @constructor\n     * @param {RadialGaugeOptions} options\n     */\n    constructor(options) {\n        options = Object.assign({}, defaultRadialGaugeOptions, options || {});\n\n        /* istanbul ignore if */\n        if (isNaN(options.startAngle)) options.startAngle = 45;\n        /* istanbul ignore if */\n        if (isNaN(options.ticksAngle)) options.ticksAngle = 270;\n\n        /* istanbul ignore if */\n        if (options.ticksAngle > 360) options.ticksAngle = 360;\n        /* istanbul ignore if */\n        if (options.ticksAngle < 0) options.ticksAngle = 0;\n\n        /* istanbul ignore if */\n        if (options.startAngle < 0) options.startAngle = 0;\n        /* istanbul ignore if */\n        if (options.startAngle > 360) options.startAngle = 360;\n\n        super(options);\n    }\n\n    /*  */\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @returns {RadialGauge}\n     */\n    draw() {\n        let canvas = this.canvas;\n        let [x, y, w, h] = [\n            -canvas.drawX,\n            -canvas.drawY,\n            canvas.drawWidth,\n            canvas.drawHeight\n        ];\n        let options = this.options;\n\n        if (options.animationTarget === 'needle') {\n            if (!canvas.elementClone.initialized) {\n                let context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                drawRadialPlate(context, options);\n                drawRadialHighlights(context, options);\n                drawRadialMinorTicks(context, options);\n                drawRadialMajorTicks(context, options);\n                drawRadialNumbers(context, options);\n                drawRadialTitle(context, options);\n                drawRadialUnits(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            this.canvas.commit();\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n            canvas.context.save();\n\n            drawRadialValueBox(canvas.context, options, options.animatedValue ?\n                this.options.value : this.value);\n            drawRadialNeedle(canvas.context, options);\n        }\n\n        else {\n            let plateValueAngle = -drawings.radians((\n                (options.value - options.minValue) /\n                (options.maxValue - options.minValue) * options.ticksAngle));\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            drawRadialPlate(canvas.context, options);\n\n            canvas.context.rotate(plateValueAngle);\n\n            // animated\n            drawRadialHighlights(canvas.context, options);\n            drawRadialMinorTicks(canvas.context, options);\n            drawRadialMajorTicks(canvas.context, options);\n            drawRadialNumbers(canvas.context, options);\n\n            // non-animated\n            canvas.context.rotate(-plateValueAngle);\n            canvas.context.save();\n\n            if (!canvas.elementClone.initialized) {\n                let context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                drawRadialTitle(context, options);\n                drawRadialUnits(context, options);\n                drawRadialNeedle(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n        }\n\n        // value box animations\n        drawRadialValueBox(canvas.context, options, options.animatedValue ?\n            this.options.value : this.value);\n\n        super.draw();\n\n        return this;\n    }\n}\n\n\n/**\n * @ignore\n * @typedef {object} ns\n */\n/* istanbul ignore if */\nif (typeof ns !== 'undefined') {\n    ns['RadialGauge'] = RadialGauge;\n}\n\nBaseGauge.initialize('RadialGauge', defaultRadialGaugeOptions);\n\nmodule.exports = RadialGauge;\n"
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GenericOptions",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~GenericOptions",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "BaseGauge",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~BaseGauge",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~SmartCanvas",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawings",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PI",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~PI",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HPI",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~HPI",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "RadialGaugeOptions",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~RadialGaugeOptions",
    "access": null,
    "description": "Gauge configuration options",
    "type": {
      "types": [
        "GenericOptions",
        "{ticksAngle: number, startAngle: number, colorNeedleCircleOuter: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInner: string, colorNeedleCircleInnerEnd: string, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean, animationTarget: string}"
      ],
      "optional": false,
      "name": "RadialGaugeOptions"
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultRadialGaugeOptions",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~defaultRadialGaugeOptions",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Default gauge configuration options",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "RadialGaugeOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialCircle",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialCircle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gradient-filled circle on a canvas",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "gradient start color"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "gradient end color"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "maxRadialRadius",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~maxRadialRadius",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Returns max radius without borders for the gauge",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialPlate",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialPlate",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge plate on the canvas",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialHighlights",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialHighlights",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge highlight areas on a canvas",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialMinorTicks",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialMinorTicks",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws minor ticks bar on a canvas",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "radialTicksRadius",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~radialTicksRadius",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Returns ticks radius",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialMajorTicks",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialMajorTicks",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge major ticks bar on a canvas",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "radialNextAngle",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~radialNextAngle",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeStrokedPath",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~closeStrokedPath",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Strokes, closes path and restores previous context state",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialNumbers",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialNumbers",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge bar numbers",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialTitle",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialTitle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge title",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialUnits",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialUnits",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws units name on the gauge",
    "lineNumber": 407,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialNeedle",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialNeedle",
    "access": "private",
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge needle",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawRadialValueBox",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~drawRadialValueBox",
    "access": null,
    "export": false,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": null,
    "description": "Draws gauge value box",
    "lineNumber": 530,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RadialGauge",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~RadialGauge",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/RadialGauge.js",
    "importStyle": "RadialGauge",
    "description": "Minimalistic HTML5 Canvas Gauge",
    "examples": [
      " var gauge = new RadialGauge({\n    renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n    width: 400,\n    height: 400,\n    units: 'Km/h',\n    title: false,\n    value: 0,\n    minValue: 0,\n    maxValue: 220,\n    majorTicks: [\n        '0','20','40','60','80','100','120','140','160','180','200','220'\n    ],\n    minorTicks: 2,\n    strokeTicks: false,\n    highlights: [\n        { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n        { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n        { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n        { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n        { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n    ],\n    colorPlate: '#222',\n    colorMajorTicks: '#f5f5f5',\n    colorMinorTicks: '#ddd',\n    colorTitle: '#fff',\n    colorUnits: '#ccc',\n    colorNumbers: '#eee',\n    colorNeedleStart: 'rgba(240, 128, 128, 1)',\n    colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n    valueBox: true,\n    animationRule: 'bounce'\n});\n// draw initially\ngauge.draw();\n// animate\nsetInterval(() => {\n   gauge.value = Math.random() * -220 + 220;\n}, 1000);"
    ],
    "lineNumber": 577,
    "interface": false,
    "extends": [
      "BaseGauge"
    ]
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/RadialGauge.js~RadialGauge",
    "longname": "lib/RadialGauge.js~RadialGauge#constructor",
    "access": null,
    "description": "",
    "lineNumber": 583,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "lib/RadialGauge.js~RadialGauge",
    "longname": "lib/RadialGauge.js~RadialGauge#draw",
    "access": null,
    "description": "Triggering gauge render on a canvas.",
    "lineNumber": 610,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RadialGauge}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "RadialGauge"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/RadialGauge.js",
    "longname": "lib/RadialGauge.js~ns",
    "access": null,
    "description": "",
    "lineNumber": 709,
    "ignore": true,
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/SmartCanvas.js",
    "memberof": null,
    "longname": "lib/SmartCanvas.js",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ignore\n * @typedef {object} ns\n */\n\n/**\n * Drawings on canvas using hidden canvas as a cache for better\n * performance drawings during canvas animations. SmartCanvas also\n * adopts a canvas to\n */\nexport default class SmartCanvas {\n\n    /**\n     * @constructor\n     * @param {HTMLCanvasElement} canvas\n     * @param {number} [width]\n     * @param {number} [height]\n     */\n    constructor(canvas, width, height) {\n        SmartCanvas.collection.push(this);\n\n        /**\n         * Canvas base width\n         *\n         * @type {number}\n         */\n        this.width = width || 0;\n\n        /**\n         * Canvas base height\n         *\n         * @type {number}\n         */\n        this.height = height || 0;\n\n        /**\n         * Target drawings canvas element\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.element = canvas;\n\n        this.init();\n    }\n\n    /**\n     * Initializes canvases and contexts\n     */\n    init() {\n        let pixelRatio = SmartCanvas.pixelRatio;\n\n        this.element.width = this.width * pixelRatio;\n        this.element.height = this.height * pixelRatio;\n\n        this.element.style.width = this.width + 'px';\n        this.element.style.height = this.height + 'px';\n\n        /**\n         * Canvas caching element\n         *\n         * @type {HTMLCanvasElement|Node}\n         */\n        this.elementClone = this.element.cloneNode(true);\n\n        //noinspection JSUnresolvedVariable\n        /**\n         * Target drawings canvas element 2D context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.context = this.element.getContext('2d');\n\n        /**\n         * Canvas caching element 2D context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.contextClone = this.elementClone.getContext('2d');\n\n        /**\n         * Actual drawings width\n         *\n         * @type {number}\n         */\n        this.drawWidth = this.element.width;\n\n        /**\n         * Actual drawings height\n         *\n         * @type {number}\n         */\n        this.drawHeight = this.element.height;\n\n        /**\n         * X-coordinate of drawings zero point\n         *\n         * @type {number}\n         */\n        this.drawX = this.drawWidth / 2;\n\n        /**\n         * Y-coordinate of drawings zero point\n         *\n         * @type {number}\n         */\n        this.drawY = this.drawHeight / 2;\n\n        /**\n         * Minimal side length in pixels of the drawing\n         *\n         * @type {number}\n         */\n        this.minSide = this.drawX < this.drawY ? this.drawX : this.drawY;\n\n        this.elementClone.initialized = false;\n\n        this.contextClone.translate(this.drawX, this.drawY);\n        this.contextClone.save();\n\n        this.context.translate(this.drawX, this.drawY);\n        this.context.save();\n\n        this.context.max = this.contextClone.max = this.minSide;\n        this.context.maxRadius = this.contextClone.maxRadius = null;\n    }\n\n    /**\n     * Destroys this object, removing the references from memory\n     */\n    destroy() {\n        let index = SmartCanvas.collection.indexOf(this);\n\n        /* istanbul ignore else */\n        if (~index) {\n            SmartCanvas.collection.splice(index, 1);\n        }\n\n        this.context.clearRect(\n            -this.drawX,\n            -this.drawY,\n            this.drawWidth,\n            this.drawHeight\n        );\n\n        // dereference all created elements\n        this.context.max = null;\n        delete this.context.max;\n\n        this.context.maxRadius = null;\n        delete this.context.maxRadius;\n\n        this.context = null;\n        this.contextClone = null;\n        this.elementClone = null;\n        this.element = null;\n\n        /**\n         * On canvas redraw event callback\n         *\n         * @type {function|null|undefined}\n         */\n        this.onRedraw = null;\n    }\n\n    /**\n     * Commits the drawings\n     */\n    commit() {\n        let scale = SmartCanvas.pixelRatio;\n\n        if (scale !== 1) {\n            this.contextClone.scale(scale, scale);\n            this.contextClone.save();\n        }\n\n        return this;\n    }\n\n    /**\n     * Redraw this object\n     */\n    redraw() {\n        this.init();\n\n        /**\n         * On canvas redraw event callback\n         *\n         * @type {function(): *}\n         */\n        this.onRedraw && this.onRedraw();\n\n        return this;\n    }\n\n    /**\n     * Returns current device pixel ratio\n     *\n     * @returns {number}\n     */\n    static get pixelRatio() {\n        /* istanbul ignore next */\n        //noinspection JSUnresolvedVariable\n        return ns.devicePixelRatio || 1;\n    }\n\n    /**\n     * Forces redraw all canvas in the current collection\n     */\n    static redraw() {\n        let i = 0;\n        let s = SmartCanvas.collection.length;\n\n        for (; i < s; i++) {\n            SmartCanvas.collection[i].redraw();\n        }\n    }\n}\n\nSmartCanvas.collection = [];\n\n/* istanbul ignore next: very browser-specific testing required to cover */\n//noinspection JSUnresolvedVariable\nif (ns.matchMedia) {\n    //noinspection JSUnresolvedFunction\n    ns.matchMedia('screen and (min-resolution: 2dppx)')\n        .addListener(SmartCanvas.redraw);\n}\n\nmodule.exports = SmartCanvas;\n"
  },
  {
    "__docId__": 138,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ns",
    "memberof": "lib/SmartCanvas.js",
    "longname": "lib/SmartCanvas.js~ns",
    "access": null,
    "description": "",
    "ignore": true,
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ns"
    }
  },
  {
    "__docId__": 139,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SmartCanvas",
    "memberof": "lib/SmartCanvas.js",
    "longname": "lib/SmartCanvas.js~SmartCanvas",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/SmartCanvas.js",
    "importStyle": "SmartCanvas",
    "description": "Drawings on canvas using hidden canvas as a cache for better\nperformance drawings during canvas animations. SmartCanvas also\nadopts a canvas to",
    "lineNumber": 38,
    "interface": false
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#constructor",
    "access": null,
    "description": "",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "height",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#width",
    "access": null,
    "description": "Canvas base width",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#height",
    "access": null,
    "description": "Canvas base height",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#element",
    "access": null,
    "description": "Target drawings canvas element",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#init",
    "access": null,
    "description": "Initializes canvases and contexts",
    "lineNumber": 76,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "elementClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#elementClone",
    "access": null,
    "description": "Canvas caching element",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement",
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#context",
    "access": null,
    "description": "Target drawings canvas element 2D context",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contextClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#contextClone",
    "access": null,
    "description": "Canvas caching element 2D context",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawWidth",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawWidth",
    "access": null,
    "description": "Actual drawings width",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawHeight",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawHeight",
    "access": null,
    "description": "Actual drawings height",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawX",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawX",
    "access": null,
    "description": "X-coordinate of drawings zero point",
    "lineNumber": 126,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "drawY",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#drawY",
    "access": null,
    "description": "Y-coordinate of drawings zero point",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minSide",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#minSide",
    "access": null,
    "description": "Minimal side length in pixels of the drawing",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#destroy",
    "access": null,
    "description": "Destroys this object, removing the references from memory",
    "lineNumber": 157,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#context",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contextClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#contextClone",
    "access": null,
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "elementClone",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#elementClone",
    "access": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#element",
    "access": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onRedraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#onRedraw",
    "access": null,
    "description": "On canvas redraw event callback",
    "lineNumber": 189,
    "type": {
      "nullable": null,
      "types": [
        "function",
        "null",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "commit",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#commit",
    "access": null,
    "description": "Commits the drawings",
    "lineNumber": 195,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "redraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#redraw",
    "access": null,
    "description": "Redraw this object",
    "lineNumber": 209,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onRedraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas#onRedraw",
    "access": null,
    "description": "On canvas redraw event callback",
    "lineNumber": 217,
    "type": {
      "nullable": null,
      "types": [
        "function(): *"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "pixelRatio",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas.pixelRatio",
    "access": null,
    "description": "Returns current device pixel ratio",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "redraw",
    "memberof": "lib/SmartCanvas.js~SmartCanvas",
    "longname": "lib/SmartCanvas.js~SmartCanvas.redraw",
    "access": null,
    "description": "Forces redraw all canvas in the current collection",
    "lineNumber": 236,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/drawings.js",
    "memberof": null,
    "longname": "lib/drawings.js",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @access private\n * @typedef {CanvasRenderingContext2D|{max: number, maxRadius: number, barDimensions: object}} Canvas2DContext\n */\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rounded corners rectangle\n *\n * @param {Canvas2DContext} context\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @param {number} r\n */\nexport function roundRect(context, x, y, w, h, r) {\n    context.beginPath();\n\n    context.moveTo(x + r, y);\n    context.lineTo(x + w - r, y);\n\n    context.quadraticCurveTo(x + w, y, x + w, y + r);\n    context.lineTo(x + w, y + h - r);\n\n    context.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    context.lineTo(x + r, y + h);\n\n    context.quadraticCurveTo(x, y + h, x, y + h - r);\n    context.lineTo(x, y + r);\n\n    context.quadraticCurveTo(x, y, x + r, y);\n\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Pads a given value with leading zeros using the given options\n *\n * @param {number} val\n * @param {RadialGaugeOptions|{valueInt: number, valueDec: number}} options\n * @returns {string}\n */\nexport function padValue(val, options) {\n    let dec = options.valueDec;\n    let int = options.valueInt;\n    let i = 0;\n    let s, strVal, n;\n\n    val = parseFloat(val);\n    n = (val < 0);\n    val = Math.abs(val);\n\n    if (dec > 0) {\n        strVal = val.toFixed(dec).toString().split('.');\n        s = int - strVal[0].length;\n\n        for (; i < s; ++i) {\n            strVal[0] = '0' + strVal[0];\n        }\n\n        strVal = (n ? '-' : '') + strVal[0] + '.' + strVal[1];\n    }\n\n    else {\n        strVal = Math.round(val).toString();\n        s = int - strVal.length;\n\n        for (; i < s; ++i) {\n            strVal = '0' + strVal;\n        }\n\n        strVal = (n ? '-' : '') + strVal;\n    }\n\n    return strVal;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Formats a number for display on the dial's plate using the majorTicksFormat\n * config option.\n *\n * @param {number} num number to format\n * @param {object} options\n * @returns {string} formatted number\n */\nexport function formatMajorTickNumber(num, options) {\n    let right, hasDec = false;\n\n    // First, force the correct number of digits right of the decimal.\n    if (options.majorTicksDec === 0) {\n        right = Math.round(num).toString();\n    }\n\n    else {\n        right = num.toFixed(options.majorTicksDec);\n    }\n\n    // Second, force the correct number of digits left of the decimal.\n    if (options.majorTicksInt > 1) {\n        // Does this number have a decimal?\n        hasDec = ~right.indexOf('.');\n\n        // Is this number a negative number?\n        if (~right.indexOf('-')) {\n            return '-' + [\n                    options.majorTicksInt +\n                    options.majorTicksDec +\n                    2 + (hasDec ? 1 : 0) - right.length\n                ].join('0') + right.replace('-', '');\n        }\n\n        else {\n            return [\n                    options.majorTicksInt +\n                    options.majorTicksDec +\n                    1 + (hasDec ? 1 : 0) - right.length\n                ].join('0') + right;\n        }\n    }\n\n    return right;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Transforms degrees to radians\n *\n * @param {number} degrees\n * @returns {number}\n */\nexport function radians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns radial point coordinates\n *\n * @param {number} radius\n * @param {number} angle\n * @returns {{x: number, y: number}}\n */\nexport function radialPoint(radius, angle) {\n    return { x: -radius * Math.sin(angle), y: radius * Math.cos(angle) };\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Creates and returns linear gradient canvas object\n *\n * @param {Canvas2DContext} context\n * @param {string} colorFrom\n * @param {string} colorTo\n * @param {number} length\n * @param {boolean} [isVertical]\n * @param {number} [from]\n * @returns {CanvasGradient}\n */\nexport function linearGradient(context, colorFrom, colorTo, length,\n                               isVertical = true, from = 0)\n{\n    let grad = context.createLinearGradient(\n        isVertical ? 0 : from,\n        isVertical ? from : 0,\n        isVertical ? 0 : length,\n        isVertical ? length : 0);\n\n    grad.addColorStop(0, colorFrom);\n    grad.addColorStop(1, colorTo);\n\n    return grad;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle shadow\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nexport function drawNeedleShadow(context, options) {\n    if (!options.needleShadow) return;\n\n    context.shadowOffsetX = 2;\n    context.shadowOffsetY = 2;\n    context.shadowBlur = 10;\n    context.shadowColor = options.colorNeedleShadowDown;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws value box at given position\n *\n * @param {Canvas2DContext} context\n * @param {GenericOptions} options\n * @param {number|string} value\n * @param {number} x\n * @param {number} y\n * @param {number} max\n */\nexport function drawValueBox(context, options, value, x, y, max) {\n    if (!options.valueBox) return;\n\n    let text = options.valueText || padValue(value, options);\n\n    context.shadowOffsetX = null;\n    context.shadowOffsetY = null;\n    context.shadowBlur = null;\n    context.shadowColor = '';\n    context.strokeStyle = null;\n    context.lineWidth = 0;\n    context.save();\n\n    context.font = options.fontValueSize * (max / 200) + 'px ' +\n        options.fontValue;\n    context.save();\n    context.beginPath();\n\n    let th = 0.12 * max;\n    let tw = context.measureText(options.valueText ?\n        text : ('-' + padValue(0, options))).width;\n    let bx = -tw / 2 - 0.025 * max;\n    let by = y - th - 0.04 * max;\n    let bw = tw + 0.05 * max;\n    let bh = th + 0.07 * max;\n    let br = max * options.valueBoxBorderRadius / 100;\n\n    if (br) roundRect(context, bx, by, bw, bh, br);\n    else  context.rect(bx, by, bw, bh);\n\n    let gy = y - 0.12 * max - 0.025 * max + (0.12 * max + 0.045 * max) / 2;\n\n    if (options.valueBoxStroke) {\n        let grd = context.createRadialGradient(x, gy, max / 10, x, gy, max / 5);\n\n        grd.addColorStop(0, options.colorValueBoxRect);\n        grd.addColorStop(1, options.colorValueBoxRectEnd);\n\n        context.strokeStyle = grd;\n        context.lineWidth = max * options.valueBoxStroke / 100;\n        context.stroke();\n    }\n\n    if (options.colorValueBoxShadow) {\n        context.shadowBlur = 0.012 * max;\n        context.shadowColor = options.colorValueBoxShadow;\n    }\n\n    if (options.colorValueBoxBackground) {\n        context.fillStyle = options.colorValueBoxBackground;\n        context.fill();\n    }\n\n    context.closePath();\n    context.restore();\n\n    if (options.valueTextShadow) {\n        context.shadowOffsetX = 0.004 * max;\n        context.shadowOffsetY = 0.004 * max;\n        context.shadowBlur = 0.012 * max;\n        context.shadowColor = options.colorValueTextShadow;\n    }\n\n    context.fillStyle = options.colorValueText;\n    context.textAlign = 'center';\n    context.fillText(text, -x, y);\n    context.restore();\n}\n\nconst drawings = {\n    roundRect: roundRect,\n    padValue: padValue,\n    formatMajorTickNumber: formatMajorTickNumber,\n    radians: radians,\n    radialPoint: radialPoint,\n    linearGradient: linearGradient,\n    drawNeedleShadow: drawNeedleShadow,\n    drawValueBox: drawValueBox\n};\n\nexport default drawings;\n\nmodule.exports = drawings;\n"
  },
  {
    "__docId__": 165,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Canvas2DContext",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~Canvas2DContext",
    "access": "private",
    "description": "",
    "type": {
      "types": [
        "CanvasRenderingContext2D",
        "{max: number, maxRadius: number, barDimensions: object}"
      ],
      "optional": false,
      "name": "Canvas2DContext"
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "roundRect",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~roundRect",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{roundRect}",
    "description": "Draws rounded corners rectangle",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "padValue",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~padValue",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{padValue}",
    "description": "Pads a given value with leading zeros using the given options",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions",
          "{valueInt: number, valueDec: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "formatMajorTickNumber",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~formatMajorTickNumber",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{formatMajorTickNumber}",
    "description": "Formats a number for display on the dial's plate using the majorTicksFormat\nconfig option.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} formatted number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "number to format"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "formatted number"
    },
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "radians",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~radians",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{radians}",
    "description": "Transforms degrees to radians",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "radialPoint",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~radialPoint",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{radialPoint}",
    "description": "Calculates and returns radial point coordinates",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{x: number, y: number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x: number, y: number}"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "linearGradient",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~linearGradient",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{linearGradient}",
    "description": "Creates and returns linear gradient canvas object",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CanvasGradient}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "colorFrom",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "colorTo",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isVertical",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "from",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CanvasGradient"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawNeedleShadow",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~drawNeedleShadow",
    "access": "private",
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{drawNeedleShadow}",
    "description": "Draws gauge needle shadow",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RadialGaugeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "drawValueBox",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~drawValueBox",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "{drawValueBox}",
    "description": "Draws value box at given position",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas2DContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "GenericOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "drawings",
    "memberof": "lib/drawings.js",
    "longname": "lib/drawings.js~drawings",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/drawings.js",
    "importStyle": "drawings",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/polyfill.js",
    "memberof": null,
    "longname": "lib/polyfill.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @external {Object.assign} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n/* istanbul ignore next */\nif (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function(target, firstSource) {\n            'use strict';\n\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert first argument to object');\n            }\n\n            var to = Object(target);\n            var i = 1;\n\n            for (; i < arguments.length; i++) {\n                var nextSource = arguments[i];\n\n                if (nextSource === undefined || nextSource === null) {\n                    continue;\n                }\n\n                var keysArray = Object.keys(Object(nextSource));\n                var nextIndex = 0, len = keysArray.length;\n\n                for (; nextIndex < len; nextIndex++) {\n                    var nextKey = keysArray[nextIndex];\n                    var desc = Object.getOwnPropertyDescriptor(\n                        nextSource, nextKey);\n\n                    if (desc !== undefined && desc.enumerable) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n\n            return to;\n        }\n    });\n}\n\n/**\n * @external {Array.indexOf} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\n/* istanbul ignore next */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(searchElement, fromIndex) {\n        var k;\n\n        if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var O = Object(this);\n        var len = O.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n\n        var n = +fromIndex || 0;\n\n        if (Math.abs(n) === Infinity) {\n            n = 0;\n        }\n\n        if (n >= len) {\n            return -1;\n        }\n\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        while (k < len) {\n            if (k in O && O[k] === searchElement) {\n                return k;\n            }\n\n            k++;\n        }\n\n        return -1;\n    };\n}\n"
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object.assign",
    "externalLink": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
    "memberof": "lib/polyfill.js",
    "longname": "lib/polyfill.js~Object.assign",
    "access": null,
    "description": "",
    "lineNumber": 5
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array.indexOf",
    "externalLink": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
    "memberof": "lib/polyfill.js",
    "longname": "lib/polyfill.js~Array.indexOf",
    "access": null,
    "description": "",
    "lineNumber": 50
  },
  {
    "__docId__": 178,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/vendorize.js",
    "memberof": null,
    "longname": "lib/vendorize.js",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "content": "/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Look-ups for a proper vendor-specific property and returns its value\n *\n * @example\n * var requestAnimationFrame = vendorize('requestAnimationFrame');\n * // it will refer properly to:\n * //  - window.requestAnimationFrame by default or to\n * //  - window.webkitRequestAnimationFrame or to\n * //  - window.mozRequestAnimationFrame or to\n * //  - window.msRequestAnimationFrame or to\n * //  - window.oRequestAnimationFrame\n * // depending on the current browser vendor\n *\n * @author Mykhailo Stadnyk <mikhus@gmail.com>\n * @param {string} prop\n * @param {HTMLElement|Window|object} [from] - default is window\n * @returns {*}\n */\nexport default function vendorize(prop, from) {\n    /* istanbul ignore else: no reason to cover */\n    if (!from) {\n        from = typeof window === 'undefined' ? global : window;\n    }\n\n    if (typeof from[prop] !== 'undefined') {\n        return from[prop];\n    }\n\n    let vendors = ['webkit', 'moz', 'ms', 'o'];\n    let i = 0;\n    let s = vendors.length;\n    let capitalized = prop.charAt(0).toUpperCase() + prop.substr(1);\n\n    for (; i < s; i++) {\n        let vendorProp = from[vendors[i] + capitalized];\n\n        /* istanbul ignore if: requires very complex environment to test (specific browser version) */\n        if (typeof vendorProp !== 'undefined') {\n            return vendorProp;\n        }\n    }\n\n    return null;\n}\n\nmodule.exports = vendorize;\n"
  },
  {
    "__docId__": 179,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "vendorize",
    "memberof": "lib/vendorize.js",
    "longname": "lib/vendorize.js~vendorize",
    "access": null,
    "export": true,
    "importPath": "canvas-gauges/lib/vendorize.js",
    "importStyle": "vendorize",
    "description": "Look-ups for a proper vendor-specific property and returns its value",
    "examples": [
      "var requestAnimationFrame = vendorize('requestAnimationFrame');\n// it will refer properly to:\n//  - window.requestAnimationFrame by default or to\n//  - window.webkitRequestAnimationFrame or to\n//  - window.mozRequestAnimationFrame or to\n//  - window.msRequestAnimationFrame or to\n//  - window.oRequestAnimationFrame\n// depending on the current browser vendor"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Mykhailo Stadnyk <mikhus@gmail.com>"
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "Window",
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "from",
        "description": "default is window"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]