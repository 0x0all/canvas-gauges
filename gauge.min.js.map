{"version":3,"sources":["gauge.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","vendorize","prop","window","global","vendors","s","capitalized","charAt","toUpperCase","substr","vendorProp","step","time","draw","start","rule","duration","end","anim","progress","percent","frame","requestAnimationFrame","Collection","apply","this","arguments","roundRect","context","x","y","w","h","r","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","padValue","val","options","dec","valueDec","int","valueInt","strVal","n","parseFloat","Math","abs","toFixed","toString","split","round","formatMajorTickNumber","num","right","hasDec","majorTicksDec","majorTicksInt","indexOf","join","replace","radians","degrees","PI","radialPoint","radius","angle","sin","cos","linearGradient","colorFrom","colorTo","grad","createLinearGradient","addColorStop","drawNeedleShadow","needleShadow","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","colorNeedleShadowDown","drawRadialCircle","arc","fillStyle","drawings","fill","maxRadialRadius","maxRadius","max","borderShadowWidth","borderOuterWidth","borderMiddleWidth","borderInnerWidth","drawRadialPlate","d0","r0","r1","r2","r3","save","glow","colorBorderShadow","colorBorderOuterStart","colorBorderOuterEnd","colorBorderMiddleStart","colorBorderMiddleEnd","colorBorderInnerStart","colorBorderInnerEnd","restore","colorPlate","drawRadialHighlights","radialTicksRadius","highlights","hlt","vd","maxValue","minValue","ticksAngle","sa","startAngle","ea","to","ps","pe","ps1","pe1","rotate","HPI","color","drawRadialMinorTicks","lineWidth","SmartCanvas","pixelRatio","strokeStyle","colorMinorTicks","minorTicks","majorTicks","closeStrokedPath","drawRadialMajorTicks","colorMajorTicks","push","radialNextAngle","strokeTicks","stroke","drawRadialNumbers","points","point","font","fontNumbers","colorNumbers","textAlign","fillText","drawRadialTitle","title","fontTitle","colorTitle","drawRadialUnits","units","fontUnits","colorUnits","drawRadialNeedle","needle","needleCircleSize","rIn","needleEnd","rStart","needleStart","rOut","pad1","needleWidth","pad2","colorNeedleStart","colorNeedleEnd","needleType","colorNeedleShadowUp","needleCircleOuter","colorNeedleCircleOuterStart","colorNeedleCircleOuterEnd","needleCircleInner","colorNeedleCircleInnerStart","colorNeedleCircleInnerEnd","drawRadialValueBox","valueText","text","fontValue","valueBox","th","tw","measureText","width","gy","grd","createRadialGradient","colorValueBoxRectStart","colorValueBoxRectEnd","colorValueBoxShadow","colorValueBoxBackground","colorValueTextShadow","colorValueText","drawRectangle","colorStart","colorEnd","rect","barDimensions","isVertical","hasTitle","hasUnits","titleMargin","unitsMargin","strokeWidth","barStrokeWidth","barBeginCircle","barWidth","barLength","barMargin","x0","y0","barOffset","ticksLength","X","Y","drawLinearBarShape","barOpWidth","strokeColor","circleRadius","toValue","_barDimensions","direction","alpha","asin","cosAlpha","sinAlpha","x1","y1","cutRadius","x2","y2","x3","y3","rx","ry","drawLinearBar","colorBarStroke","colorBar","colorBarEnd","drawLinearBarProgress","barProgress","colorBarProgress","colorBarProgressEnd","drawLinearBarHighlights","_context$barDimension","hasLeft","tickSide","hasRight","tickOffset","interval","eX","eH","eY","hLeft","hRight","entry","eW","drawLinearTick","drawLinearTicks","ticksSize","deltaLen","lineLength","_context$barDimension2","tickX","tickY","tickLen","tickLeft","tickRight","tickSpace","prepareTicks","drawLinearMajorTicks","_prepareTicks","_prepareTicks2","_slicedToArray","_context$barDimension3","rightTicks","leftTicks","sX","sY","drawLinearTickStroke","drawLinearMinorTicks","_prepareTicks3","_prepareTicks4","drawLinearMajorTicksNumbers","_context$barDimension4","ticks","numberSide","textHeight","numLeft","numRight","textX","textY","textWidth","numberOffset","tick","drawLinearTitle","_context$barDimension5","drawLinearUnits","_context$barDimension6","drawLinearBarNeedle","_context$barDimension7","needleSide","position","tickWidth","baseLength","needleLength","toLowerCase","drawLinearArrowNeedle","drawLinearLineNeedle","barStart","nLeft","nRight","needleStyle","peakLength","bodyLength","halfWidth","drawLinearValueBox","drawLinearPlate","borderRadius","w1","w2","w3","w4","h1","h2","h3","h4","x4","y4","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","err","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","assign","firstSource","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","searchElement","fromIndex","k","O","Infinity","callback","setTimeout","Date","getTime","rules","linear","p","quad","pow","dequad","quint","dequint","cycle","acos","decycle","bounce","debounce","a","b","elastic","delastic","Animation","_this","performance","now","cancelAnimationFrame","id","DomObserver","element","Type","type","toDashed","domReady","traverse","bind","mutationsObserved","node","tagName","getAttribute","elements","document","getElementsByTagName","process","MutationObserver","observe","body","childList","subtree","attributes","characterData","attributeOldValue","characterDataOldValue","records","record","attributeName","isValidNode","oldValue","addedNodes","ii","ss","JSON","parse","stringify","hasOwnProperty","toAttributeName","attributeValue","renderTo","test","e","camelCase","str","handler","addEventListener","attachEvent","canvas","height","collection","init","style","elementClone","cloneNode","getContext","contextClone","drawWidth","drawHeight","drawX","drawY","minSide","initialized","translate","index","splice","onRedraw","scale","redraw","get","devicePixelRatio","matchMedia","addListener","GenericOptions","updateValueOnAnimation","borders","animation","animationDuration","animationRule","getElementById","gauges","BaseGauge","className","name","destroy","set","_this2","fromValue","_value","animate","defaultRadialGaugeOptions","RadialGauge","_BaseGauge","isNaN","getPrototypeOf","clearRect","commit","drawImage","initialize","defaultLinearGaugeOptions","LinearGauge","_BaseGauge2","orientation","drawBox","concat"],"mappings":"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","file":"gauge.min.js","sourcesContent":["(function() {'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @external {Object.assign} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n/* istanbul ignore next */\nif (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function value(target, firstSource) {\n            'use strict';\n\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert first argument to object');\n            }\n\n            var to = Object(target);\n            var i = 1;\n\n            for (; i < arguments.length; i++) {\n                var nextSource = arguments[i];\n\n                if (nextSource === undefined || nextSource === null) {\n                    continue;\n                }\n\n                var keysArray = Object.keys(Object(nextSource));\n                var nextIndex = 0,\n                    len = keysArray.length;\n\n                for (; nextIndex < len; nextIndex++) {\n                    var nextKey = keysArray[nextIndex];\n                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n                    if (desc !== undefined && desc.enumerable) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n\n            return to;\n        }\n    });\n}\n\n/**\n * @external {Array.indexOf} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\n/* istanbul ignore next */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement, fromIndex) {\n        var k;\n\n        if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var O = Object(this);\n        var len = O.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n\n        var n = +fromIndex || 0;\n\n        if (Math.abs(n) === Infinity) {\n            n = 0;\n        }\n\n        if (n >= len) {\n            return -1;\n        }\n\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        while (k < len) {\n            if (k in O && O[k] === searchElement) {\n                return k;\n            }\n\n            k++;\n        }\n\n        return -1;\n    };\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Look-ups for a proper vendor-specific property and returns its value\n *\n * @example\n * var requestAnimationFrame = vendorize('requestAnimationFrame');\n * // it will refer properly to:\n * //  - window.requestAnimationFrame by default or to\n * //  - window.webkitRequestAnimationFrame or to\n * //  - window.mozRequestAnimationFrame or to\n * //  - window.msRequestAnimationFrame or to\n * //  - window.oRequestAnimationFrame\n * // depending on the current browser vendor\n *\n * @author Mykhailo Stadnyk <mikhus@gmail.com>\n * @param {string} prop\n * @param {HTMLElement|Window|object} [from] - default is window\n * @returns {*}\n */\nfunction vendorize(prop, from) {\n    /* istanbul ignore else: no reason to cover */\n    if (!from) {\n        from = typeof window === 'undefined' ? global : window;\n    }\n\n    if (typeof from[prop] !== 'undefined') {\n        return from[prop];\n    }\n\n    var vendors = ['webkit', 'moz', 'ms', 'o'];\n    var i = 0;\n    var s = vendors.length;\n    var capitalized = prop.charAt(0).toUpperCase() + prop.substr(1);\n\n    for (; i < s; i++) {\n        var vendorProp = from[vendors[i] + capitalized];\n\n        /* istanbul ignore if: requires very complex environment to test (specific browser version) */\n        if (typeof vendorProp !== 'undefined') {\n            return vendorProp;\n        }\n    }\n\n    return null;\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* istanbul ignore next */\n/**\n * @type {function(callback: function(time: number): number, element?: HTMLElement)}\n * @access private\n */\nvar requestAnimationFrame = vendorize('requestAnimationFrame') || function (callback) {\n    return setTimeout(function () {\n        return callback(new Date().getTime());\n    }, 1000 / 60);\n};\n\n/**\n * Generic AnimationRule function interface\n *\n * @typedef {function(percent: number): number} AnimationRule\n */\n\n/**\n * Callback for animation step draw event.\n * It will be called each time animation step is executed, bypassing\n * as first argument a percent of animation completeness. It is expected\n * that this callback will do an actual work of animating an elements or\n * whatever, as far as animation engine is just calculating and executing\n * animation steps without any knowledge about things under animation.\n *\n * @typedef {function(percent: number): *} DrawEventCallback\n */\n\n/**\n * Callback for animation complete event.\n * It is called once each animation is complete.\n *\n * @typedef {function(): *} EndEventCallback\n */\n\n/**\n * Predefined known animation rules.\n * It's a simple collection of math for some most used animations.\n *\n * @typedef {{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}} AnimationRules\n */\n\n/* istanbul ignore next: no reason covering this */\nvar rules = {\n    linear: function linear(p) {\n        return p;\n    },\n    quad: function quad(p) {\n        return Math.pow(p, 2);\n    },\n    dequad: function dequad(p) {\n        return 1 - rules.quad(1 - p);\n    },\n    quint: function quint(p) {\n        return Math.pow(p, 5);\n    },\n    dequint: function dequint(p) {\n        return 1 - Math.pow(1 - p, 5);\n    },\n    cycle: function cycle(p) {\n        return 1 - Math.sin(Math.acos(p));\n    },\n    decycle: function decycle(p) {\n        return Math.sin(Math.acos(1 - p));\n    },\n    bounce: function bounce(p) {\n        return 1 - rules.debounce(1 - p);\n    },\n    debounce: function debounce(p) {\n        var a = 0,\n            b = 1;\n        for (; 1; a += b, b /= 2) {\n            if (p >= (7 - 4 * a) / 11) {\n                return -Math.pow((11 - 6 * a - 11 * p) / 4, 2) + Math.pow(b, 2);\n            }\n        }\n    },\n    elastic: function elastic(p) {\n        return 1 - rules.delastic(1 - p);\n    },\n    delastic: function delastic(p) {\n        var x = 1.5;\n        return Math.pow(2, 10 * (p - 1)) * Math.cos(20 * Math.PI * x / 3 * p);\n    }\n};\n\n/* istanbul ignore next: private, not testable */\n/**\n * Evaluates animation step and decides if the next step required or\n * stops animation calling a proper events.\n *\n * @access private\n * @param {number} time\n * @param {DrawEventCallback} draw\n * @param {number} start\n * @param {AnimationRule} rule\n * @param {number} duration\n * @param {EndEventCallback} end\n * @param {Animation} anim\n */\nfunction step(time, draw, start, rule, duration, end, anim) {\n    if (typeof rule !== 'function') {\n        throw new TypeError('Invalid animation rule:', rule);\n    }\n\n    var progress = time - start;\n    var percent = progress / duration;\n\n    if (percent > 1) {\n        percent = 1;\n    }\n\n    draw && draw(percent === 1 ? percent : rule(percent));\n\n    if (progress < duration) {\n        anim.frame = requestAnimationFrame(function (time) {\n            return step(time, draw, start, rule, duration, end, anim);\n        });\n    } else {\n        end && end();\n    }\n}\n\n/**\n * Animation engine API for JavaScript-based animations.\n * This is simply an animation core framework which simplifies creation\n * of various animations for generic purposes.\n *\n * @example\n * // create 'linear' animation engine, 500ms duration\n * let linear = new Animation('linear', 500);\n *\n * // create 'elastic' animation engine\n * let elastic = new Animation('elastic');\n *\n * // define animation behavior\n * let bounced = new Animation('bounce', 500, percent => {\n *     let value = parseInt(percent * 100, 10);\n *\n *     $('div.bounced').css({\n *         width: value + '%',\n *         height: value + '%'\n *     });\n * });\n *\n * // execute animation\n * bounced.animate();\n *\n * // execute animation and handle when its finished\n * bounced.animate(null, () => {\n *    console.log('Animation finished!');\n * });\n */\n\nvar Animation = function () {\n\n    /**\n     * @constructor\n     * @param {string|AnimationRule} rule\n     * @param {number} duration\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    function Animation() {\n        var rule = arguments.length <= 0 || arguments[0] === undefined ? 'linear' : arguments[0];\n        var duration = arguments.length <= 1 || arguments[1] === undefined ? 250 : arguments[1];\n        var draw = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];\n        var end = arguments.length <= 3 || arguments[3] === undefined ? function () {} : arguments[3];\n\n        _classCallCheck(this, Animation);\n\n        /**\n         * Overall animation duration in milliseconds.\n         * By default is equal to 250 ms.\n         *\n         * @type {number}\n         */\n        this.duration = duration;\n\n        /**\n         * Animation rule. By default is linear animation.\n         * Animation rule is a subject to animation rules, which are\n         * a simple object containing math-based methods for calculating\n         * animation steps.\n         *\n         * @type {string|AnimationRule}\n         */\n        this.rule = rule;\n\n        /**\n         * Callback function for the animation step draw event.\n         *\n         * @type {DrawEventCallback}\n         */\n        this.draw = draw;\n\n        /**\n         * Callback for the animation complete event.\n         *\n         * @type {EndEventCallback}\n         */\n        this.end = end;\n\n        if (typeof this.draw !== 'function') {\n            throw new TypeError('Invalid animation draw callback:', draw);\n        }\n\n        if (typeof this.end !== 'function') {\n            throw new TypeError('Invalid animation end callback:', end);\n        }\n    }\n\n    /* istanbul ignore next: non-testable */\n    /**\n     * Performs animation calling each animation step draw callback and\n     * end callback at the end of animation. Callbacks are optional to this\n     * method call. If them are not bypassed will be used that ones which\n     * was pre-set on constructing an Animation object or pre-set after\n     * construction.\n     *\n     * @example\n     * function draw(percent) {\n     *     $('.my-animated-divs').css({\n     *         width: parseInt(percent * 100, 10) + '%'\n     *     });\n     * }\n     * function done() {\n     *     console.log('Animation complete!');\n     * }\n     *\n     * // Define 'draw' and 'end' callbacks on construction\n     * var animation = new Animation('cycle', 500, draw, done);\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks after construction\n     * var animation = new Animation('cycle', 500);\n     * animation.draw = draw;\n     * animation.end = done;\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks at animation\n     * var animation = new Animation('cycle', 500);\n     * animation.animate(draw, done);\n     *\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n\n\n    _createClass(Animation, [{\n        key: 'animate',\n        value: function animate(draw, end) {\n            var _this = this;\n\n            //noinspection JSUnresolvedVariable\n            var start = vendorize('animationStartTime') || window.performance && window.performance.now ? window.performance.now() : Date.now();\n\n            draw = draw || this.draw;\n            end = end || this.end;\n\n            /**\n             * Current requested animation frame identifier\n             *\n             * @type {number}\n             */\n            this.frame = requestAnimationFrame(function (time) {\n                return step(time, draw, start, rules[_this.rule] || _this.rule, _this.duration, end, _this);\n            });\n        }\n\n        /**\n         * Destroys this object properly\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            if (this.frame) {\n                var cancelAnimationFrame = vendorize('cancelAnimationFrame') ||\n                /* istanbul ignore next */\n                function (id) {};\n\n                cancelAnimationFrame(this.frame);\n                this.frame = null;\n            }\n\n            this.draw = null;\n            this.end = null;\n        }\n    }]);\n\n    return Animation;\n}();\n\n/**\n * Animation rules bound statically to Animation constructor.\n *\n * @type {AnimationRules}\n * @static\n */\n\n\nAnimation.rules = rules;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * @typedef {{ constructor: function(options: object): GaugeInterface, draw: function(): GaugeInterface }} GaugeInterface\n */\n/**\n * @typedef {{parse: function, stringify: function}} JSON\n * @external {JSON} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON\n */\n\n/**\n * DOM Observer.\n * It will observe DOM document for a configured element types and\n * instantiate associated Types for an existing or newly added DOM elements\n *\n * @example\n * class ProgressBar {\n *     constructor(options) {}\n *     draw() {}\n * }\n *\n * // It will observe DOM document for elements <div>\n * // having attribute 'data-type=\"progress\"'\n * // and instantiate for each new instance of ProgressBar\n *\n * new DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n *\n * // assume we could have HTML like this\n * // <div data-type=\"progress\" color=\"blue\"></div>\n * // in this case all matching attributes names for a given options will be\n * // parsed and bypassed to an instance from HTML attributes\n */\n\nvar DomObserver = function () {\n\n    /**\n     * @constructor\n     * @param {object} options\n     * @param {string} element\n     * @param {string} Type\n     */\n    function DomObserver(options, element, Type) {\n        _classCallCheck(this, DomObserver);\n\n        //noinspection JSUnresolvedVariable\n        /**\n         * Default instantiation options for the given Type\n         *\n         * @type {Object}\n         */\n        this.options = options;\n\n        /**\n         * Name of an element to lookup/observe\n         *\n         * @type {string}\n         */\n        this.element = element.toLowerCase();\n\n        /**\n         * data-type attribute value to lookup\n         *\n         * @type {string}\n         */\n        this.type = DomObserver.toDashed(Type);\n\n        /**\n         * Actual type constructor to instantiate for each found element\n         *\n         * @type {Function}\n         */\n        this.Type = window[Type];\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        DomObserver.domReady(this.traverse.bind(this));\n\n        /**\n         * Signals if mutations observer for this type or not\n         *\n         * @type {boolean}\n         */\n        this.mutationsObserved = false;\n    }\n\n    /**\n     * Checks if given node is valid node to process\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {boolean}\n     */\n\n\n    _createClass(DomObserver, [{\n        key: 'isValidNode',\n        value: function isValidNode(node) {\n            return !!(node.tagName && node.tagName.toLowerCase() === this.element && node.getAttribute('data-type') === this.type);\n        }\n\n        /**\n         * Traverse entire current DOM tree and process matching nodes.\n         * Usually it should be called only once on document initialization.\n         */\n\n    }, {\n        key: 'traverse',\n        value: function traverse() {\n            var elements = document.getElementsByTagName(this.element);\n            var i = 0,\n                s = elements.length;\n\n            /* istanbul ignore next: this should be tested with end-to-end tests */\n            for (; i < s; i++) {\n                this.process(elements[i]);\n            }\n\n            if (window.MutationObserver && !this.mutationsObserved) {\n                //noinspection JSCheckFunctionSignatures\n                new MutationObserver(this.observe.bind(this)).observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    characterData: true,\n                    attributeOldValue: true,\n                    characterDataOldValue: true\n                });\n\n                this.mutationsObserved = true;\n            }\n        }\n\n        /**\n         * Observes given mutation records for an elements to process\n         *\n         * @param {MutationRecord[]} records\n         */\n\n    }, {\n        key: 'observe',\n        value: function observe(records) {\n            var i = 0;\n            var s = records.length;\n\n            /* istanbul ignore next: this should be tested with end-to-end tests */\n            for (; i < s; i++) {\n                var record = records[i];\n\n                if (record.type === 'attributes' && record.attributeName === 'data-type' && this.isValidNode(record.target) && record.oldValue !== this.type) // skip false-positive mutations\n                    {\n                        this.process(record.target);\n                    } else if (record.addedNodes && record.addedNodes.length) {\n                    var ii = 0;\n                    var ss = record.addedNodes.length;\n\n                    for (; ii < ss; ii++) {\n                        this.process(record.addedNodes[ii]);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Parses given attribute value to a proper JavaScript value.\n         * For example it will parse some stringified value to a proper type\n         * value, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}\n         *\n         * @param {*} value\n         * @return {*}\n         */\n\n    }, {\n        key: 'process',\n\n\n        /**\n         * Processes a given node, instantiating a proper type constructor for it\n         *\n         * @param {Node|HTMLElement} node\n         * @returns {GaugeInterface|null}\n         */\n        value: function process(node) {\n            if (!this.isValidNode(node)) return null;\n\n            var prop = void 0;\n            var options = JSON.parse(JSON.stringify(this.options));\n\n            for (prop in options) {\n                /* istanbul ignore else: non-testable in most cases */\n                if (options.hasOwnProperty(prop)) {\n                    var attributeName = DomObserver.toAttributeName(prop);\n                    var attributeValue = DomObserver.parse(node.getAttribute(attributeName));\n\n                    if (attributeValue !== null && attributeValue !== undefined) {\n                        options[prop] = attributeValue;\n                    }\n                }\n            }\n\n            options.renderTo = node;\n\n            return new this.Type(options).draw();\n        }\n\n        /**\n         * Transforms camelCase string to dashed string\n         *\n         * @static\n         * @param {string} camelCase\n         * @return {string}\n         */\n\n    }], [{\n        key: 'parse',\n        value: function parse(value) {\n            // parse boolean\n            if (value === 'true') return true;\n            if (value === 'false') return false;\n\n            // parse undefined\n            if (value === 'undefined') return undefined;\n\n            // parse null\n            if (value === 'null') return null;\n\n            // Comma-separated strings to array parsing.\n            // It won't match strings which contains non alphanumeric characters to\n            // prevent strings like 'rgba(0,0,0,0)' or JSON-like from being parsed.\n            // Typically it simply allows easily declare arrays as comma-separated\n            // numbers or plain strings. If something more complicated is\n            // required it can be declared using JSON format syntax\n            if (/^[\\w\\d\\s]+(?:,[\\w\\d\\s]+)+$/.test(value)) {\n                return value.split(',');\n            }\n\n            // parse JSON\n            try {\n                return JSON.parse(value);\n            } catch (e) {}\n\n            // plain value - no need to parse\n            return value;\n        }\n    }, {\n        key: 'toDashed',\n        value: function toDashed(camelCase) {\n            var arr = camelCase.split(/(?=[A-Z])/);\n            var i = 1;\n            var s = arr.length;\n            var str = arr[0].toLowerCase();\n\n            for (; i < s; i++) {\n                str += '-' + arr[i].toLowerCase();\n            }\n\n            return str;\n        }\n\n        /**\n         * Transforms camel case property name to dash separated attribute name\n         *\n         * @static\n         * @param {string} str\n         * @returns {string}\n         */\n\n    }, {\n        key: 'toAttributeName',\n        value: function toAttributeName(str) {\n            return 'data-' + DomObserver.toDashed(str);\n        }\n\n        /**\n         * Cross-browser DOM ready handler\n         *\n         * @static\n         * @param {Function} handler\n         */\n\n    }, {\n        key: 'domReady',\n        value: function domReady(handler) {\n            if (window.addEventListener) {\n                window.addEventListener('DOMContentLoaded', handler, false);\n            } else {\n                window.attachEvent('onload', handler);\n            }\n        }\n    }]);\n\n    return DomObserver;\n}();\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Drawings on canvas using hidden canvas as a cache for better\n * performance drawings during canvas animations. SmartCanvas also\n * adopts a canvas to\n */\n\n\nvar SmartCanvas = function () {\n\n    /**\n     * @constructor\n     * @param {HTMLCanvasElement} canvas\n     * @param {number} width\n     * @param {number} height\n     */\n    function SmartCanvas(canvas, width, height) {\n        _classCallCheck(this, SmartCanvas);\n\n        SmartCanvas.collection.push(this);\n\n        /**\n         * Canvas base width\n         *\n         * @type {number}\n         */\n        this.width = width || 0;\n\n        /**\n         * Canvas base height\n         *\n         * @type {number}\n         */\n        this.height = height || 0;\n\n        /**\n         * Target drawings canvas element\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.element = canvas;\n\n        this.init();\n    }\n\n    /**\n     * Initializes canvases and contexts\n     */\n\n\n    _createClass(SmartCanvas, [{\n        key: 'init',\n        value: function init() {\n            var pixelRatio = SmartCanvas.pixelRatio;\n\n            this.element.width = this.width * pixelRatio;\n            this.element.height = this.height * pixelRatio;\n\n            this.element.style.width = this.width + 'px';\n            this.element.style.height = this.height + 'px';\n\n            /**\n             * Canvas caching element\n             *\n             * @type {HTMLCanvasElement|Node}\n             */\n            this.elementClone = this.element.cloneNode(true);\n\n            //noinspection JSUnresolvedVariable\n            /**\n             * Target drawings canvas element 2D context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n            this.context = this.element.getContext('2d');\n\n            /**\n             * Canvas caching element 2D context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n            this.contextClone = this.elementClone.getContext('2d');\n\n            /**\n             * Actual drawings width\n             *\n             * @type {number}\n             */\n            this.drawWidth = this.element.width;\n\n            /**\n             * Actual drawings height\n             *\n             * @type {number}\n             */\n            this.drawHeight = this.element.height;\n\n            /**\n             * X-coordinate of drawings zero point\n             *\n             * @type {number}\n             */\n            this.drawX = this.drawWidth / 2;\n\n            /**\n             * Y-coordinate of drawings zero point\n             *\n             * @type {number}\n             */\n            this.drawY = this.drawHeight / 2;\n\n            /**\n             * Minimal side length in pixels of the drawing\n             *\n             * @type {number}\n             */\n            this.minSide = this.drawX < this.drawY ? this.drawX : this.drawY;\n\n            this.elementClone.initialized = false;\n\n            this.contextClone.translate(this.drawX, this.drawY);\n            this.contextClone.save();\n\n            this.context.translate(this.drawX, this.drawY);\n            this.context.save();\n\n            this.context.max = this.contextClone.max = this.minSide;\n            this.context.maxRadius = this.contextClone.maxRadius = null;\n        }\n\n        /**\n         * Destroys this object, removing the references from memory\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var index = SmartCanvas.collection.indexOf(this);\n\n            /* istanbul ignore else */\n            if (~index) {\n                SmartCanvas.collection.splice(index, 1);\n            }\n\n            // dereference all created elements\n            this.context.max = null;\n            delete this.context.max;\n\n            this.context.maxRadius = null;\n            delete this.context.maxRadius;\n\n            this.context = null;\n            this.contextClone = null;\n            this.elementClone = null;\n            this.element = null;\n\n            /**\n             * On canvas redraw event callback\n             *\n             * @type {function|null|undefined}\n             */\n            this.onRedraw = null;\n        }\n\n        /**\n         * Commits the drawings\n         */\n\n    }, {\n        key: 'commit',\n        value: function commit() {\n            var scale = SmartCanvas.pixelRatio;\n\n            if (scale !== 1) {\n                this.contextClone.scale(scale, scale);\n                this.contextClone.save();\n            }\n\n            return this;\n        }\n\n        /**\n         * Redraw this object\n         */\n\n    }, {\n        key: 'redraw',\n        value: function redraw() {\n            this.init();\n\n            /**\n             * On canvas redraw event callback\n             *\n             * @type {function(): *}\n             */\n            this.onRedraw && this.onRedraw();\n\n            return this;\n        }\n\n        /**\n         * Returns current device pixel ratio\n         *\n         * @returns {number}\n         */\n\n    }], [{\n        key: 'redraw',\n\n\n        /**\n         * Forces redraw all canvas in the current collection\n         */\n        value: function redraw() {\n            var i = 0;\n            var s = SmartCanvas.collection.length;\n\n            for (; i < s; i++) {\n                SmartCanvas.collection[i].redraw();\n            }\n        }\n    }, {\n        key: 'pixelRatio',\n        get: function get() {\n            /* istanbul ignore next */\n            //noinspection JSUnresolvedVariable\n            return window.devicePixelRatio || 1;\n        }\n    }]);\n\n    return SmartCanvas;\n}();\n\nSmartCanvas.collection = [];\n\n/* istanbul ignore next: very browser-specific testing required to cover */\n//noinspection JSUnresolvedVariable\nif (window.matchMedia) {\n    //noinspection JSUnresolvedFunction\n    window.matchMedia('screen and (min-resolution: 2dppx)').addListener(SmartCanvas.redraw);\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Describes rendering target element. Can be either string identifier of\n * the element or the element itself.\n *\n * @typedef {HTMLElement|string} RenderTarget\n */\n\n/**\n * Highlight area definition.\n * It describes highlight area starting from value to value using\n * color. Color can be describes with hex, rgb or rgba value.\n *\n * @typedef {{ from: number, to: number, color: string}} Highlight\n */\n\n/**\n *\n * @type {{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, updateValueOnAnimation: boolean, glow: boolean, title: string|boolean, borders: boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedleStart: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuterStart: string, colorBorderOuterEnd: string, colorBorderMiddleStart: string, colorBorderMiddleEnd: string, colorBorderInnerStart: string, colorBorderInnerEnd: string, needle: boolean, needleShadow: boolean, needleType: string, needleStart: number, needleEnd: number, needleWidth: number, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueText: string|boolean, highlights: Highlight[], fontNumbers: string, fontTitle: string, fontUnits: string, fontValue: string}} GenericOptions\n */\nvar GenericOptions = {\n    // basic options\n    renderTo: null,\n    width: 200,\n    height: 200,\n    minValue: 0,\n    maxValue: 100,\n    value: 0,\n    units: false,\n    majorTicks: [0, 20, 40, 60, 80, 100],\n    minorTicks: 10,\n    strokeTicks: true,\n    updateValueOnAnimation: false,\n    glow: true,\n    title: false,\n    borders: true,\n\n    // number formats\n    valueInt: 3,\n    valueDec: 2,\n    majorTicksInt: 1,\n    majorTicksDec: 0,\n\n    // animations\n    animation: true,\n    animationDuration: 250,\n    animationRule: 'cycle',\n\n    // colors\n    colorPlate: '#fff',\n    colorMajorTicks: '#444',\n    colorMinorTicks: '#666',\n    colorTitle: '#888',\n    colorUnits: '#888',\n    colorNumbers: '#444',\n    colorNeedleStart: 'rgba(240,128,128,1)',\n    colorNeedleEnd: 'rgba(255,160,122,.9)',\n    colorValueText: '#444',\n    colorValueTextShadow: 'rgba(0,0,0,0.3)',\n    colorBorderShadow: 'rgba(0,0,0,0.5)',\n    colorBorderOuterStart: '#ddd',\n    colorBorderOuterEnd: '#aaa',\n    colorBorderMiddleStart: '#eee',\n    colorBorderMiddleEnd: '#f0f0f0',\n    colorBorderInnerStart: '#fafafa',\n    colorBorderInnerEnd: '#ccc',\n\n    fontNumbers: 'Arial',\n    fontTitle: 'Arial',\n    fontUnits: 'Arial',\n    fontValue: 'Arial',\n\n    // needle\n    needle: true,\n    needleShadow: true,\n    needleType: 'arrow',\n    needleStart: 5,\n    needleEnd: 85,\n    needleWidth: 4,\n\n    // borders\n    borderOuterWidth: 3,\n    borderMiddleWidth: 3,\n    borderInnerWidth: 3,\n    borderShadowWidth: 3,\n\n    // value and highlights\n    valueBox: true,\n    valueText: true,\n    highlights: [{ from: 20, to: 60, color: '#eee' }, { from: 60, to: 80, color: '#ccc' }, { from: 80, to: 100, color: '#999' }]\n};\n\nGenericOptions;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Gauge collections type.\n *\n * It is used ES5 declaration here, because babel\n * transpiles inheritance incorrectly in this case.\n *\n * @class Collection\n * @constructor\n */\nfunction Collection() {\n    Array.prototype.constructor.apply(this, arguments);\n}\n\nCollection.prototype = Object.create(Array.prototype);\nCollection.prototype.constructor = Collection;\n\n/**\n * Returns gauge object by its identifier or index in the collection\n *\n * @param {string|number} id\n * @return {*}\n */\nCollection.prototype.get = function (id) {\n    if (typeof id === 'string') {\n        var i = 0;\n        var s = this.length;\n\n        for (; i < s; i++) {\n            var canvas = this[i].options.renderTo.tagName ? this[i].options.renderTo :\n            /* istanbul ignore next: should be tested with e2e tests */\n            document.getElementById(this[i].options.renderTo || '');\n\n            if (canvas.getAttribute('id') === id) {\n                return this[i];\n            }\n        }\n    } else if (typeof id === 'number') {\n        return this[id];\n    }\n\n    return null;\n};\n\nvar gauges = new Collection();\n\n/**\n * Basic abstract BaseGauge class implementing common functionality\n * for different type of gauges.\n *\n * It should not be instantiated directly but must be extended by a final\n * gauge implementation.\n *\n * @abstract\n * @example\n *\n * class MyCoolGauge extends BaseGauge {\n *\n *     // theses methods below MUST be implemented:\n *\n *     constructor(options) {\n *        // ... do something with options\n *        super(options);\n *        // ... implement anything else\n *     }\n *\n *     draw() {\n *         // ... some implementation here\n *         return this;\n *     }\n * }\n */\n\nvar BaseGauge = function () {\n\n    /**\n     * @constructor\n     * @abstract\n     * @param {GenericOptions} options\n     */\n    function BaseGauge(options) {\n        _classCallCheck(this, BaseGauge);\n\n        var className = this.constructor.name;\n\n        if (className === 'BaseGauge') {\n            throw new TypeError('Attempt to instantiate abstract class!');\n        }\n\n        gauges.push(this);\n\n        /**\n         * Gauge type class\n         *\n         * @type {BaseGauge} type\n         */\n        this.type = window[className];\n\n        options.minValue = parseFloat(options.minValue);\n        options.maxValue = parseFloat(options.maxValue);\n\n        if (!options.borders) {\n            options.borderInnerWidth = options.borderMiddleWidth = options.borderOuterWidth = 0;\n        }\n\n        /**\n         * Gauge options\n         *\n         * @type {GenericOptions} options\n         */\n        this.options = options || {};\n\n        if (!options.renderTo) {\n            throw TypeError('Canvas element was not specified when creating ' + 'the Gauge object!');\n        }\n\n        var canvas = options.renderTo.tagName ? options.renderTo :\n        /* istanbul ignore next: to be tested with e2e tests */\n        document.getElementById(options.renderTo);\n\n        /**\n         * @type {SmartCanvas} canvas\n         */\n        this.canvas = new SmartCanvas(canvas, options.width, options.height);\n        this.canvas.onRedraw = this.draw.bind(this);\n\n        /**\n         * @type {Animation} animation\n         */\n        this.animation = new Animation(options.animationRule, options.animationDuration);\n    }\n\n    /**\n     * Sets new value for this gauge.\n     * If gauge is animated by configuration it will trigger a proper animation.\n     * Upsetting a value triggers gauge redraw.\n     *\n     * @param {number} value\n     */\n\n\n    _createClass(BaseGauge, [{\n        key: 'update',\n\n\n        /**\n         * Updates gauge configuration options at runtime and redraws the gauge\n         *\n         * @param {RadialGaugeOptions} options\n         * @returns {BaseGauge}\n         */\n        value: function update(options) {\n            Object.assign(this.options, options || {});\n\n            this.canvas.width = this.options.width;\n            this.canvas.height = this.options.height;\n\n            this.animation.rule = this.options.animationRule;\n            this.animation.duration = this.options.animationDuration;\n\n            this.canvas.redraw();\n\n            return this;\n        }\n\n        /**\n         * Performs destruction of this object properly\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var index = gauges.indexOf(this);\n\n            /* istanbul ignore else */\n            if (~index) {\n                //noinspection JSUnresolvedFunction\n                gauges.splice(index, 1);\n            }\n\n            this.canvas.destroy();\n            this.canvas = null;\n\n            this.animation.destroy();\n            this.animation = null;\n        }\n\n        /**\n         * Triggering gauge render on a canvas.\n         *\n         * @abstract\n         * @returns {BaseGauge}\n         */\n\n    }, {\n        key: 'draw',\n        value: function draw() {\n            throw new TypeError('draw() must be implemented by a child class!');\n        }\n\n        /**\n         * Inject given gauge object into DOM\n         *\n         * @param {string} Type\n         * @param {GenericOptions} options\n         */\n\n    }, {\n        key: 'value',\n        set: function set(value) {\n            var _this2 = this;\n\n            if (value === this.options.value) return;\n\n            if (this.options.animation) {\n                (function () {\n                    var fromValue = _this2.options.value;\n\n                    /**\n                     * @type {number}\n                     * @access private\n                     */\n                    _this2._value = value;\n\n                    _this2.animation.animate(function (percent) {\n                        _this2.options.value = fromValue + (value - fromValue) * percent;\n\n                        _this2.draw();\n                    }, function () {\n                        _this2.options.value = value;\n                        delete _this2._value;\n                        _this2.draw();\n                    });\n                })();\n            } else {\n                this.options.value = value;\n                this.draw();\n            }\n        }\n\n        /**\n         * Returns current value of the gauge\n         *\n         * @return {number}\n         */\n        ,\n        get: function get() {\n            return typeof this._value === 'undefined' ? this.options.value : this._value;\n        }\n    }], [{\n        key: 'initialize',\n        value: function initialize(Type, options) {\n            new DomObserver(options, 'canvas', Type);\n        }\n    }]);\n\n    return BaseGauge;\n}();\n\nwindow['BaseGauge'] = BaseGauge;\ndocument['gauges'] = gauges;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @access private\n * @typedef {CanvasRenderingContext2D|{max: number, maxRadius: number, barDimensions: object}} Canvas2DContext\n */\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rounded corners rectangle\n *\n * @param {Canvas2DContext} context\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @param {number} r\n */\nfunction roundRect(context, x, y, w, h, r) {\n    context.beginPath();\n\n    context.moveTo(x + r, y);\n    context.lineTo(x + w - r, y);\n\n    context.quadraticCurveTo(x + w, y, x + w, y + r);\n    context.lineTo(x + w, y + h - r);\n\n    context.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    context.lineTo(x + r, y + h);\n\n    context.quadraticCurveTo(x, y + h, x, y + h - r);\n    context.lineTo(x, y + r);\n\n    context.quadraticCurveTo(x, y, x + r, y);\n\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Pads a given value with leading zeros using the given options\n *\n * @param {number} val\n * @param {RadialGaugeOptions|{valueInt: number, valueDec: number}} options\n * @returns {string}\n */\nfunction padValue(val, options) {\n    var dec = options.valueDec;\n    var int = options.valueInt;\n    var i = 0;\n    var s = void 0,\n        strVal = void 0,\n        n = void 0;\n\n    val = parseFloat(val);\n    n = val < 0;\n    val = Math.abs(val);\n\n    if (dec > 0) {\n        strVal = val.toFixed(dec).toString().split('.');\n        s = int - strVal[0].length;\n\n        for (; i < s; ++i) {\n            strVal[0] = '0' + strVal[0];\n        }\n\n        strVal = (n ? '-' : '') + strVal[0] + '.' + strVal[1];\n    } else {\n        strVal = Math.round(val).toString();\n        s = int - strVal.length;\n\n        for (; i < s; ++i) {\n            strVal = '0' + strVal;\n        }\n\n        strVal = (n ? '-' : '') + strVal;\n    }\n\n    return strVal;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Formats a number for display on the dial's plate using the majorTicksFormat\n * config option.\n *\n * @param {number} num number to format\n * @param {object} options\n * @returns {string} formatted number\n */\nfunction formatMajorTickNumber(num, options) {\n    var right = void 0,\n        hasDec = false;\n\n    // First, force the correct number of digits right of the decimal.\n    if (options.majorTicksDec === 0) {\n        right = Math.round(num).toString();\n    } else {\n        right = num.toFixed(options.majorTicksDec);\n    }\n\n    // Second, force the correct number of digits left of the decimal.\n    if (options.majorTicksInt > 1) {\n        // Does this number have a decimal?\n        hasDec = ~right.indexOf('.');\n\n        // Is this number a negative number?\n        if (~right.indexOf('-')) {\n            return '-' + [options.majorTicksInt + options.majorTicksDec + 2 + (hasDec ? 1 : 0) - right.length].join('0') + right.replace('-', '');\n        } else {\n            return [options.majorTicksInt + options.majorTicksDec + 1 + (hasDec ? 1 : 0) - right.length].join('0') + right;\n        }\n    }\n\n    return right;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Transforms degrees to radians\n *\n * @param {number} degrees\n * @returns {number}\n */\nfunction radians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns radial point coordinates\n *\n * @param {number} radius\n * @param {number} angle\n * @returns {{x: number, y: number}}\n */\nfunction radialPoint(radius, angle) {\n    return { x: -radius * Math.sin(angle), y: radius * Math.cos(angle) };\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Creates and returns linear gradient canvas object\n *\n * @param {Canvas2DContext} context\n * @param {string} colorFrom\n * @param {string} colorTo\n * @param {number} length\n * @returns {CanvasGradient}\n */\nfunction linearGradient(context, colorFrom, colorTo, length) {\n    var grad = context.createLinearGradient(0, 0, 0, length);\n\n    grad.addColorStop(0, colorFrom);\n    grad.addColorStop(1, colorTo);\n\n    return grad;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle shadow\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawNeedleShadow(context, options) {\n    if (!options.needleShadow) return;\n\n    context.shadowOffsetX = 2;\n    context.shadowOffsetY = 2;\n    context.shadowBlur = 10;\n    context.shadowColor = options.colorNeedleShadowDown;\n}\n\nvar drawings = {\n    roundRect: roundRect,\n    padValue: padValue,\n    formatMajorTickNumber: formatMajorTickNumber,\n    radians: radians,\n    radialPoint: radialPoint,\n    linearGradient: linearGradient,\n    drawNeedleShadow: drawNeedleShadow\n};\n\ndrawings;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar PI = Math.PI;\nvar HPI = PI / 2;\n\n/**\n * Gauge configuration options\n *\n * @typedef {GenericOptions|{ticksAngle: number, startAngle: number, colorNeedleCircleOuterStart: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInnerStart: string, colorNeedleCircleInnerEnd: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, colorValueBoxRectStart: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, needleStart: number, needleEnd: number, needleWidth: number, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean}} RadialGaugeOptions\n */\n\n/**\n * Default gauge configuration options\n *\n * @access private\n * @type {RadialGaugeOptions}\n */\nvar defaultRadialGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    ticksAngle: 270,\n    startAngle: 45,\n\n    // colors\n    colorNeedleCircleOuterStart: '#f0f0f0',\n    colorNeedleCircleOuterEnd: '#ccc',\n    colorNeedleCircleInnerStart: '#e8e8e8',\n    colorNeedleCircleInnerEnd: '#f5f5f5',\n    colorNeedleShadowUp: 'rgba(2,255,255,0.2)',\n    colorNeedleShadowDown: 'rgba(188,143,143,0.45)',\n    colorValueBoxRectStart: '#888',\n    colorValueBoxRectEnd: '#666',\n    colorValueBoxBackground: '#babab2',\n    colorValueBoxShadow: 'rgba(0,0,0,1)',\n\n    // needle\n    needleCircleSize: 10,\n    needleCircleInner: true,\n    needleCircleOuter: true\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gradient-filled circle on a canvas\n *\n * @access private\n * @param {number} radius\n * @param {Canvas2DContext} context\n * @param {string} start gradient start color\n * @param {string} end gradient end color\n */\nfunction drawRadialCircle(radius, context, start, end) {\n    context.beginPath();\n    context.arc(0, 0, radius, 0, PI * 2, true);\n    context.fillStyle = drawings.linearGradient(context, start, end, radius);\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns max radius without borders for the gauge\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @return {number}\n */\nfunction maxRadialRadius(context, options) {\n    if (!context.maxRadius) {\n        context.maxRadius = context.max - options.borderShadowWidth - options.borderOuterWidth - options.borderMiddleWidth - options.borderInnerWidth;\n    }\n\n    return context.maxRadius;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge plate on the canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialPlate(context, options) {\n    var d0 = options.borderShadowWidth;\n    var r0 = context.max - options.borderShadowWidth;\n    var r1 = r0 - options.borderOuterWidth;\n    var r2 = r1 - options.borderMiddleWidth;\n    var r3 = maxRadialRadius(context, options);\n\n    context.save();\n\n    if (options.glow) {\n        context.shadowBlur = d0;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    if (options.borderOuterWidth) {\n        drawRadialCircle(r0, context, options.colorBorderOuterStart, options.colorBorderOuterEnd);\n    }\n\n    if (options.borderMiddleWidth) {\n        drawRadialCircle(r1, context, options.colorBorderMiddleStart, options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRadialCircle(r2, context, options.colorBorderInnerStart, options.colorBorderInnerEnd);\n    }\n\n    context.restore();\n\n    context.beginPath();\n    context.arc(0, 0, r3, 0, PI * 2, true);\n    context.fillStyle = options.colorPlate;\n    context.fill();\n    context.closePath();\n\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge highlight areas on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialHighlights(context, options) {\n    context.save();\n\n    var r1 = radialTicksRadius(context, options);\n    var r2 = r1 - context.max * .15;\n    var i = 0,\n        s = options.highlights.length;\n\n    for (; i < s; i++) {\n        var hlt = options.highlights[i];\n        var vd = (options.maxValue - options.minValue) / options.ticksAngle;\n        var sa = drawings.radians(options.startAngle + (hlt.from - options.minValue) / vd);\n        var ea = drawings.radians(options.startAngle + (hlt.to - options.minValue) / vd);\n        var ps = drawings.radialPoint(r2, sa);\n        var pe = drawings.radialPoint(r1, sa);\n        var ps1 = drawings.radialPoint(r1, ea);\n        var pe1 = drawings.radialPoint(r2, ea);\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r1, sa, ea, false);\n        context.restore();\n        context.save();\n        context.moveTo(ps.x, ps.y);\n        context.lineTo(pe.x, pe.y);\n        context.lineTo(ps1.x, ps1.y);\n        context.lineTo(pe1.x, pe1.y);\n        context.lineTo(ps.x, ps.y);\n        context.closePath();\n\n        context.fillStyle = hlt.color;\n        context.fill();\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r2, sa - 0.2, ea + 0.2, false);\n        context.restore();\n        context.closePath();\n\n        context.fillStyle = options.colorPlate;\n        context.fill();\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks bar on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMinorTicks(context, options) {\n    var radius = radialTicksRadius(context, options);\n\n    context.lineWidth = SmartCanvas.pixelRatio;\n    context.strokeStyle = options.colorMinorTicks;\n\n    context.save();\n\n    var s = options.minorTicks * (options.majorTicks.length - 1);\n    var i = 0;\n\n    for (; i < s; ++i) {\n        var angle = options.startAngle + i * (options.ticksAngle / s);\n\n        context.rotate(drawings.radians(angle));\n\n        context.beginPath();\n        context.moveTo(0, radius);\n        context.lineTo(0, radius - context.max * .075);\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns ticks radius\n *\n * @access private\n * @param context\n * @param options\n * @return {number}\n */\nfunction radialTicksRadius(context, options) {\n    return maxRadialRadius(context, options) - context.max * .05;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge major ticks bar on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMajorTicks(context, options) {\n    var r = radialTicksRadius(context, options);\n    var i = void 0;\n    var s = options.majorTicks.length;\n    var pixelRatio = SmartCanvas.pixelRatio;\n\n    context.lineWidth = 2 * pixelRatio;\n    context.strokeStyle = options.colorMajorTicks;\n    context.save();\n\n    if (s === 0) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.maxValue, options));\n        s = 2;\n    }\n\n    i = 0;\n    for (; i < s; ++i) {\n        context.rotate(drawings.radians(radialNextAngle(options, i, s)));\n\n        context.beginPath();\n        context.moveTo(0, r);\n        context.lineTo(0, r - context.max * .15);\n        closeStrokedPath(context);\n    }\n\n    if (options.strokeTicks) {\n        context.rotate(HPI);\n\n        context.beginPath();\n        context.arc(0, 0, r, drawings.radians(options.startAngle), drawings.radians(options.startAngle + options.ticksAngle), false);\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\nfunction radialNextAngle(options, i, s) {\n    return options.startAngle + i * (options.ticksAngle / (s - 1));\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Strokes, closes path and restores previous context state\n *\n * @param {Canvas2DContext} context\n */\nfunction closeStrokedPath(context) {\n    context.stroke();\n    context.restore();\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar numbers\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNumbers(context, options) {\n    var radius = maxRadialRadius(context, options) - context.max * .35;\n    var points = {};\n    var i = 0;\n    var s = options.majorTicks.length;\n\n    for (; i < s; ++i) {\n        var angle = radialNextAngle(options, i, s);\n        var point = drawings.radialPoint(radius, drawings.radians(angle));\n\n        if (angle === 360) angle = 0;\n\n        if (points[angle]) {\n            continue; //already drawn at this place, skipping\n        }\n\n        points[angle] = true;\n\n        context.font = 20 * (context.max / 200) + 'px ' + options.fontNumbers;\n        context.fillStyle = options.colorNumbers;\n        context.lineWidth = 0;\n        context.textAlign = 'center';\n        context.fillText(options.majorTicks[i], point.x, point.y + 3);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge title\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialTitle(context, options) {\n    if (!options.title) return;\n\n    context.save();\n    context.font = 24 * (context.max / 200) + 'px ' + options.fontTitle;\n    context.fillStyle = options.colorTitle;\n    context.textAlign = 'center';\n    context.fillText(options.title, 0, -context.max / 4.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws units name on the gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialUnits(context, options) {\n    if (!options.units) return;\n\n    context.save();\n    context.font = 22 * (context.max / 200) + 'px ' + options.fontUnits;\n    context.fillStyle = options.colorUnits;\n    context.textAlign = 'center';\n    context.fillText(options.units, 0, context.max / 3.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNeedle(context, options) {\n    if (!options.needle) return;\n\n    var value = options.value;\n    var max = maxRadialRadius(context, options);\n    var r1 = max / 100 * options.needleCircleSize;\n    var r2 = max / 100 * options.needleCircleSize * 0.75;\n    var rIn = max / 100 * options.needleEnd;\n    var rStart = options.needleStart ? max / 100 * options.needleStart : 0,\n        rOut = max * .2;\n    var pad1 = max / 100 * options.needleWidth;\n    var pad2 = max / 100 * options.needleWidth / 2;\n    var pixelRatio = SmartCanvas.pixelRatio;\n\n    drawings.drawNeedleShadow(context, options);\n\n    context.save();\n\n    context.rotate(drawings.radians(options.startAngle + (value - options.minValue) / (options.maxValue - options.minValue) * options.ticksAngle));\n\n    context.fillStyle = drawings.linearGradient(context, options.colorNeedleStart, options.colorNeedleEnd, rIn - rOut);\n\n    if (options.needleType === 'arrow') {\n        context.beginPath();\n        context.moveTo(-pad2, -rOut);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(pixelRatio, rIn);\n        context.lineTo(pad1, 0);\n        context.lineTo(pad2, -rOut);\n        context.closePath();\n        context.fill();\n\n        context.beginPath();\n        context.lineTo(-0.5 * pixelRatio, rIn);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-pad2, -rOut);\n        context.lineTo(pad2 / 2 * pixelRatio - 2 * pixelRatio, -rOut);\n        context.closePath();\n        context.fillStyle = options.colorNeedleShadowUp;\n        context.fill();\n    } else {\n        // simple line needle\n        context.beginPath();\n        context.moveTo(-pad2, rIn);\n        context.lineTo(-pad2, rStart);\n        context.lineTo(pad2, rStart);\n        context.lineTo(pad2, rIn);\n        context.closePath();\n        context.fill();\n    }\n\n    context.restore();\n\n    if (options.needleCircleSize) {\n        drawings.drawNeedleShadow(context, options);\n\n        if (options.needleCircleOuter) {\n            context.beginPath();\n            context.arc(0, 0, r1, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(context, options.colorNeedleCircleOuterStart, options.colorNeedleCircleOuterEnd, r1);\n            context.fill();\n            context.restore();\n            context.closePath();\n        }\n\n        if (options.needleCircleInner) {\n            context.beginPath();\n            context.arc(0, 0, r2, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(context, options.colorNeedleCircleInnerStart, options.colorNeedleCircleInnerEnd, r2);\n            context.fill();\n            context.closePath();\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge value box\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @param {number} value\n */\nfunction drawRadialValueBox(context, options, value) {\n    if (!options.valueText) return;\n\n    var max = context.max;\n    var text = drawings.padValue(value, options);\n    var y = max - max * .33;\n    var x = 0;\n\n    context.save();\n    context.font = 40 * (max / 200) + 'px ' + options.fontValue;\n    context.save();\n\n    if (options.valueBox) {\n        var th = 0.12 * max;\n        var tw = context.measureText('-' + drawings.padValue(0, options)).width;\n\n        drawings.roundRect(context, -tw / 2 - 0.025 * max, y - th - 0.04 * max, tw + 0.05 * max, th + 0.07 * max, 0.025 * max);\n    }\n\n    var gy = y - 0.12 * max - 0.025 * max + (0.12 * max + 0.045 * max) / 2;\n    var grd = context.createRadialGradient(x, gy, max / 10, x, gy, max / 5);\n\n    grd.addColorStop(0, options.colorValueBoxRectStart);\n    grd.addColorStop(1, options.colorValueBoxRectEnd);\n\n    context.strokeStyle = grd;\n    context.lineWidth = 0.05 * max;\n    context.stroke();\n\n    context.shadowBlur = 0.012 * max;\n    context.shadowColor = options.colorValueBoxShadow;\n\n    context.fillStyle = options.colorValueBoxBackground;\n    context.fill();\n\n    context.restore();\n\n    context.shadowOffsetX = 0.004 * max;\n    context.shadowOffsetY = 0.004 * max;\n    context.shadowBlur = 0.012 * max;\n    context.shadowColor = options.colorValueTextShadow;\n\n    context.fillStyle = options.colorValueText;\n    context.textAlign = 'center';\n    context.fillText(text, -x, y);\n\n    context.restore();\n}\n\n/**\n * Minimalistic HTML5 Canvas Gauge\n * @example\n *  var gauge = new RadialGauge({\n *     renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n *     width: 400,\n *     height: 400,\n *     units: 'Km/h',\n *     title: false,\n *     value: 0,\n *     minValue: 0,\n *     maxValue: 220,\n *     majorTicks: [\n *         '0','20','40','60','80','100','120','140','160','180','200','220'\n *     ],\n *     minorTicks: 2,\n *     strokeTicks: false,\n *     highlights: [\n *         { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n *         { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n *         { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n *         { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n *         { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n *     ],\n *     colorPlate: '#222',\n *     colorMajorTicks: '#f5f5f5',\n *     colorMinorTicks: '#ddd',\n *     colorTitle: '#fff',\n *     colorUnits: '#ccc',\n *     colorNumbers: '#eee',\n *     colorNeedleStart: 'rgba(240, 128, 128, 1)',\n *     colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n *     valueBox: true,\n *     animationRule: 'bounce'\n * });\n * // draw initially\n * gauge.draw();\n * // animate\n * setInterval(() => {\n *    gauge.value = Math.random() * -220 + 220;\n * }, 1000);\n */\n\nvar RadialGauge = function (_BaseGauge) {\n    _inherits(RadialGauge, _BaseGauge);\n\n    /**\n     * @constructor\n     * @param {RadialGaugeOptions} options\n     */\n    function RadialGauge(options) {\n        _classCallCheck(this, RadialGauge);\n\n        options = Object.assign({}, defaultRadialGaugeOptions, options || {});\n\n        /* istanbul ignore if */\n        if (isNaN(options.startAngle)) options.startAngle = 45;\n        /* istanbul ignore if */\n        if (isNaN(options.ticksAngle)) options.ticksAngle = 270;\n\n        /* istanbul ignore if */\n        if (options.ticksAngle > 360) options.ticksAngle = 360;\n        /* istanbul ignore if */\n        if (options.ticksAngle < 0) options.ticksAngle = 0;\n\n        /* istanbul ignore if */\n        if (options.startAngle < 0) options.startAngle = 0;\n        /* istanbul ignore if */\n        if (options.startAngle > 360) options.startAngle = 360;\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(RadialGauge).call(this, options));\n    }\n\n    /*  */\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @returns {RadialGauge}\n     */\n\n\n    _createClass(RadialGauge, [{\n        key: 'draw',\n        value: function draw() {\n            var canvas = this.canvas;\n            var x = -canvas.drawX;\n            var y = -canvas.drawY;\n            var w = canvas.drawWidth;\n            var h = canvas.drawHeight;\n\n            var options = this.options;\n\n            if (!canvas.elementClone.initialized) {\n                var context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                drawRadialPlate(context, options);\n                drawRadialHighlights(context, options);\n                drawRadialMinorTicks(context, options);\n                drawRadialMajorTicks(context, options);\n                drawRadialNumbers(context, options);\n                drawRadialTitle(context, options);\n                drawRadialUnits(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            this.canvas.commit();\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n            canvas.context.save();\n\n            drawRadialValueBox(canvas.context, options, this.value);\n            drawRadialNeedle(canvas.context, options);\n\n            return this;\n        }\n    }]);\n\n    return RadialGauge;\n}(BaseGauge);\n\nwindow['RadialGauge'] = RadialGauge;\n\nBaseGauge.initialize('RadialGauge', defaultRadialGaugeOptions);\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Linear gauge configuration options\n *\n * @typedef {GenericOptions|{orientation: string, borderRadius: number, barBeginCircle: number, barWidth: number, barStrokeWidth: number, barProgress: boolean, colorBar: string, colorBarEnd: string, colorBarStroke: string, colorBarProgress: string, colorBarProgressEnd: string, tickSide: string, needleSide: string, numberSide: string}} LinearGaugeOptions\n */\n\nvar round = Math.round;\nvar abs = Math.abs;\n\n/**\n * Default linear gauge configuration options\n *\n * @type {LinearGaugeOptions}\n */\nvar defaultLinearGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    borderRadius: 0,\n    width: 150,\n    height: 400,\n\n    // bar\n    barBeginCircle: 30, // percents\n    barWidth: 20, // percents\n    barStrokeWidth: 0, // pixels\n    barProgress: true,\n\n    colorBarStroke: '#222',\n    colorBar: '#ccc',\n    colorBarEnd: '',\n    colorBarProgress: '#888',\n    colorBarProgressEnd: '',\n\n    needleWidth: 6,\n\n    tickSide: 'both', // available: 'left', 'right', 'both'\n    needleSide: 'both', // available: 'left', 'right', 'both'\n\n    numberSide: 'both' // available: 'left', 'right', 'both'\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rectangle on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {number} r radius for founded corner rectangle if 0 or less won't be drawn\n * @param {number} x x-coordinate of the top-left corner\n * @param {number} y y-coordinate of the top-left corner\n * @param {number} w width of the rectangle\n * @param {number} h height of the rectangle\n * @param {string} colorStart base fill color of the rectangle\n * @param {string} [colorEnd] gradient color of the rectangle\n */\nfunction drawRectangle(context, r, x, y, w, h, colorStart, colorEnd) {\n    context.beginPath();\n    context.fillStyle = colorEnd ? drawings.linearGradient(context, colorStart, colorEnd, w > h ? w : h) : colorStart;\n\n    r > 0 ? drawings.roundRect(context, x, y, w, h, r) : context.rect(x, y, w, h);\n\n    context.fill();\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns linear gauge base bar dimensions.\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions|{barStrokeWidth: number, barBeginCircle: number, barWidth: number}} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @return {{isVertical: boolean, width: number, length: number, barWidth: number, barLength: number, strokeWidth: number, barMargin: number, radius: number, x0: number, y0: number, barOffset: number, titleMargin: number, unitsMargin: number, X: number, Y: number}}\n */\nfunction barDimensions(context, options, x, y, w, h) {\n    var pixelRatio = SmartCanvas.pixelRatio;\n    var isVertical = h >= w;\n    var width = isVertical ? w * .85 : h;\n    var length = isVertical ? h : w;\n\n    x = isVertical ? round(x + (w - width) / 2) : x;\n\n    var hasTitle = !!options.title;\n    var hasUnits = !!options.units;\n\n    var titleMargin = void 0;\n    var unitsMargin = void 0;\n\n    if (isVertical) {\n        unitsMargin = titleMargin = round(length * .1);\n\n        if (hasTitle) {\n            length -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) length -= unitsMargin;\n    } else {\n        unitsMargin = titleMargin = round(width * .15);\n\n        if (hasTitle) {\n            width -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) width -= unitsMargin;\n    }\n\n    var strokeWidth = options.barStrokeWidth * 2;\n    var radius = options.barBeginCircle ? round(width * options.barBeginCircle / 200 - strokeWidth / 2) : 0;\n\n    var barWidth = round(width * options.barWidth / 100 - strokeWidth);\n    var barLength = round(length * .85 - strokeWidth);\n    var barMargin = round((length - barLength) / 2);\n\n    // coordinates for arc of the bar if configured\n    var x0 = round(x + (isVertical ? width / 2 : barMargin + radius));\n    var y0 = round(y + (isVertical ? length - barMargin - radius + strokeWidth / 2 : width / 2));\n\n    //noinspection JSUndefinedPropertyAssignment\n    context.barDimensions = {\n        isVertical: isVertical,\n        width: width,\n        length: length,\n        barWidth: barWidth,\n        barLength: barLength,\n        strokeWidth: strokeWidth,\n        barMargin: barMargin,\n        radius: radius,\n        pixelRatio: pixelRatio,\n        barOffset: null,\n        titleMargin: hasTitle ? titleMargin : 0,\n        unitsMargin: hasUnits ? unitsMargin : 0,\n        get ticksLength() {\n            return this.barLength - this.barOffset - this.strokeWidth;\n        },\n        X: x,\n        Y: y,\n        x0: x0,\n        y0: y0\n    };\n\n    return context.barDimensions;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws bar shape from the given options on a given canvas context\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {number} barOpWidth\n * @param {number} barStrokeWidth\n * @param {string} strokeColor\n * @param {number} circleRadius\n * @param {string} colorStart\n * @param {string} colorEnd\n * @param {number|boolean} toValue\n * @param {number} minValue\n * @param {number} maxValue\n * @param {string} title\n * @param {string} units\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearBarShape(context, barOpWidth, barStrokeWidth, strokeColor, circleRadius, colorStart, colorEnd, toValue, minValue, maxValue, title, units, x, y, w, h) {\n    var _barDimensions = barDimensions(context, {\n        barStrokeWidth: barStrokeWidth,\n        barBeginCircle: circleRadius,\n        barWidth: barOpWidth,\n        title: title,\n        units: units\n    }, x, y, w, h);\n\n    var isVertical = _barDimensions.isVertical;\n    var width = _barDimensions.width;\n    var barWidth = _barDimensions.barWidth;\n    var barLength = _barDimensions.barLength;\n    var strokeWidth = _barDimensions.strokeWidth;\n    var barMargin = _barDimensions.barMargin;\n    var radius = _barDimensions.radius;\n    var x0 = _barDimensions.x0;\n    var y0 = _barDimensions.y0;\n    var X = _barDimensions.X;\n    var Y = _barDimensions.Y;\n\n\n    context.save();\n    context.beginPath();\n\n    if (circleRadius) {\n        var direction = drawings.radians(isVertical ? 270 : 0);\n        var alpha = Math.asin(barWidth / 2 / radius);\n        var cosAlpha = Math.cos(alpha);\n        var sinAlpha = Math.sin(alpha);\n\n        var x1 = x0 + (isVertical ? radius * sinAlpha : radius * cosAlpha - strokeWidth / 2);\n        var y1 = isVertical ? y0 - radius * cosAlpha : y0 + radius * sinAlpha;\n        var cutRadius = isVertical ? abs(y1 - y0) : abs(x1 - x0);\n        // let radiusOffset = round(radius - cutRadius);\n        //\n        // if (isVertical) {\n        //     y0 -= radiusOffset;\n        //     y1 -= radiusOffset;\n        // }\n        //\n        // else {\n        //     x0 -= radiusOffset;\n        //     x1 -= radiusOffset;\n        // }\n        // barLength -= radiusOffset;\n\n        context.barDimensions.barOffset = round(cutRadius + radius);\n\n        // bottom point\n        var x2 = isVertical ? round(x0 - radius * sinAlpha) : x1;\n        var y2 = isVertical ? y1 : round(y0 - radius * sinAlpha);\n\n        if (toValue !== false) {\n            barLength = context.barDimensions.barOffset + (barLength - context.barDimensions.barOffset) * (toValue / (maxValue - minValue));\n        }\n\n        // bar ends at\n        var x3 = round(x1 + barLength - context.barDimensions.barOffset + strokeWidth / 2); // h\n        var y3 = round(y1 - barLength + context.barDimensions.barOffset - strokeWidth / 2); // v\n\n        context.arc(x0, y0, radius, direction + alpha, direction - alpha);\n\n        if (isVertical) {\n            context.moveTo(x1, y2);\n            context.lineTo(x1, y3);\n            context.lineTo(x2, y3);\n            context.lineTo(x2, y2);\n        } else {\n            context.moveTo(x1, y2);\n            context.lineTo(x3, y2);\n            context.lineTo(x3, y1);\n            context.lineTo(x1, y1);\n        }\n    } else {\n        // simply rectangle\n        var rx = round(isVertical ? X + (width - barWidth) / 2 : X + barMargin);\n        var ry = round(isVertical ? Y + barLength + barMargin : Y + (width - barWidth) / 2);\n\n        if (toValue !== false) {\n            barLength *= toValue / (maxValue - minValue);\n        }\n\n        if (isVertical) context.rect(rx, ry, barWidth, -barLength);else context.rect(rx, ry, barLength, barWidth);\n    }\n\n    if (barStrokeWidth) {\n        context.lineWidth = strokeWidth;\n        context.strokeStyle = strokeColor;\n        //context.lineJoin = 'round';\n        context.stroke();\n    }\n\n    if (colorStart) {\n        context.fillStyle = colorEnd ? drawings.linearGradient(context, colorStart, colorEnd, barLength) : colorStart;\n        context.fill();\n    }\n\n    context.closePath();\n\n    // fix dimensions for further usage\n    if (circleRadius) context.barDimensions.radius += strokeWidth;\n\n    context.barDimensions.barWidth += strokeWidth;\n    context.barDimensions.barLength += strokeWidth;\n}\n\n/**\n * Draws gauge bar\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBar(context, options, x, y, w, h) {\n    drawLinearBarShape(context, options.barWidth, options.barStrokeWidth, options.colorBarStroke, options.barBeginCircle, options.colorBar, options.colorBarEnd, false, options.minValue, options.maxValue, options.title, options.units, x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar progress\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBarProgress(context, options, x, y, w, h) {\n    options.barProgress && drawLinearBarShape(context, options.barWidth, options.barStrokeWidth, 'rgba(0,0,0,0)', options.barBeginCircle, options.colorBarProgress, options.colorBarProgressEnd, options.value, options.minValue, options.maxValue, options.title, options.units, x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar highlighted areas\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarHighlights(context, options) {\n    var _context$barDimension = context.barDimensions;\n    var isVertical = _context$barDimension.isVertical;\n    var width = _context$barDimension.width;\n    var length = _context$barDimension.length;\n    var barWidth = _context$barDimension.barWidth;\n    var barOffset = _context$barDimension.barOffset;\n    var barMargin = _context$barDimension.barMargin;\n    var X = _context$barDimension.X;\n    var Y = _context$barDimension.Y;\n    var ticksLength = _context$barDimension.ticksLength;\n\n\n    if (!options.highlights) return;\n\n    var hasLeft = options.tickSide !== 'right';\n    var hasRight = options.tickSide !== 'left';\n    var i = 0;\n    var s = options.highlights.length;\n    var tickOffset = (width - barWidth) / 2;\n    var interval = options.maxValue - options.minValue;\n    var eX = round(isVertical ? X + tickOffset : X + barMargin + barOffset);\n    var eH = .1 * width;\n    var eY = isVertical ? Y + length - barMargin - barOffset : Y + tickOffset;\n    var hLeft = round(.15 * width);\n    var hRight = round(barWidth + .05 * width);\n\n    context.save();\n\n    for (; i < s; i++) {\n        var entry = options.highlights[i];\n        var eW = ticksLength * abs((entry.to - entry.from) / interval);\n\n        context.beginPath();\n        context.fillStyle = entry.color;\n\n        if (isVertical) {\n            if (hasLeft) context.rect(eX - hLeft, eY, eH, -eW);\n\n            if (hasRight) context.rect(eX + hRight, eY, eH, -eW);\n\n            eY -= eW;\n        } else {\n            if (hasLeft) context.rect(eX, eY - hLeft, eW, eH);\n\n            if (hasRight) context.rect(eX, eY + hRight, eW, eH);\n\n            eX += eW;\n        }\n\n        context.fill();\n        context.closePath();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws a tick line on a linear gauge\n *\n * @param {Canvas2DContext} context\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */\nfunction drawLinearTick(context, x1, y1, x2, y2) {\n    context.beginPath();\n\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks\n *\n * @param {Canvas2DContext} context\n * @param {string} color\n * @param {number} ticksSize\n * @param {number} deltaLen\n * @param {boolean} hasLeft\n * @param {boolean} hasRight\n * @param {number} lineWidth\n * @param {number} lineLength\n */\nfunction drawLinearTicks(context, color, ticksSize, deltaLen, hasLeft, hasRight, lineWidth, lineLength) {\n    var _context$barDimension2 = context.barDimensions;\n    var isVertical = _context$barDimension2.isVertical;\n    var length = _context$barDimension2.length;\n    var barWidth = _context$barDimension2.barWidth;\n    var barOffset = _context$barDimension2.barOffset;\n    var barMargin = _context$barDimension2.barMargin;\n    var pixelRatio = _context$barDimension2.pixelRatio;\n    var width = _context$barDimension2.width;\n    var X = _context$barDimension2.X;\n    var Y = _context$barDimension2.Y;\n    var ticksLength = _context$barDimension2.ticksLength;\n\n    var tickOffset = (width - barWidth) / 2;\n    var tickX = void 0,\n        tickY = void 0;\n    var i = 0;\n    var tickLen = lineLength * width;\n    var tickLeft = tickOffset - .05 * width;\n    var tickRight = tickOffset + barWidth + tickLen + .05 * width;\n    var tickSpace = ticksLength / (ticksSize - deltaLen);\n\n    context.lineWidth = lineWidth * pixelRatio;\n    context.strokeStyle = color;\n    context.save();\n\n    for (; i < ticksSize; i++) {\n        if (isVertical) {\n            tickY = Y + length - barMargin - barOffset - i * tickSpace;\n\n            if (hasLeft) {\n                tickX = X + tickLeft;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen), tickY);\n            }\n\n            if (hasRight) {\n                tickX = X + tickRight;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen), tickY);\n            }\n        } else {\n            tickX = X + barMargin + barOffset + i * tickSpace;\n\n            if (hasLeft) {\n                tickY = Y + tickLeft;\n                drawLinearTick(context, tickX, tickY, tickX, round(tickY - tickLen));\n            }\n\n            if (hasRight) {\n                tickY = Y + tickRight;\n                drawLinearTick(context, tickX, round(tickY), tickX, tickY - tickLen);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Prepares major ticks data\n *\n * @access private\n * @param {LinearGaugeOptions} options\n * @return {[boolean, boolean]}\n */\nfunction prepareTicks(options) {\n    if (!options.majorTicks.length) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.maxValue, options));\n    }\n\n    return [options.tickSide !== 'right', options.tickSide !== 'left'];\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicks(context, options) {\n    var _prepareTicks = prepareTicks(options);\n\n    var _prepareTicks2 = _slicedToArray(_prepareTicks, 2);\n\n    var hasLeft = _prepareTicks2[0];\n    var hasRight = _prepareTicks2[1];\n\n    var lineWidth = 2;\n\n    drawLinearTicks(context, options.colorMajorTicks, options.majorTicks.length, 1, hasLeft, hasRight, lineWidth, .1);\n\n    if (options.strokeTicks) {\n        var _context$barDimension3 = context.barDimensions;\n        var isVertical = _context$barDimension3.isVertical;\n        var length = _context$barDimension3.length;\n        var width = _context$barDimension3.width;\n        var barWidth = _context$barDimension3.barWidth;\n        var barMargin = _context$barDimension3.barMargin;\n        var barOffset = _context$barDimension3.barOffset;\n        var X = _context$barDimension3.X;\n        var Y = _context$barDimension3.Y;\n        var ticksLength = _context$barDimension3.ticksLength;\n        var pixelRatio = _context$barDimension3.pixelRatio;\n\n        var rightTicks = (width - barWidth) / 2 + barWidth + .05 * width;\n        var leftTicks = (width - barWidth) / 2 - .05 * width;\n        var sX = void 0,\n            sY = void 0,\n            eX = void 0,\n            eY = void 0;\n\n        lineWidth *= pixelRatio;\n\n        if (isVertical) {\n            sY = Y + length - barMargin - barOffset + lineWidth / 2;\n            eY = sY - ticksLength - lineWidth;\n\n            if (hasLeft) {\n                eX = sX = round(X + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eX = sX = round(X + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        } else {\n            sX = X + barMargin + barOffset - lineWidth / 2;\n            eX = sX + ticksLength + lineWidth;\n\n            if (hasLeft) {\n                eY = sY = round(Y + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eY = sY = round(Y + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks stroke\n *\n * @param {Canvas2DContext} context\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n */\nfunction drawLinearTickStroke(context, sX, sY, eX, eY) {\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMinorTicks(context, options) {\n    var _prepareTicks3 = prepareTicks(options);\n\n    var _prepareTicks4 = _slicedToArray(_prepareTicks3, 2);\n\n    var hasLeft = _prepareTicks4[0];\n    var hasRight = _prepareTicks4[1];\n\n\n    drawLinearTicks(context, options.colorMajorTicks, options.minorTicks * (options.majorTicks.length - 1), 0, hasLeft, hasRight, 1, .05);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major tick numbers\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicksNumbers(context, options) {\n    var _context$barDimension4 = context.barDimensions;\n    var isVertical = _context$barDimension4.isVertical;\n    var length = _context$barDimension4.length;\n    var width = _context$barDimension4.width;\n    var barWidth = _context$barDimension4.barWidth;\n    var barMargin = _context$barDimension4.barMargin;\n    var barOffset = _context$barDimension4.barOffset;\n    var X = _context$barDimension4.X;\n    var Y = _context$barDimension4.Y;\n    var ticksLength = _context$barDimension4.ticksLength;\n\n    var ticks = options.majorTicks.length;\n    var hasLeft = options.numberSide !== 'right';\n    var hasRight = options.numberSide !== 'left';\n    var textHeight = 20 * width / 200;\n    var i = 0;\n    var numLeft = (width - barWidth) / 2 - .2 * width;\n    var numRight = (width - barWidth) / 2 + barWidth + .2 * width;\n    var textX = void 0,\n        textY = void 0,\n        textWidth = void 0,\n        numberOffset = void 0,\n        tick = void 0;\n\n    context.font = textHeight + 'px ' + options.fontNumbers;\n    context.fillStyle = options.colorNumbers;\n    context.lineWidth = 0;\n    context.textAlign = 'center';\n\n    for (; i < ticks; i++) {\n        tick = options.majorTicks[i];\n        numberOffset = i * ticksLength / (ticks - 1);\n\n        if (isVertical) {\n            textY = Y + length - barMargin - barOffset - numberOffset + textHeight / 3;\n\n            if (hasLeft) {\n                context.textAlign = 'right';\n                context.fillText(tick, X + numLeft, textY);\n            }\n\n            if (hasRight) {\n                context.textAlign = 'left';\n                context.fillText(tick, X + numRight, textY);\n            }\n        } else {\n            textWidth = context.measureText(tick).width;\n            textX = X + barMargin + barOffset + numberOffset;\n\n            if (hasLeft) {\n                context.fillText(tick, textX, Y + numLeft);\n            }\n\n            if (hasRight) {\n                context.fillText(tick, textX, Y + numRight + textHeight);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge title\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearTitle(context, options) {\n    if (!options.title) return;\n\n    var _context$barDimension5 = context.barDimensions;\n    var isVertical = _context$barDimension5.isVertical;\n    var width = _context$barDimension5.width;\n    var length = _context$barDimension5.length;\n    var X = _context$barDimension5.X;\n    var Y = _context$barDimension5.Y;\n    var titleMargin = _context$barDimension5.titleMargin;\n\n    var textHeight = .125 * width;\n    var textX = round(X + (isVertical ? width : length) / 2);\n    var textY = round(Y + titleMargin / 2 - (isVertical ? textHeight : textHeight / 2) - .025 * (isVertical ? length : width));\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontTitle;\n    context.lineWidth = 0;\n    context.fillText(options.title, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge units\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearUnits(context, options) {\n    if (!options.units) return;\n\n    var _context$barDimension6 = context.barDimensions;\n    var isVertical = _context$barDimension6.isVertical;\n    var width = _context$barDimension6.width;\n    var length = _context$barDimension6.length;\n    var X = _context$barDimension6.X;\n    var Y = _context$barDimension6.Y;\n    var unitsMargin = _context$barDimension6.unitsMargin;\n\n    var textHeight = .125 * width;\n    var textX = round(X + (isVertical ? width : length) / 2);\n    var textY = round(Y + (isVertical ? length : width) + unitsMargin / 2 - textHeight / 2 - .025 * (isVertical ? length : width));\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontUnits;\n    context.lineWidth = 0;\n    context.fillText(options.units, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge needles\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarNeedle(context, options) {\n    if (!options.needle) return;\n\n    var _context$barDimension7 = context.barDimensions;\n    var isVertical = _context$barDimension7.isVertical;\n    var width = _context$barDimension7.width;\n    var length = _context$barDimension7.length;\n    var barWidth = _context$barDimension7.barWidth;\n    var barOffset = _context$barDimension7.barOffset;\n    var barMargin = _context$barDimension7.barMargin;\n    var ticksLength = _context$barDimension7.ticksLength;\n    var X = _context$barDimension7.X;\n    var Y = _context$barDimension7.Y;\n\n    var hasLeft = options.needleSide !== 'right';\n    var hasRight = options.needleSide !== 'left';\n    var position = ticksLength * options.value / (options.maxValue - options.minValue);\n    var tickWidth = .15 * width;\n    var baseLength = barWidth / 2 + tickWidth;\n    var needleLength = baseLength * (options.needleEnd / 100);\n    var sX = void 0,\n        eX = void 0,\n        sY = void 0,\n        eY = void 0;\n    var draw = options.needleType.toLowerCase() === 'arrow' ? drawLinearArrowNeedle : drawLinearLineNeedle;\n    var barStart = (width - barWidth) / 2;\n    var needleStart = baseLength * (options.needleStart / 100);\n    var nLeft = barStart - tickWidth - needleStart;\n    var nRight = barStart + barWidth + tickWidth + needleStart;\n\n    drawings.drawNeedleShadow(context, options);\n\n    context.save();\n\n    if (isVertical) {\n        sY = round(Y + length - barMargin - barOffset - position);\n\n        if (hasLeft) {\n            sX = round(X + nLeft);\n            eX = sX + needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength);\n        }\n\n        if (hasRight) {\n            sX = round(X + nRight);\n            eX = sX - needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength);\n        }\n    } else {\n        sX = round(X + barMargin + barOffset + position);\n\n        if (hasLeft) {\n            sY = round(Y + nLeft);\n            eY = sY + needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength);\n        }\n\n        if (hasRight) {\n            sY = round(Y + nRight);\n            eY = sY - needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength);\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns needle color style\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} length\n * @return {CanvasGradient|string}\n */\nfunction needleStyle(context, options, length) {\n    return options.colorNeedleEnd ? drawings.linearGradient(context, options.colorNeedleStart, options.colorNeedleEnd, length) : options.colorNeedleStart;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws line needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n */\nfunction drawLinearLineNeedle(context, options, sX, sY, eX, eY, length) {\n    context.lineWidth = options.needleWidth;\n    context.strokeStyle = needleStyle(context, options, length);\n\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws arrow needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n */\nfunction drawLinearArrowNeedle(context, options, sX, sY, eX, eY, length) {\n    var peakLength = round(length * .4);\n    var bodyLength = length - peakLength;\n    var isVertical = sX === eX;\n    var halfWidth = options.needleWidth / 2;\n\n    context.fillStyle = needleStyle(context, options, length);\n\n    context.beginPath();\n\n    if (isVertical) {\n        if (sY > eY) bodyLength *= -1;\n\n        context.moveTo(sX - halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY + bodyLength);\n        context.lineTo(sX, eY);\n        context.lineTo(sX - halfWidth, sY + bodyLength);\n        context.lineTo(sX - halfWidth, sY);\n    } else {\n        if (sX > eX) bodyLength *= -1;\n\n        context.moveTo(sX, sY - halfWidth);\n        context.lineTo(sX, sY + halfWidth);\n        context.lineTo(sX + bodyLength, sY + halfWidth);\n        context.lineTo(eX, sY);\n        context.lineTo(sX + bodyLength, sY - halfWidth);\n        context.lineTo(sX, sY - halfWidth);\n    }\n\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws value box for linear gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearValueBox(context, options, x, y, w, h) {}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge plate\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearPlate(context, options, x, y, w, h) {\n    context.save();\n\n    var r = options.borderRadius;\n\n    var w1 = w - options.borderShadowWidth;\n    var w2 = w1 - options.borderOuterWidth * 2;\n    var w3 = w2 - options.borderMiddleWidth * 2;\n    var w4 = w3 - options.borderInnerWidth * 2;\n\n    var h1 = h - options.borderShadowWidth * 2;\n    var h2 = h1 - options.borderOuterWidth * 2;\n    var h3 = h2 - options.borderMiddleWidth * 2;\n    var h4 = h3 - options.borderInnerWidth * 2;\n\n    var x2 = x - (w2 - w1) / 2;\n    var x3 = x2 - (w3 - w2) / 2;\n    var x4 = x3 - (w4 - w3) / 2;\n\n    var y2 = y - (h2 - h1) / 2;\n    var y3 = y2 - (h3 - h2) / 2;\n    var y4 = y3 - (h4 - h3) / 2;\n\n    if (options.glow) {\n        context.shadowBlur = options.borderShadowWidth;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    if (options.borderOuterWidth) {\n        drawRectangle(context, r, x, y, w1, h1, options.colorBorderOuterStart, options.colorBorderOuterEnd);\n    }\n\n    context.shadowBlur = null;\n    //noinspection JSValidateTypes\n    context.shadowColor = null;\n\n    if (options.borderMiddleWidth) {\n        drawRectangle(context, --r, x2, y2, w2, h2, options.colorBorderMiddleStart, options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRectangle(context, --r, x3, y3, w3, h3, options.colorBorderInnerStart, options.colorBorderInnerEnd);\n    }\n\n    drawRectangle(context, r, x4, y4, w4, h4, options.colorPlate);\n\n    return [x4, y4, w4, h4];\n}\n\n/**\n * Minimalistic HTML5 Canvas Linear Gauge\n */\n\nvar LinearGauge = function (_BaseGauge2) {\n    _inherits(LinearGauge, _BaseGauge2);\n\n    /**\n     * @constructor\n     * @param {LinearGaugeOptions} options\n     */\n    function LinearGauge(options) {\n        _classCallCheck(this, LinearGauge);\n\n        /* istanbul ignore else */\n        if (!options.width) options.width = defaultLinearGaugeOptions.width;\n        /* istanbul ignore else */\n        if (!options.height) options.height = defaultLinearGaugeOptions.height;\n\n        /* istanbul ignore else */\n        if (!options.orientation) {\n            options.orientation = options.width > options.height ? 'horizontal' : 'vertical';\n        }\n\n        options = Object.assign({}, defaultLinearGaugeOptions, options || {});\n\n        /* istanbul ignore else */\n        if (options.barStrokeWidth >= options.barWidth) {\n            options.barStrokeWidth = round(options.barWidth / 2);\n        }\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(LinearGauge).call(this, options));\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Triggering linear gauge render on a canvas.\n     *\n     * @returns {LinearGauge}\n     */\n\n\n    _createClass(LinearGauge, [{\n        key: 'draw',\n        value: function draw() {\n            var canvas = this.canvas;\n            var x = -canvas.drawX;\n            var y = -canvas.drawY;\n            var w = canvas.drawWidth;\n            var h = canvas.drawHeight;\n\n            var options = this.options;\n\n            if (!canvas.elementClone.initialized) {\n                var context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                this.drawBox = drawLinearPlate(context, options, x, y, w, h);\n\n                drawLinearBar.apply(undefined, [context, options].concat(_toConsumableArray(this.drawBox)));\n\n                canvas.context.barDimensions = context.barDimensions;\n\n                drawLinearBarHighlights(context, options);\n                drawLinearMinorTicks(context, options);\n                drawLinearMajorTicks(context, options);\n                drawLinearMajorTicksNumbers(context, options);\n                drawLinearTitle(context, options);\n                drawLinearUnits(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            this.canvas.commit();\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n            canvas.context.save();\n\n            drawLinearBarProgress.apply(undefined, [canvas.context, options].concat(_toConsumableArray(this.drawBox)));\n            drawLinearBarNeedle(canvas.context, options);\n            drawLinearValueBox.apply(undefined, [canvas.context, options].concat(_toConsumableArray(this.drawBox)));\n\n            return this;\n        }\n    }]);\n\n    return LinearGauge;\n}(BaseGauge);\n\nwindow['LinearGauge'] = LinearGauge;\n\nBaseGauge.initialize('LinearGauge', defaultLinearGaugeOptions);}());"],"sourceRoot":"/source/"}