{"version":3,"sources":["gauge.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","vendorize","prop","window","global","vendors","s","capitalized","charAt","toUpperCase","substr","vendorProp","step","time","draw","start","rule","duration","end","anim","progress","percent","frame","requestAnimationFrame","Collection","apply","this","arguments","roundRect","context","x","y","w","h","r","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","padValue","val","options","dec","valueDec","int","valueInt","strVal","n","parseFloat","Math","abs","toFixed","toString","split","round","formatMajorTickNumber","num","right","hasDec","majorTicksDec","majorTicksInt","indexOf","join","replace","radians","degrees","PI","radialPoint","radius","angle","sin","cos","linearGradient","colorFrom","colorTo","grad","createLinearGradient","addColorStop","drawNeedleShadow","needleShadow","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","colorNeedleShadowDown","drawValueBox","max","valueText","text","drawings","strokeStyle","lineWidth","save","font","fontValue","valueBox","th","tw","measureText","width","bx","by","bw","bh","br","valueBoxBorderRadius","rect","gy","valueBoxStroke","grd","createRadialGradient","colorValueBoxRectStart","colorValueBoxRectEnd","stroke","colorValueBoxShadow","colorValueBoxBackground","fillStyle","fill","restore","valueTextShadow","colorValueTextShadow","colorValueText","textAlign","fillText","drawRadialCircle","arc","maxRadialRadius","maxRadius","borderShadowWidth","borderOuterWidth","borderMiddleWidth","borderInnerWidth","drawRadialPlate","d0","r0","r1","r2","r3","glow","colorBorderShadow","colorBorderOuterStart","colorBorderOuterEnd","colorBorderMiddleStart","colorBorderMiddleEnd","colorBorderInnerStart","colorBorderInnerEnd","colorPlate","drawRadialHighlights","radialTicksRadius","highlights","hlt","vd","maxValue","minValue","ticksAngle","sa","startAngle","ea","to","ps","pe","ps1","pe1","rotate","HPI","color","drawRadialMinorTicks","SmartCanvas","pixelRatio","colorMinorTicks","minorTicks","majorTicks","closeStrokedPath","drawRadialMajorTicks","colorMajorTicks","push","radialNextAngle","strokeTicks","drawRadialNumbers","points","point","fontNumbers","colorNumbers","drawRadialTitle","title","fontTitle","colorTitle","drawRadialUnits","units","fontUnits","colorUnits","drawRadialNeedle","needle","needleCircleSize","rIn","needleEnd","rStart","needleStart","rOut","pad1","needleWidth","pad2","colorNeedleStart","colorNeedleEnd","needleType","colorNeedleShadowUp","needleCircleOuter","colorNeedleCircleOuterStart","colorNeedleCircleOuterEnd","needleCircleInner","colorNeedleCircleInnerStart","colorNeedleCircleInnerEnd","drawRadialValueBox","drawRectangle","colorStart","colorEnd","barDimensions","isVertical","hasTitle","hasUnits","hasValue","titleMargin","unitsMargin","valueMargin","strokeWidth","barStrokeWidth","barBeginCircle","barWidth","barLength","BAR_LENGTH","barMargin","x0","y0","dx","hasLeft","hasRight","TICKS_WIDTH","dy","barOffset","ticksLength","X","Y","baseX","baseY","drawLinearBarShape","type","_barDimensions","direction","alpha","asin","cosAlpha","sinAlpha","x1","y1","cutRadius","x2","y2","x3","y3","rx","ry","colorBarStroke","colorBar","colorBarEnd","colorBarProgress","colorBarProgressEnd","drawLinearBar","hasTicksBar","notWhich","needleSide","tickSide","numberSide","drawLinearBarProgress","barProgress","drawLinearBarHighlights","_context$barDimension","tickOffset","interval","eX","eH","eY","hLeft","TICKS_PADDING","hRight","entry","eW","drawLinearTick","drawLinearTicks","ticksSize","deltaLen","lineLength","_context$barDimension2","tickX","tickY","tickLen","tickLeft","tickRight","tickSpace","prepareTicks","drawLinearMajorTicks","_prepareTicks","_prepareTicks2","_slicedToArray","_context$barDimension3","rightTicks","leftTicks","sX","sY","drawLinearTickStroke","drawLinearMinorTicks","_prepareTicks3","_prepareTicks4","TICKS_WIDTH_MINOR","drawLinearMajorTicksNumbers","_context$barDimension4","ticks","textHeight","FONT_NUMBERS","ticksWidth","numLeft","numRight","textX","textY","textWidth","numberOffset","tick","drawLinearTitle","_context$barDimension5","FONT_TITLE","drawLinearUnits","_context$barDimension6","FONT_UNITS","drawLinearBarNeedle","_context$barDimension7","position","tickWidth","baseLength","needleLength","toLowerCase","drawLinearArrowNeedle","drawLinearLineNeedle","barStart","nLeft","nRight","needleStyle","peakLength","bodyLength","halfWidth","drawLinearValueBox","drawLinearPlate","borderRadius","w1","w2","w3","w4","h1","h2","h3","h4","x4","y4","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","err","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","assign","firstSource","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","searchElement","fromIndex","k","O","Infinity","callback","setTimeout","Date","getTime","rules","linear","p","quad","pow","dequad","quint","dequint","cycle","acos","decycle","bounce","debounce","a","b","elastic","delastic","Animation","_this","performance","now","cancelAnimationFrame","id","DomObserver","element","Type","toDashed","domReady","traverse","bind","mutationsObserved","node","tagName","getAttribute","elements","document","getElementsByTagName","process","MutationObserver","observe","body","childList","subtree","attributes","characterData","attributeOldValue","characterDataOldValue","records","record","attributeName","isValidNode","oldValue","addedNodes","ii","ss","JSON","parse","stringify","hasOwnProperty","toAttributeName","attributeValue","renderTo","test","e","camelCase","str","handler","addEventListener","attachEvent","canvas","height","collection","init","style","elementClone","cloneNode","getContext","contextClone","drawWidth","drawHeight","drawX","drawY","minSide","initialized","translate","index","splice","onRedraw","scale","redraw","get","devicePixelRatio","matchMedia","addListener","GenericOptions","updateValueOnAnimation","borders","animation","animationDuration","animationRule","getElementById","gauges","BaseGauge","className","name","destroy","set","_this2","fromValue","_value","animate","defaultRadialGaugeOptions","RadialGauge","_BaseGauge","isNaN","getPrototypeOf","clearRect","commit","drawImage","initialize","defaultLinearGaugeOptions","ticksWidthMinor","ticksPadding","fontNumbersSize","fontTitleSize","fontUnitsSize","LinearGauge","_BaseGauge2","orientation","drawBox","concat"],"mappings":"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","file":"gauge.min.js","sourcesContent":["(function() {'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @external {Object.assign} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n/* istanbul ignore next */\nif (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function value(target, firstSource) {\n            'use strict';\n\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert first argument to object');\n            }\n\n            var to = Object(target);\n            var i = 1;\n\n            for (; i < arguments.length; i++) {\n                var nextSource = arguments[i];\n\n                if (nextSource === undefined || nextSource === null) {\n                    continue;\n                }\n\n                var keysArray = Object.keys(Object(nextSource));\n                var nextIndex = 0,\n                    len = keysArray.length;\n\n                for (; nextIndex < len; nextIndex++) {\n                    var nextKey = keysArray[nextIndex];\n                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n                    if (desc !== undefined && desc.enumerable) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n\n            return to;\n        }\n    });\n}\n\n/**\n * @external {Array.indexOf} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n */\n/* istanbul ignore next */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement, fromIndex) {\n        var k;\n\n        if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var O = Object(this);\n        var len = O.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n\n        var n = +fromIndex || 0;\n\n        if (Math.abs(n) === Infinity) {\n            n = 0;\n        }\n\n        if (n >= len) {\n            return -1;\n        }\n\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        while (k < len) {\n            if (k in O && O[k] === searchElement) {\n                return k;\n            }\n\n            k++;\n        }\n\n        return -1;\n    };\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Look-ups for a proper vendor-specific property and returns its value\n *\n * @example\n * var requestAnimationFrame = vendorize('requestAnimationFrame');\n * // it will refer properly to:\n * //  - window.requestAnimationFrame by default or to\n * //  - window.webkitRequestAnimationFrame or to\n * //  - window.mozRequestAnimationFrame or to\n * //  - window.msRequestAnimationFrame or to\n * //  - window.oRequestAnimationFrame\n * // depending on the current browser vendor\n *\n * @author Mykhailo Stadnyk <mikhus@gmail.com>\n * @param {string} prop\n * @param {HTMLElement|Window|object} [from] - default is window\n * @returns {*}\n */\nfunction vendorize(prop, from) {\n    /* istanbul ignore else: no reason to cover */\n    if (!from) {\n        from = typeof window === 'undefined' ? global : window;\n    }\n\n    if (typeof from[prop] !== 'undefined') {\n        return from[prop];\n    }\n\n    var vendors = ['webkit', 'moz', 'ms', 'o'];\n    var i = 0;\n    var s = vendors.length;\n    var capitalized = prop.charAt(0).toUpperCase() + prop.substr(1);\n\n    for (; i < s; i++) {\n        var vendorProp = from[vendors[i] + capitalized];\n\n        /* istanbul ignore if: requires very complex environment to test (specific browser version) */\n        if (typeof vendorProp !== 'undefined') {\n            return vendorProp;\n        }\n    }\n\n    return null;\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/* istanbul ignore next */\n/**\n * @type {function(callback: function(time: number): number, element?: HTMLElement)}\n * @access private\n */\nvar requestAnimationFrame = vendorize('requestAnimationFrame') || function (callback) {\n    return setTimeout(function () {\n        return callback(new Date().getTime());\n    }, 1000 / 60);\n};\n\n/**\n * Generic AnimationRule function interface\n *\n * @typedef {function(percent: number): number} AnimationRule\n */\n\n/**\n * Callback for animation step draw event.\n * It will be called each time animation step is executed, bypassing\n * as first argument a percent of animation completeness. It is expected\n * that this callback will do an actual work of animating an elements or\n * whatever, as far as animation engine is just calculating and executing\n * animation steps without any knowledge about things under animation.\n *\n * @typedef {function(percent: number): *} DrawEventCallback\n */\n\n/**\n * Callback for animation complete event.\n * It is called once each animation is complete.\n *\n * @typedef {function(): *} EndEventCallback\n */\n\n/**\n * Predefined known animation rules.\n * It's a simple collection of math for some most used animations.\n *\n * @typedef {{linear: AnimationRule, quad: AnimationRule, dequad: AnimationRule, quint: AnimationRule, dequint: AnimationRule, cycle: AnimationRule, decycle: AnimationRule, bounce: AnimationRule, debounce: AnimationRule, elastic: AnimationRule, delastic: AnimationRule}} AnimationRules\n */\n\n/* istanbul ignore next: no reason covering this */\nvar rules = {\n    linear: function linear(p) {\n        return p;\n    },\n    quad: function quad(p) {\n        return Math.pow(p, 2);\n    },\n    dequad: function dequad(p) {\n        return 1 - rules.quad(1 - p);\n    },\n    quint: function quint(p) {\n        return Math.pow(p, 5);\n    },\n    dequint: function dequint(p) {\n        return 1 - Math.pow(1 - p, 5);\n    },\n    cycle: function cycle(p) {\n        return 1 - Math.sin(Math.acos(p));\n    },\n    decycle: function decycle(p) {\n        return Math.sin(Math.acos(1 - p));\n    },\n    bounce: function bounce(p) {\n        return 1 - rules.debounce(1 - p);\n    },\n    debounce: function debounce(p) {\n        var a = 0,\n            b = 1;\n        for (; 1; a += b, b /= 2) {\n            if (p >= (7 - 4 * a) / 11) {\n                return -Math.pow((11 - 6 * a - 11 * p) / 4, 2) + Math.pow(b, 2);\n            }\n        }\n    },\n    elastic: function elastic(p) {\n        return 1 - rules.delastic(1 - p);\n    },\n    delastic: function delastic(p) {\n        var x = 1.5;\n        return Math.pow(2, 10 * (p - 1)) * Math.cos(20 * Math.PI * x / 3 * p);\n    }\n};\n\n/* istanbul ignore next: private, not testable */\n/**\n * Evaluates animation step and decides if the next step required or\n * stops animation calling a proper events.\n *\n * @access private\n * @param {number} time\n * @param {DrawEventCallback} draw\n * @param {number} start\n * @param {AnimationRule} rule\n * @param {number} duration\n * @param {EndEventCallback} end\n * @param {Animation} anim\n */\nfunction step(time, draw, start, rule, duration, end, anim) {\n    if (typeof rule !== 'function') {\n        throw new TypeError('Invalid animation rule:', rule);\n    }\n\n    var progress = time - start;\n    var percent = progress / duration;\n\n    if (percent > 1) {\n        percent = 1;\n    }\n\n    draw && draw(percent === 1 ? percent : rule(percent));\n\n    if (progress < duration) {\n        anim.frame = requestAnimationFrame(function (time) {\n            return step(time, draw, start, rule, duration, end, anim);\n        });\n    } else {\n        end && end();\n    }\n}\n\n/**\n * Animation engine API for JavaScript-based animations.\n * This is simply an animation core framework which simplifies creation\n * of various animations for generic purposes.\n *\n * @example\n * // create 'linear' animation engine, 500ms duration\n * let linear = new Animation('linear', 500);\n *\n * // create 'elastic' animation engine\n * let elastic = new Animation('elastic');\n *\n * // define animation behavior\n * let bounced = new Animation('bounce', 500, percent => {\n *     let value = parseInt(percent * 100, 10);\n *\n *     $('div.bounced').css({\n *         width: value + '%',\n *         height: value + '%'\n *     });\n * });\n *\n * // execute animation\n * bounced.animate();\n *\n * // execute animation and handle when its finished\n * bounced.animate(null, () => {\n *    console.log('Animation finished!');\n * });\n */\n\nvar Animation = function () {\n\n    /**\n     * @constructor\n     * @param {string|AnimationRule} rule\n     * @param {number} duration\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n    function Animation() {\n        var rule = arguments.length <= 0 || arguments[0] === undefined ? 'linear' : arguments[0];\n        var duration = arguments.length <= 1 || arguments[1] === undefined ? 250 : arguments[1];\n        var draw = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];\n        var end = arguments.length <= 3 || arguments[3] === undefined ? function () {} : arguments[3];\n\n        _classCallCheck(this, Animation);\n\n        /**\n         * Overall animation duration in milliseconds.\n         * By default is equal to 250 ms.\n         *\n         * @type {number}\n         */\n        this.duration = duration;\n\n        /**\n         * Animation rule. By default is linear animation.\n         * Animation rule is a subject to animation rules, which are\n         * a simple object containing math-based methods for calculating\n         * animation steps.\n         *\n         * @type {string|AnimationRule}\n         */\n        this.rule = rule;\n\n        /**\n         * Callback function for the animation step draw event.\n         *\n         * @type {DrawEventCallback}\n         */\n        this.draw = draw;\n\n        /**\n         * Callback for the animation complete event.\n         *\n         * @type {EndEventCallback}\n         */\n        this.end = end;\n\n        if (typeof this.draw !== 'function') {\n            throw new TypeError('Invalid animation draw callback:', draw);\n        }\n\n        if (typeof this.end !== 'function') {\n            throw new TypeError('Invalid animation end callback:', end);\n        }\n    }\n\n    /* istanbul ignore next: non-testable */\n    /**\n     * Performs animation calling each animation step draw callback and\n     * end callback at the end of animation. Callbacks are optional to this\n     * method call. If them are not bypassed will be used that ones which\n     * was pre-set on constructing an Animation object or pre-set after\n     * construction.\n     *\n     * @example\n     * function draw(percent) {\n     *     $('.my-animated-divs').css({\n     *         width: parseInt(percent * 100, 10) + '%'\n     *     });\n     * }\n     * function done() {\n     *     console.log('Animation complete!');\n     * }\n     *\n     * // Define 'draw' and 'end' callbacks on construction\n     * var animation = new Animation('cycle', 500, draw, done);\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks after construction\n     * var animation = new Animation('cycle', 500);\n     * animation.draw = draw;\n     * animation.end = done;\n     * animation.animate();\n     *\n     * // Define 'draw' and 'end' callbacks at animation\n     * var animation = new Animation('cycle', 500);\n     * animation.animate(draw, done);\n     *\n     * @param {DrawEventCallback} [draw]\n     * @param {EndEventCallback} [end]\n     */\n\n\n    _createClass(Animation, [{\n        key: 'animate',\n        value: function animate(draw, end) {\n            var _this = this;\n\n            //noinspection JSUnresolvedVariable\n            var start = vendorize('animationStartTime') || window.performance && window.performance.now ? window.performance.now() : Date.now();\n\n            draw = draw || this.draw;\n            end = end || this.end;\n\n            /**\n             * Current requested animation frame identifier\n             *\n             * @type {number}\n             */\n            this.frame = requestAnimationFrame(function (time) {\n                return step(time, draw, start, rules[_this.rule] || _this.rule, _this.duration, end, _this);\n            });\n        }\n\n        /**\n         * Destroys this object properly\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            if (this.frame) {\n                var cancelAnimationFrame = vendorize('cancelAnimationFrame') ||\n                /* istanbul ignore next */\n                function (id) {};\n\n                cancelAnimationFrame(this.frame);\n                this.frame = null;\n            }\n\n            this.draw = null;\n            this.end = null;\n        }\n    }]);\n\n    return Animation;\n}();\n\n/**\n * Animation rules bound statically to Animation constructor.\n *\n * @type {AnimationRules}\n * @static\n */\n\n\nAnimation.rules = rules;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * @typedef {{ constructor: function(options: object): GaugeInterface, draw: function(): GaugeInterface }} GaugeInterface\n */\n/**\n * @typedef {{parse: function, stringify: function}} JSON\n * @external {JSON} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON\n */\n\n/**\n * DOM Observer.\n * It will observe DOM document for a configured element types and\n * instantiate associated Types for an existing or newly added DOM elements\n *\n * @example\n * class ProgressBar {\n *     constructor(options) {}\n *     draw() {}\n * }\n *\n * // It will observe DOM document for elements <div>\n * // having attribute 'data-type=\"progress\"'\n * // and instantiate for each new instance of ProgressBar\n *\n * new DomParser({color: 'red'}, 'div', 'progress', ProgressBar);\n *\n * // assume we could have HTML like this\n * // <div data-type=\"progress\" color=\"blue\"></div>\n * // in this case all matching attributes names for a given options will be\n * // parsed and bypassed to an instance from HTML attributes\n */\n\nvar DomObserver = function () {\n\n    /**\n     * @constructor\n     * @param {object} options\n     * @param {string} element\n     * @param {string} Type\n     */\n    function DomObserver(options, element, Type) {\n        _classCallCheck(this, DomObserver);\n\n        //noinspection JSUnresolvedVariable\n        /**\n         * Default instantiation options for the given Type\n         *\n         * @type {Object}\n         */\n        this.options = options;\n\n        /**\n         * Name of an element to lookup/observe\n         *\n         * @type {string}\n         */\n        this.element = element.toLowerCase();\n\n        /**\n         * data-type attribute value to lookup\n         *\n         * @type {string}\n         */\n        this.type = DomObserver.toDashed(Type);\n\n        /**\n         * Actual type constructor to instantiate for each found element\n         *\n         * @type {Function}\n         */\n        this.Type = window[Type];\n\n        /* istanbul ignore next: this should be tested with end-to-end tests */\n        DomObserver.domReady(this.traverse.bind(this));\n\n        /**\n         * Signals if mutations observer for this type or not\n         *\n         * @type {boolean}\n         */\n        this.mutationsObserved = false;\n    }\n\n    /**\n     * Checks if given node is valid node to process\n     *\n     * @param {Node|HTMLElement} node\n     * @returns {boolean}\n     */\n\n\n    _createClass(DomObserver, [{\n        key: 'isValidNode',\n        value: function isValidNode(node) {\n            return !!(node.tagName && node.tagName.toLowerCase() === this.element && node.getAttribute('data-type') === this.type);\n        }\n\n        /**\n         * Traverse entire current DOM tree and process matching nodes.\n         * Usually it should be called only once on document initialization.\n         */\n\n    }, {\n        key: 'traverse',\n        value: function traverse() {\n            var elements = document.getElementsByTagName(this.element);\n            var i = 0,\n                s = elements.length;\n\n            /* istanbul ignore next: this should be tested with end-to-end tests */\n            for (; i < s; i++) {\n                this.process(elements[i]);\n            }\n\n            if (window.MutationObserver && !this.mutationsObserved) {\n                //noinspection JSCheckFunctionSignatures\n                new MutationObserver(this.observe.bind(this)).observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    characterData: true,\n                    attributeOldValue: true,\n                    characterDataOldValue: true\n                });\n\n                this.mutationsObserved = true;\n            }\n        }\n\n        /**\n         * Observes given mutation records for an elements to process\n         *\n         * @param {MutationRecord[]} records\n         */\n\n    }, {\n        key: 'observe',\n        value: function observe(records) {\n            var i = 0;\n            var s = records.length;\n\n            /* istanbul ignore next: this should be tested with end-to-end tests */\n            for (; i < s; i++) {\n                var record = records[i];\n\n                if (record.type === 'attributes' && record.attributeName === 'data-type' && this.isValidNode(record.target) && record.oldValue !== this.type) // skip false-positive mutations\n                    {\n                        this.process(record.target);\n                    } else if (record.addedNodes && record.addedNodes.length) {\n                    var ii = 0;\n                    var ss = record.addedNodes.length;\n\n                    for (; ii < ss; ii++) {\n                        this.process(record.addedNodes[ii]);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Parses given attribute value to a proper JavaScript value.\n         * For example it will parse some stringified value to a proper type\n         * value, e.g. 'true' => true, 'null' => null, '{\"prop\": 20}' => {prop: 20}\n         *\n         * @param {*} value\n         * @return {*}\n         */\n\n    }, {\n        key: 'process',\n\n\n        /**\n         * Processes a given node, instantiating a proper type constructor for it\n         *\n         * @param {Node|HTMLElement} node\n         * @returns {GaugeInterface|null}\n         */\n        value: function process(node) {\n            if (!this.isValidNode(node)) return null;\n\n            var prop = void 0;\n            var options = JSON.parse(JSON.stringify(this.options));\n\n            for (prop in options) {\n                /* istanbul ignore else: non-testable in most cases */\n                if (options.hasOwnProperty(prop)) {\n                    var attributeName = DomObserver.toAttributeName(prop);\n                    var attributeValue = DomObserver.parse(node.getAttribute(attributeName));\n\n                    if (attributeValue !== null && attributeValue !== undefined) {\n                        options[prop] = attributeValue;\n                    }\n                }\n            }\n\n            options.renderTo = node;\n\n            return new this.Type(options).draw();\n        }\n\n        /**\n         * Transforms camelCase string to dashed string\n         *\n         * @static\n         * @param {string} camelCase\n         * @return {string}\n         */\n\n    }], [{\n        key: 'parse',\n        value: function parse(value) {\n            // parse boolean\n            if (value === 'true') return true;\n            if (value === 'false') return false;\n\n            // parse undefined\n            if (value === 'undefined') return undefined;\n\n            // parse null\n            if (value === 'null') return null;\n\n            // Comma-separated strings to array parsing.\n            // It won't match strings which contains non alphanumeric characters to\n            // prevent strings like 'rgba(0,0,0,0)' or JSON-like from being parsed.\n            // Typically it simply allows easily declare arrays as comma-separated\n            // numbers or plain strings. If something more complicated is\n            // required it can be declared using JSON format syntax\n            if (/^[\\w\\d\\s]+(?:,[\\w\\d\\s]+)+$/.test(value)) {\n                return value.split(',');\n            }\n\n            // parse JSON\n            try {\n                return JSON.parse(value);\n            } catch (e) {}\n\n            // plain value - no need to parse\n            return value;\n        }\n    }, {\n        key: 'toDashed',\n        value: function toDashed(camelCase) {\n            var arr = camelCase.split(/(?=[A-Z])/);\n            var i = 1;\n            var s = arr.length;\n            var str = arr[0].toLowerCase();\n\n            for (; i < s; i++) {\n                str += '-' + arr[i].toLowerCase();\n            }\n\n            return str;\n        }\n\n        /**\n         * Transforms camel case property name to dash separated attribute name\n         *\n         * @static\n         * @param {string} str\n         * @returns {string}\n         */\n\n    }, {\n        key: 'toAttributeName',\n        value: function toAttributeName(str) {\n            return 'data-' + DomObserver.toDashed(str);\n        }\n\n        /**\n         * Cross-browser DOM ready handler\n         *\n         * @static\n         * @param {Function} handler\n         */\n\n    }, {\n        key: 'domReady',\n        value: function domReady(handler) {\n            if (window.addEventListener) {\n                window.addEventListener('DOMContentLoaded', handler, false);\n            } else {\n                window.attachEvent('onload', handler);\n            }\n        }\n    }]);\n\n    return DomObserver;\n}();\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/**\n * Drawings on canvas using hidden canvas as a cache for better\n * performance drawings during canvas animations. SmartCanvas also\n * adopts a canvas to\n */\n\n\nvar SmartCanvas = function () {\n\n    /**\n     * @constructor\n     * @param {HTMLCanvasElement} canvas\n     * @param {number} width\n     * @param {number} height\n     */\n    function SmartCanvas(canvas, width, height) {\n        _classCallCheck(this, SmartCanvas);\n\n        SmartCanvas.collection.push(this);\n\n        /**\n         * Canvas base width\n         *\n         * @type {number}\n         */\n        this.width = width || 0;\n\n        /**\n         * Canvas base height\n         *\n         * @type {number}\n         */\n        this.height = height || 0;\n\n        /**\n         * Target drawings canvas element\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.element = canvas;\n\n        this.init();\n    }\n\n    /**\n     * Initializes canvases and contexts\n     */\n\n\n    _createClass(SmartCanvas, [{\n        key: 'init',\n        value: function init() {\n            var pixelRatio = SmartCanvas.pixelRatio;\n\n            this.element.width = this.width * pixelRatio;\n            this.element.height = this.height * pixelRatio;\n\n            this.element.style.width = this.width + 'px';\n            this.element.style.height = this.height + 'px';\n\n            /**\n             * Canvas caching element\n             *\n             * @type {HTMLCanvasElement|Node}\n             */\n            this.elementClone = this.element.cloneNode(true);\n\n            //noinspection JSUnresolvedVariable\n            /**\n             * Target drawings canvas element 2D context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n            this.context = this.element.getContext('2d');\n\n            /**\n             * Canvas caching element 2D context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n            this.contextClone = this.elementClone.getContext('2d');\n\n            /**\n             * Actual drawings width\n             *\n             * @type {number}\n             */\n            this.drawWidth = this.element.width;\n\n            /**\n             * Actual drawings height\n             *\n             * @type {number}\n             */\n            this.drawHeight = this.element.height;\n\n            /**\n             * X-coordinate of drawings zero point\n             *\n             * @type {number}\n             */\n            this.drawX = this.drawWidth / 2;\n\n            /**\n             * Y-coordinate of drawings zero point\n             *\n             * @type {number}\n             */\n            this.drawY = this.drawHeight / 2;\n\n            /**\n             * Minimal side length in pixels of the drawing\n             *\n             * @type {number}\n             */\n            this.minSide = this.drawX < this.drawY ? this.drawX : this.drawY;\n\n            this.elementClone.initialized = false;\n\n            this.contextClone.translate(this.drawX, this.drawY);\n            this.contextClone.save();\n\n            this.context.translate(this.drawX, this.drawY);\n            this.context.save();\n\n            this.context.max = this.contextClone.max = this.minSide;\n            this.context.maxRadius = this.contextClone.maxRadius = null;\n        }\n\n        /**\n         * Destroys this object, removing the references from memory\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var index = SmartCanvas.collection.indexOf(this);\n\n            /* istanbul ignore else */\n            if (~index) {\n                SmartCanvas.collection.splice(index, 1);\n            }\n\n            // dereference all created elements\n            this.context.max = null;\n            delete this.context.max;\n\n            this.context.maxRadius = null;\n            delete this.context.maxRadius;\n\n            this.context = null;\n            this.contextClone = null;\n            this.elementClone = null;\n            this.element = null;\n\n            /**\n             * On canvas redraw event callback\n             *\n             * @type {function|null|undefined}\n             */\n            this.onRedraw = null;\n        }\n\n        /**\n         * Commits the drawings\n         */\n\n    }, {\n        key: 'commit',\n        value: function commit() {\n            var scale = SmartCanvas.pixelRatio;\n\n            if (scale !== 1) {\n                this.contextClone.scale(scale, scale);\n                this.contextClone.save();\n            }\n\n            return this;\n        }\n\n        /**\n         * Redraw this object\n         */\n\n    }, {\n        key: 'redraw',\n        value: function redraw() {\n            this.init();\n\n            /**\n             * On canvas redraw event callback\n             *\n             * @type {function(): *}\n             */\n            this.onRedraw && this.onRedraw();\n\n            return this;\n        }\n\n        /**\n         * Returns current device pixel ratio\n         *\n         * @returns {number}\n         */\n\n    }], [{\n        key: 'redraw',\n\n\n        /**\n         * Forces redraw all canvas in the current collection\n         */\n        value: function redraw() {\n            var i = 0;\n            var s = SmartCanvas.collection.length;\n\n            for (; i < s; i++) {\n                SmartCanvas.collection[i].redraw();\n            }\n        }\n    }, {\n        key: 'pixelRatio',\n        get: function get() {\n            /* istanbul ignore next */\n            //noinspection JSUnresolvedVariable\n            return window.devicePixelRatio || 1;\n        }\n    }]);\n\n    return SmartCanvas;\n}();\n\nSmartCanvas.collection = [];\n\n/* istanbul ignore next: very browser-specific testing required to cover */\n//noinspection JSUnresolvedVariable\nif (window.matchMedia) {\n    //noinspection JSUnresolvedFunction\n    window.matchMedia('screen and (min-resolution: 2dppx)').addListener(SmartCanvas.redraw);\n}\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Describes rendering target element. Can be either string identifier of\n * the element or the element itself.\n *\n * @typedef {HTMLElement|string} RenderTarget\n */\n\n/**\n * Highlight area definition.\n * It describes highlight area starting from value to value using\n * color. Color can be describes with hex, rgb or rgba value.\n *\n * @typedef {{ from: number, to: number, color: string}} Highlight\n */\n\n/**\n * Shared generic gauges options\n *\n * @type {{renderTo: RenderTarget, width: number, height: number, minValue: number, maxValue: number, value: number, units: string|boolean, majorTicks: number[]|string[], minorTicks: number, strokeTicks: boolean, updateValueOnAnimation: boolean, glow: boolean, title: string|boolean, borders: boolean, valueInt: number, valueDec: number, majorTicksInt: number, majorTicksDec: number, animation: boolean, animationDuration: number, animationRule: string|AnimationRule, colorPlate: string, colorMajorTicks: string, colorMinorTicks: string, colorTitle: string, colorUnits: string, colorNumbers: string, colorNeedleStart: string, colorNeedleEnd: string, colorValueText: string, colorValueTextShadow: string, colorBorderShadow: string, colorBorderOuterStart: string, colorBorderOuterEnd: string, colorBorderMiddleStart: string, colorBorderMiddleEnd: string, colorBorderInnerStart: string, colorBorderInnerEnd: string, colorValueBoxRectStart: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, needle: boolean, needleShadow: boolean, needleType: string, needleStart: number, needleEnd: number, needleWidth: number, borderOuterWidth: number, borderMiddleWidth: number, borderInnerWidth: number, borderShadowWidth: number, valueBox: boolean, valueBoxStroke: number, valueText: string|boolean, valueTextShadow: boolean, valueBoxBorderRadius: number, highlights: Highlight[], fontNumbers: string, fontTitle: string, fontUnits: string, fontValue: string}} GenericOptions\n */\nvar GenericOptions = {\n    // basic options\n    renderTo: null,\n    width: 200,\n    height: 200,\n    minValue: 0,\n    maxValue: 100,\n    value: 0,\n    units: false,\n    majorTicks: [0, 20, 40, 60, 80, 100],\n    minorTicks: 10,\n    strokeTicks: true,\n    updateValueOnAnimation: false,\n    glow: true,\n    title: false,\n    borders: true,\n\n    // number formats\n    valueInt: 3,\n    valueDec: 2,\n    majorTicksInt: 1,\n    majorTicksDec: 0,\n\n    // animations\n    animation: true,\n    animationDuration: 250,\n    animationRule: 'cycle',\n\n    // colors\n    colorPlate: '#fff',\n    colorMajorTicks: '#444',\n    colorMinorTicks: '#666',\n    colorTitle: '#888',\n    colorUnits: '#888',\n    colorNumbers: '#444',\n    colorNeedleStart: 'rgba(240,128,128,1)',\n    colorNeedleEnd: 'rgba(255,160,122,.9)',\n    colorValueText: '#444',\n    colorValueTextShadow: 'rgba(0,0,0,0.3)',\n    colorBorderShadow: 'rgba(0,0,0,0.5)',\n    colorBorderOuterStart: '#ddd',\n    colorBorderOuterEnd: '#aaa',\n    colorBorderMiddleStart: '#eee',\n    colorBorderMiddleEnd: '#f0f0f0',\n    colorBorderInnerStart: '#fafafa',\n    colorBorderInnerEnd: '#ccc',\n    colorValueBoxRectStart: '#888',\n    colorValueBoxRectEnd: '#666',\n    colorValueBoxBackground: '#babab2',\n    colorValueBoxShadow: 'rgba(0,0,0,1)',\n    colorNeedleShadowUp: 'rgba(2,255,255,0.2)',\n    colorNeedleShadowDown: 'rgba(188,143,143,0.45)',\n\n    fontNumbers: 'Arial',\n    fontTitle: 'Arial',\n    fontUnits: 'Arial',\n    fontValue: 'Arial',\n\n    // needle\n    needle: true,\n    needleShadow: true,\n    needleType: 'arrow',\n    needleStart: 5,\n    needleEnd: 85,\n    needleWidth: 4,\n\n    // borders\n    borderOuterWidth: 3,\n    borderMiddleWidth: 3,\n    borderInnerWidth: 3,\n    borderShadowWidth: 3,\n\n    // value and highlights\n    valueBox: true,\n    valueBoxStroke: 5,\n    valueText: true,\n    valueTextShadow: true,\n    valueBoxBorderRadius: 2.5,\n    highlights: [{ from: 20, to: 60, color: '#eee' }, { from: 60, to: 80, color: '#ccc' }, { from: 80, to: 100, color: '#999' }]\n};\n\nGenericOptions;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Gauge collections type.\n *\n * It is used ES5 declaration here, because babel\n * transpiles inheritance incorrectly in this case.\n *\n * @class Collection\n * @constructor\n */\nfunction Collection() {\n    Array.prototype.constructor.apply(this, arguments);\n}\n\nCollection.prototype = Object.create(Array.prototype);\nCollection.prototype.constructor = Collection;\n\n/**\n * Returns gauge object by its identifier or index in the collection\n *\n * @param {string|number} id\n * @return {*}\n */\nCollection.prototype.get = function (id) {\n    if (typeof id === 'string') {\n        var i = 0;\n        var s = this.length;\n\n        for (; i < s; i++) {\n            var canvas = this[i].options.renderTo.tagName ? this[i].options.renderTo :\n            /* istanbul ignore next: should be tested with e2e tests */\n            document.getElementById(this[i].options.renderTo || '');\n\n            if (canvas.getAttribute('id') === id) {\n                return this[i];\n            }\n        }\n    } else if (typeof id === 'number') {\n        return this[id];\n    }\n\n    return null;\n};\n\nvar gauges = new Collection();\n\n/**\n * Basic abstract BaseGauge class implementing common functionality\n * for different type of gauges.\n *\n * It should not be instantiated directly but must be extended by a final\n * gauge implementation.\n *\n * @abstract\n * @example\n *\n * class MyCoolGauge extends BaseGauge {\n *\n *     // theses methods below MUST be implemented:\n *\n *     constructor(options) {\n *        // ... do something with options\n *        super(options);\n *        // ... implement anything else\n *     }\n *\n *     draw() {\n *         // ... some implementation here\n *         return this;\n *     }\n * }\n */\n\nvar BaseGauge = function () {\n\n    /**\n     * @constructor\n     * @abstract\n     * @param {GenericOptions} options\n     */\n    function BaseGauge(options) {\n        _classCallCheck(this, BaseGauge);\n\n        var className = this.constructor.name;\n\n        if (className === 'BaseGauge') {\n            throw new TypeError('Attempt to instantiate abstract class!');\n        }\n\n        gauges.push(this);\n\n        /**\n         * Gauge type class\n         *\n         * @type {BaseGauge} type\n         */\n        this.type = window[className];\n\n        options.minValue = parseFloat(options.minValue);\n        options.maxValue = parseFloat(options.maxValue);\n\n        if (!options.borders) {\n            options.borderInnerWidth = options.borderMiddleWidth = options.borderOuterWidth = 0;\n        }\n\n        /**\n         * Gauge options\n         *\n         * @type {GenericOptions} options\n         */\n        this.options = options || {};\n\n        if (!options.renderTo) {\n            throw TypeError('Canvas element was not specified when creating ' + 'the Gauge object!');\n        }\n\n        var canvas = options.renderTo.tagName ? options.renderTo :\n        /* istanbul ignore next: to be tested with e2e tests */\n        document.getElementById(options.renderTo);\n\n        /**\n         * @type {SmartCanvas} canvas\n         */\n        this.canvas = new SmartCanvas(canvas, options.width, options.height);\n        this.canvas.onRedraw = this.draw.bind(this);\n\n        /**\n         * @type {Animation} animation\n         */\n        this.animation = new Animation(options.animationRule, options.animationDuration);\n    }\n\n    /**\n     * Sets new value for this gauge.\n     * If gauge is animated by configuration it will trigger a proper animation.\n     * Upsetting a value triggers gauge redraw.\n     *\n     * @param {number} value\n     */\n\n\n    _createClass(BaseGauge, [{\n        key: 'update',\n\n\n        /**\n         * Updates gauge configuration options at runtime and redraws the gauge\n         *\n         * @param {RadialGaugeOptions} options\n         * @returns {BaseGauge}\n         */\n        value: function update(options) {\n            Object.assign(this.options, options || {});\n\n            this.canvas.width = this.options.width;\n            this.canvas.height = this.options.height;\n\n            this.animation.rule = this.options.animationRule;\n            this.animation.duration = this.options.animationDuration;\n\n            this.canvas.redraw();\n\n            return this;\n        }\n\n        /**\n         * Performs destruction of this object properly\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var index = gauges.indexOf(this);\n\n            /* istanbul ignore else */\n            if (~index) {\n                //noinspection JSUnresolvedFunction\n                gauges.splice(index, 1);\n            }\n\n            this.canvas.destroy();\n            this.canvas = null;\n\n            this.animation.destroy();\n            this.animation = null;\n        }\n\n        /**\n         * Triggering gauge render on a canvas.\n         *\n         * @abstract\n         * @returns {BaseGauge}\n         */\n\n    }, {\n        key: 'draw',\n        value: function draw() {\n            throw new TypeError('draw() must be implemented by a child class!');\n        }\n\n        /**\n         * Inject given gauge object into DOM\n         *\n         * @param {string} Type\n         * @param {GenericOptions} options\n         */\n\n    }, {\n        key: 'value',\n        set: function set(value) {\n            var _this2 = this;\n\n            if (value === this.options.value) return;\n\n            if (this.options.animation) {\n                (function () {\n                    var fromValue = _this2.options.value;\n\n                    /**\n                     * @type {number}\n                     * @access private\n                     */\n                    _this2._value = value;\n\n                    _this2.animation.animate(function (percent) {\n                        _this2.options.value = fromValue + (value - fromValue) * percent;\n\n                        _this2.draw();\n                    }, function () {\n                        _this2.options.value = value;\n                        delete _this2._value;\n                        _this2.draw();\n                    });\n                })();\n            } else {\n                this.options.value = value;\n                this.draw();\n            }\n        }\n\n        /**\n         * Returns current value of the gauge\n         *\n         * @return {number}\n         */\n        ,\n        get: function get() {\n            return typeof this._value === 'undefined' ? this.options.value : this._value;\n        }\n    }], [{\n        key: 'initialize',\n        value: function initialize(Type, options) {\n            new DomObserver(options, 'canvas', Type);\n        }\n    }]);\n\n    return BaseGauge;\n}();\n\nwindow['BaseGauge'] = BaseGauge;\ndocument['gauges'] = gauges;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @access private\n * @typedef {CanvasRenderingContext2D|{max: number, maxRadius: number, barDimensions: object}} Canvas2DContext\n */\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rounded corners rectangle\n *\n * @param {Canvas2DContext} context\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @param {number} r\n */\nfunction roundRect(context, x, y, w, h, r) {\n    context.beginPath();\n\n    context.moveTo(x + r, y);\n    context.lineTo(x + w - r, y);\n\n    context.quadraticCurveTo(x + w, y, x + w, y + r);\n    context.lineTo(x + w, y + h - r);\n\n    context.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    context.lineTo(x + r, y + h);\n\n    context.quadraticCurveTo(x, y + h, x, y + h - r);\n    context.lineTo(x, y + r);\n\n    context.quadraticCurveTo(x, y, x + r, y);\n\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Pads a given value with leading zeros using the given options\n *\n * @param {number} val\n * @param {RadialGaugeOptions|{valueInt: number, valueDec: number}} options\n * @returns {string}\n */\nfunction padValue(val, options) {\n    var dec = options.valueDec;\n    var int = options.valueInt;\n    var i = 0;\n    var s = void 0,\n        strVal = void 0,\n        n = void 0;\n\n    val = parseFloat(val);\n    n = val < 0;\n    val = Math.abs(val);\n\n    if (dec > 0) {\n        strVal = val.toFixed(dec).toString().split('.');\n        s = int - strVal[0].length;\n\n        for (; i < s; ++i) {\n            strVal[0] = '0' + strVal[0];\n        }\n\n        strVal = (n ? '-' : '') + strVal[0] + '.' + strVal[1];\n    } else {\n        strVal = Math.round(val).toString();\n        s = int - strVal.length;\n\n        for (; i < s; ++i) {\n            strVal = '0' + strVal;\n        }\n\n        strVal = (n ? '-' : '') + strVal;\n    }\n\n    return strVal;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Formats a number for display on the dial's plate using the majorTicksFormat\n * config option.\n *\n * @param {number} num number to format\n * @param {object} options\n * @returns {string} formatted number\n */\nfunction formatMajorTickNumber(num, options) {\n    var right = void 0,\n        hasDec = false;\n\n    // First, force the correct number of digits right of the decimal.\n    if (options.majorTicksDec === 0) {\n        right = Math.round(num).toString();\n    } else {\n        right = num.toFixed(options.majorTicksDec);\n    }\n\n    // Second, force the correct number of digits left of the decimal.\n    if (options.majorTicksInt > 1) {\n        // Does this number have a decimal?\n        hasDec = ~right.indexOf('.');\n\n        // Is this number a negative number?\n        if (~right.indexOf('-')) {\n            return '-' + [options.majorTicksInt + options.majorTicksDec + 2 + (hasDec ? 1 : 0) - right.length].join('0') + right.replace('-', '');\n        } else {\n            return [options.majorTicksInt + options.majorTicksDec + 1 + (hasDec ? 1 : 0) - right.length].join('0') + right;\n        }\n    }\n\n    return right;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Transforms degrees to radians\n *\n * @param {number} degrees\n * @returns {number}\n */\nfunction radians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns radial point coordinates\n *\n * @param {number} radius\n * @param {number} angle\n * @returns {{x: number, y: number}}\n */\nfunction radialPoint(radius, angle) {\n    return { x: -radius * Math.sin(angle), y: radius * Math.cos(angle) };\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Creates and returns linear gradient canvas object\n *\n * @param {Canvas2DContext} context\n * @param {string} colorFrom\n * @param {string} colorTo\n * @param {number} length\n * @returns {CanvasGradient}\n */\nfunction linearGradient(context, colorFrom, colorTo, length) {\n    var grad = context.createLinearGradient(0, 0, 0, length);\n\n    grad.addColorStop(0, colorFrom);\n    grad.addColorStop(1, colorTo);\n\n    return grad;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle shadow\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawNeedleShadow(context, options) {\n    if (!options.needleShadow) return;\n\n    context.shadowOffsetX = 2;\n    context.shadowOffsetY = 2;\n    context.shadowBlur = 10;\n    context.shadowColor = options.colorNeedleShadowDown;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws value box at given position\n *\n * @param {Canvas2DContext} context\n * @param {GenericOptions} options\n * @param {number} value\n * @param {number} x\n * @param {number} y\n * @param {number} max\n */\nfunction drawValueBox(context, options, value, x, y, max) {\n    if (!options.valueText) return;\n\n    var text = drawings.padValue(value, options);\n\n    context.shadowOffsetX = null;\n    context.shadowOffsetY = null;\n    context.shadowBlur = null;\n    context.shadowColor = '';\n    context.strokeStyle = null;\n    context.lineWidth = 0;\n    context.save();\n\n    context.font = 40 * (max / 200) + 'px ' + options.fontValue;\n    context.save();\n    context.beginPath();\n\n    if (options.valueBox) {\n        var th = 0.12 * max;\n        var tw = context.measureText('-' + padValue(0, options)).width;\n        var bx = -tw / 2 - 0.025 * max;\n        var by = y - th - 0.04 * max;\n        var bw = tw + 0.05 * max;\n        var bh = th + 0.07 * max;\n        var br = max * options.valueBoxBorderRadius / 100;\n\n        if (br) roundRect(context, bx, by, bw, bh, br);else context.rect(bx, by, bw, bh);\n    }\n\n    var gy = y - 0.12 * max - 0.025 * max + (0.12 * max + 0.045 * max) / 2;\n\n    if (options.valueBoxStroke) {\n        var grd = context.createRadialGradient(x, gy, max / 10, x, gy, max / 5);\n\n        grd.addColorStop(0, options.colorValueBoxRectStart);\n        grd.addColorStop(1, options.colorValueBoxRectEnd);\n\n        context.strokeStyle = grd;\n        context.lineWidth = max * options.valueBoxStroke / 100;\n        context.stroke();\n    }\n\n    if (options.colorValueBoxShadow) {\n        context.shadowBlur = 0.012 * max;\n        context.shadowColor = options.colorValueBoxShadow;\n    }\n\n    if (options.colorValueBoxBackground) {\n        context.fillStyle = options.colorValueBoxBackground;\n        context.fill();\n    }\n\n    context.closePath();\n    context.restore();\n\n    if (options.valueTextShadow) {\n        context.shadowOffsetX = 0.004 * max;\n        context.shadowOffsetY = 0.004 * max;\n        context.shadowBlur = 0.012 * max;\n        context.shadowColor = options.colorValueTextShadow;\n    }\n\n    context.fillStyle = options.colorValueText;\n    context.textAlign = 'center';\n    context.fillText(text, -x, y);\n    context.restore();\n}\n\nvar drawings = {\n    roundRect: roundRect,\n    padValue: padValue,\n    formatMajorTickNumber: formatMajorTickNumber,\n    radians: radians,\n    radialPoint: radialPoint,\n    linearGradient: linearGradient,\n    drawNeedleShadow: drawNeedleShadow,\n    drawValueBox: drawValueBox\n};\n\ndrawings;\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar PI = Math.PI;\nvar HPI = PI / 2;\n\n/**\n * Gauge configuration options\n *\n * @typedef {GenericOptions|{ticksAngle: number, startAngle: number, colorNeedleCircleOuterStart: string, colorNeedleCircleOuterEnd: string, colorNeedleCircleInnerStart: string, colorNeedleCircleInnerEnd: string, colorNeedleShadowUp: string, colorNeedleShadowDown: string, colorValueBoxRectStart: string, colorValueBoxRectEnd: string, colorValueBoxBackground: string, colorValueBoxShadow: string, needleStart: number, needleEnd: number, needleWidth: number, needleCircleSize: number, needleCircleInner: boolean, needleCircleOuter: boolean}} RadialGaugeOptions\n */\n\n/**\n * Default gauge configuration options\n *\n * @access private\n * @type {RadialGaugeOptions}\n */\nvar defaultRadialGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    ticksAngle: 270,\n    startAngle: 45,\n\n    // colors\n    colorNeedleCircleOuterStart: '#f0f0f0',\n    colorNeedleCircleOuterEnd: '#ccc',\n    colorNeedleCircleInnerStart: '#e8e8e8',\n    colorNeedleCircleInnerEnd: '#f5f5f5',\n\n    // needle\n    needleCircleSize: 10,\n    needleCircleInner: true,\n    needleCircleOuter: true\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gradient-filled circle on a canvas\n *\n * @access private\n * @param {number} radius\n * @param {Canvas2DContext} context\n * @param {string} start gradient start color\n * @param {string} end gradient end color\n */\nfunction drawRadialCircle(radius, context, start, end) {\n    context.beginPath();\n    context.arc(0, 0, radius, 0, PI * 2, true);\n    context.fillStyle = drawings.linearGradient(context, start, end, radius);\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns max radius without borders for the gauge\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @return {number}\n */\nfunction maxRadialRadius(context, options) {\n    if (!context.maxRadius) {\n        context.maxRadius = context.max - options.borderShadowWidth - options.borderOuterWidth - options.borderMiddleWidth - options.borderInnerWidth;\n    }\n\n    return context.maxRadius;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge plate on the canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialPlate(context, options) {\n    var d0 = options.borderShadowWidth;\n    var r0 = context.max - options.borderShadowWidth;\n    var r1 = r0 - options.borderOuterWidth;\n    var r2 = r1 - options.borderMiddleWidth;\n    var r3 = maxRadialRadius(context, options);\n\n    context.save();\n\n    if (options.glow) {\n        context.shadowBlur = d0;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    if (options.borderOuterWidth) {\n        drawRadialCircle(r0, context, options.colorBorderOuterStart, options.colorBorderOuterEnd);\n    }\n\n    if (options.borderMiddleWidth) {\n        drawRadialCircle(r1, context, options.colorBorderMiddleStart, options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRadialCircle(r2, context, options.colorBorderInnerStart, options.colorBorderInnerEnd);\n    }\n\n    context.restore();\n\n    context.beginPath();\n    context.arc(0, 0, r3, 0, PI * 2, true);\n    context.fillStyle = options.colorPlate;\n    context.fill();\n    context.closePath();\n\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge highlight areas on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialHighlights(context, options) {\n    context.save();\n\n    var r1 = radialTicksRadius(context, options);\n    var r2 = r1 - context.max * .15;\n    var i = 0,\n        s = options.highlights.length;\n\n    for (; i < s; i++) {\n        var hlt = options.highlights[i];\n        var vd = (options.maxValue - options.minValue) / options.ticksAngle;\n        var sa = drawings.radians(options.startAngle + (hlt.from - options.minValue) / vd);\n        var ea = drawings.radians(options.startAngle + (hlt.to - options.minValue) / vd);\n        var ps = drawings.radialPoint(r2, sa);\n        var pe = drawings.radialPoint(r1, sa);\n        var ps1 = drawings.radialPoint(r1, ea);\n        var pe1 = drawings.radialPoint(r2, ea);\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r1, sa, ea, false);\n        context.restore();\n        context.save();\n        context.moveTo(ps.x, ps.y);\n        context.lineTo(pe.x, pe.y);\n        context.lineTo(ps1.x, ps1.y);\n        context.lineTo(pe1.x, pe1.y);\n        context.lineTo(ps.x, ps.y);\n        context.closePath();\n\n        context.fillStyle = hlt.color;\n        context.fill();\n\n        context.beginPath();\n        context.rotate(HPI);\n        context.arc(0, 0, r2, sa - 0.2, ea + 0.2, false);\n        context.restore();\n        context.closePath();\n\n        context.fillStyle = options.colorPlate;\n        context.fill();\n        context.save();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks bar on a canvas\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMinorTicks(context, options) {\n    var radius = radialTicksRadius(context, options);\n\n    context.lineWidth = SmartCanvas.pixelRatio;\n    context.strokeStyle = options.colorMinorTicks;\n\n    context.save();\n\n    var s = options.minorTicks * (options.majorTicks.length - 1);\n    var i = 0;\n\n    for (; i < s; ++i) {\n        var angle = options.startAngle + i * (options.ticksAngle / s);\n\n        context.rotate(drawings.radians(angle));\n\n        context.beginPath();\n        context.moveTo(0, radius);\n        context.lineTo(0, radius - context.max * .075);\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns ticks radius\n *\n * @access private\n * @param context\n * @param options\n * @return {number}\n */\nfunction radialTicksRadius(context, options) {\n    return maxRadialRadius(context, options) - context.max * .05;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge major ticks bar on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialMajorTicks(context, options) {\n    var r = radialTicksRadius(context, options);\n    var i = void 0;\n    var s = options.majorTicks.length;\n    var pixelRatio = SmartCanvas.pixelRatio;\n\n    context.lineWidth = 2 * pixelRatio;\n    context.strokeStyle = options.colorMajorTicks;\n    context.save();\n\n    if (s === 0) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.maxValue, options));\n        s = 2;\n    }\n\n    i = 0;\n    for (; i < s; ++i) {\n        context.rotate(drawings.radians(radialNextAngle(options, i, s)));\n\n        context.beginPath();\n        context.moveTo(0, r);\n        context.lineTo(0, r - context.max * .15);\n        closeStrokedPath(context);\n    }\n\n    if (options.strokeTicks) {\n        context.rotate(HPI);\n\n        context.beginPath();\n        context.arc(0, 0, r, drawings.radians(options.startAngle), drawings.radians(options.startAngle + options.ticksAngle), false);\n        closeStrokedPath(context);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\nfunction radialNextAngle(options, i, s) {\n    return options.startAngle + i * (options.ticksAngle / (s - 1));\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Strokes, closes path and restores previous context state\n *\n * @param {Canvas2DContext} context\n */\nfunction closeStrokedPath(context) {\n    context.stroke();\n    context.restore();\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar numbers\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNumbers(context, options) {\n    var radius = maxRadialRadius(context, options) - context.max * .35;\n    var points = {};\n    var i = 0;\n    var s = options.majorTicks.length;\n\n    for (; i < s; ++i) {\n        var angle = radialNextAngle(options, i, s);\n        var point = drawings.radialPoint(radius, drawings.radians(angle));\n\n        if (angle === 360) angle = 0;\n\n        if (points[angle]) {\n            continue; //already drawn at this place, skipping\n        }\n\n        points[angle] = true;\n\n        context.font = 20 * (context.max / 200) + 'px ' + options.fontNumbers;\n        context.fillStyle = options.colorNumbers;\n        context.lineWidth = 0;\n        context.textAlign = 'center';\n        context.fillText(options.majorTicks[i], point.x, point.y + 3);\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge title\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialTitle(context, options) {\n    if (!options.title) return;\n\n    context.save();\n    context.font = 24 * (context.max / 200) + 'px ' + options.fontTitle;\n    context.fillStyle = options.colorTitle;\n    context.textAlign = 'center';\n    context.fillText(options.title, 0, -context.max / 4.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws units name on the gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialUnits(context, options) {\n    if (!options.units) return;\n\n    context.save();\n    context.font = 22 * (context.max / 200) + 'px ' + options.fontUnits;\n    context.fillStyle = options.colorUnits;\n    context.textAlign = 'center';\n    context.fillText(options.units, 0, context.max / 3.25, context.max * .8);\n    context.restore();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge needle\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n */\nfunction drawRadialNeedle(context, options) {\n    if (!options.needle) return;\n\n    var value = options.value;\n    var max = maxRadialRadius(context, options);\n    var r1 = max / 100 * options.needleCircleSize;\n    var r2 = max / 100 * options.needleCircleSize * 0.75;\n    var rIn = max / 100 * options.needleEnd;\n    var rStart = options.needleStart ? max / 100 * options.needleStart : 0,\n        rOut = max * .2;\n    var pad1 = max / 100 * options.needleWidth;\n    var pad2 = max / 100 * options.needleWidth / 2;\n    var pixelRatio = SmartCanvas.pixelRatio;\n\n    drawings.drawNeedleShadow(context, options);\n\n    context.save();\n\n    context.rotate(drawings.radians(options.startAngle + (value - options.minValue) / (options.maxValue - options.minValue) * options.ticksAngle));\n\n    context.fillStyle = drawings.linearGradient(context, options.colorNeedleStart, options.colorNeedleEnd, rIn - rOut);\n\n    if (options.needleType === 'arrow') {\n        context.beginPath();\n        context.moveTo(-pad2, -rOut);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(pixelRatio, rIn);\n        context.lineTo(pad1, 0);\n        context.lineTo(pad2, -rOut);\n        context.closePath();\n        context.fill();\n\n        context.beginPath();\n        context.lineTo(-0.5 * pixelRatio, rIn);\n        context.lineTo(-1 * pixelRatio, rIn);\n        context.lineTo(-pad1, 0);\n        context.lineTo(-pad2, -rOut);\n        context.lineTo(pad2 / 2 * pixelRatio - 2 * pixelRatio, -rOut);\n        context.closePath();\n        context.fillStyle = options.colorNeedleShadowUp;\n        context.fill();\n    } else {\n        // simple line needle\n        context.beginPath();\n        context.moveTo(-pad2, rIn);\n        context.lineTo(-pad2, rStart);\n        context.lineTo(pad2, rStart);\n        context.lineTo(pad2, rIn);\n        context.closePath();\n        context.fill();\n    }\n\n    context.restore();\n\n    if (options.needleCircleSize) {\n        drawings.drawNeedleShadow(context, options);\n\n        if (options.needleCircleOuter) {\n            context.beginPath();\n            context.arc(0, 0, r1, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(context, options.colorNeedleCircleOuterStart, options.colorNeedleCircleOuterEnd, r1);\n            context.fill();\n            context.restore();\n            context.closePath();\n        }\n\n        if (options.needleCircleInner) {\n            context.beginPath();\n            context.arc(0, 0, r2, 0, PI * 2, true);\n            context.fillStyle = drawings.linearGradient(context, options.colorNeedleCircleInnerStart, options.colorNeedleCircleInnerEnd, r2);\n            context.fill();\n            context.closePath();\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge value box\n *\n * @param {Canvas2DContext} context\n * @param {RadialGaugeOptions} options\n * @param {number} value\n */\nfunction drawRadialValueBox(context, options, value) {\n    drawings.drawValueBox(context, options, value, 0, context.max - context.max * .33, context.max);\n}\n\n/**\n * Minimalistic HTML5 Canvas Gauge\n * @example\n *  var gauge = new RadialGauge({\n *     renderTo: 'gauge-id', // identifier of HTML canvas element or element itself\n *     width: 400,\n *     height: 400,\n *     units: 'Km/h',\n *     title: false,\n *     value: 0,\n *     minValue: 0,\n *     maxValue: 220,\n *     majorTicks: [\n *         '0','20','40','60','80','100','120','140','160','180','200','220'\n *     ],\n *     minorTicks: 2,\n *     strokeTicks: false,\n *     highlights: [\n *         { from: 0, to: 50, color: 'rgba(0,255,0,.15)' },\n *         { from: 50, to: 100, color: 'rgba(255,255,0,.15)' },\n *         { from: 100, to: 150, color: 'rgba(255,30,0,.25)' },\n *         { from: 150, to: 200, color: 'rgba(255,0,225,.25)' },\n *         { from: 200, to: 220, color: 'rgba(0,0,255,.25)' }\n *     ],\n *     colorPlate: '#222',\n *     colorMajorTicks: '#f5f5f5',\n *     colorMinorTicks: '#ddd',\n *     colorTitle: '#fff',\n *     colorUnits: '#ccc',\n *     colorNumbers: '#eee',\n *     colorNeedleStart: 'rgba(240, 128, 128, 1)',\n *     colorNeedleEnd: 'rgba(255, 160, 122, .9)',\n *     valueBox: true,\n *     animationRule: 'bounce'\n * });\n * // draw initially\n * gauge.draw();\n * // animate\n * setInterval(() => {\n *    gauge.value = Math.random() * -220 + 220;\n * }, 1000);\n */\n\nvar RadialGauge = function (_BaseGauge) {\n    _inherits(RadialGauge, _BaseGauge);\n\n    /**\n     * @constructor\n     * @param {RadialGaugeOptions} options\n     */\n    function RadialGauge(options) {\n        _classCallCheck(this, RadialGauge);\n\n        options = Object.assign({}, defaultRadialGaugeOptions, options || {});\n\n        /* istanbul ignore if */\n        if (isNaN(options.startAngle)) options.startAngle = 45;\n        /* istanbul ignore if */\n        if (isNaN(options.ticksAngle)) options.ticksAngle = 270;\n\n        /* istanbul ignore if */\n        if (options.ticksAngle > 360) options.ticksAngle = 360;\n        /* istanbul ignore if */\n        if (options.ticksAngle < 0) options.ticksAngle = 0;\n\n        /* istanbul ignore if */\n        if (options.startAngle < 0) options.startAngle = 0;\n        /* istanbul ignore if */\n        if (options.startAngle > 360) options.startAngle = 360;\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(RadialGauge).call(this, options));\n    }\n\n    /*  */\n    /**\n     * Triggering gauge render on a canvas.\n     *\n     * @returns {RadialGauge}\n     */\n\n\n    _createClass(RadialGauge, [{\n        key: 'draw',\n        value: function draw() {\n            var canvas = this.canvas;\n            var x = -canvas.drawX;\n            var y = -canvas.drawY;\n            var w = canvas.drawWidth;\n            var h = canvas.drawHeight;\n\n            var options = this.options;\n\n            if (!canvas.elementClone.initialized) {\n                var context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                drawRadialPlate(context, options);\n                drawRadialHighlights(context, options);\n                drawRadialMinorTicks(context, options);\n                drawRadialMajorTicks(context, options);\n                drawRadialNumbers(context, options);\n                drawRadialTitle(context, options);\n                drawRadialUnits(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            this.canvas.commit();\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n            canvas.context.save();\n\n            drawRadialValueBox(canvas.context, options, this.value);\n            drawRadialNeedle(canvas.context, options);\n\n            return this;\n        }\n    }]);\n\n    return RadialGauge;\n}(BaseGauge);\n\nwindow['RadialGauge'] = RadialGauge;\n\nBaseGauge.initialize('RadialGauge', defaultRadialGaugeOptions);\n\n/*!\n * @license\n * Minimalistic HTML5 Canvas Gauge implementation\n *\n * This code is subject to MIT license.\n *\n * Copyright (c) 2012 Mykhailo Stadnyk <mikhus@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Linear gauge configuration options\n *\n * @typedef {GenericOptions|{orientation: string, borderRadius: number, barBeginCircle: number, barWidth: number, barStrokeWidth: number, barProgress: boolean, colorBar: string, colorBarEnd: string, colorBarStroke: string, colorBarProgress: string, colorBarProgressEnd: string, tickSide: string, needleSide: string, numberSide: string, ticksWidth: number, ticksWidthMinor: number, ticksPadding: number, barLength: number, fontNumbersSize: number, fontTitleSize: number, fontUnitsSize: number}} LinearGaugeOptions\n */\n\nvar round = Math.round;\nvar abs = Math.abs;\n\nvar TICKS_WIDTH = .1;\nvar TICKS_WIDTH_MINOR = TICKS_WIDTH / 2;\nvar TICKS_PADDING = .05;\nvar BAR_LENGTH = .85;\nvar FONT_NUMBERS = 20;\nvar FONT_TITLE = 26;\nvar FONT_UNITS = 22;\n\n/**\n * Default linear gauge configuration options\n *\n * @type {LinearGaugeOptions}\n */\nvar defaultLinearGaugeOptions = Object.assign({}, GenericOptions, {\n    // basic options\n    borderRadius: 0,\n    width: 150,\n    height: 400,\n\n    // bar\n    barBeginCircle: 30, // percents\n    barWidth: 20, // percents\n    barStrokeWidth: 0, // pixels\n    barProgress: true,\n\n    colorBarStroke: '#222',\n    colorBar: '#ccc',\n    colorBarEnd: '',\n    colorBarProgress: '#888',\n    colorBarProgressEnd: '',\n\n    needleWidth: 6,\n\n    tickSide: 'both', // available: 'left', 'right', 'both'\n    needleSide: 'both', // available: 'left', 'right', 'both'\n\n    numberSide: 'both', // available: 'left', 'right', 'both'\n\n    ticksWidth: TICKS_WIDTH * 100,\n    ticksWidthMinor: TICKS_WIDTH_MINOR * 100,\n    ticksPadding: TICKS_PADDING * 100,\n    barLength: BAR_LENGTH * 100,\n    fontNumbersSize: FONT_NUMBERS * 100,\n    fontTitleSize: FONT_TITLE * 100,\n    fontUnitsSize: FONT_UNITS * 100\n});\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws rectangle on a canvas\n *\n * @param {Canvas2DContext} context\n * @param {number} r radius for founded corner rectangle if 0 or less won't be drawn\n * @param {number} x x-coordinate of the top-left corner\n * @param {number} y y-coordinate of the top-left corner\n * @param {number} w width of the rectangle\n * @param {number} h height of the rectangle\n * @param {string} colorStart base fill color of the rectangle\n * @param {string} [colorEnd] gradient color of the rectangle\n */\nfunction drawRectangle(context, r, x, y, w, h, colorStart, colorEnd) {\n    context.beginPath();\n    context.fillStyle = colorEnd ? drawings.linearGradient(context, colorStart, colorEnd, w > h ? w : h) : colorStart;\n\n    r > 0 ? drawings.roundRect(context, x, y, w, h, r) : context.rect(x, y, w, h);\n\n    context.fill();\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Calculates and returns linear gauge base bar dimensions.\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions|{barStrokeWidth: number, barBeginCircle: number, barWidth: number, hasLeft: boolean, hasRight: boolean}} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n * @return {{isVertical: boolean, width: number, length: number, barWidth: number, barLength: number, strokeWidth: number, barMargin: number, radius: number, x0: number, y0: number, barOffset: number, titleMargin: number, unitsMargin: number, X: number, Y: number}}\n */\nfunction barDimensions(context, options, x, y, w, h) {\n    var pixelRatio = SmartCanvas.pixelRatio;\n    var isVertical = h >= w;\n    var width = isVertical ? w * .85 : h;\n    var length = isVertical ? h : w;\n\n    x = isVertical ? round(x + (w - width) / 2) : x;\n\n    var hasTitle = !!options.title;\n    var hasUnits = !!options.units;\n    var hasValue = !!options.valueBox;\n\n    var titleMargin = void 0;\n    var unitsMargin = void 0;\n    var valueMargin = void 0;\n\n    if (isVertical) {\n        unitsMargin = round(length * .05);\n        titleMargin = round(length * .075);\n        valueMargin = round(length * .075);\n\n        if (hasTitle) {\n            length -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) length -= unitsMargin;\n        if (hasValue) length -= valueMargin;\n    } else {\n        unitsMargin = titleMargin = round(width * .15);\n\n        if (hasTitle) {\n            width -= titleMargin;\n            y += titleMargin;\n        }\n\n        if (hasUnits) width -= unitsMargin;\n    }\n\n    var strokeWidth = options.barStrokeWidth * 2;\n    var radius = options.barBeginCircle ? round(width * options.barBeginCircle / 200 - strokeWidth / 2) : 0;\n\n    var barWidth = round(width * options.barWidth / 100 - strokeWidth);\n    var barLength = round(length * BAR_LENGTH - strokeWidth);\n    var barMargin = round((length - barLength) / 2);\n\n    // coordinates for arc of the bar if configured\n    var x0 = round(x + (isVertical ? width / 2 : barMargin + radius));\n    var y0 = round(y + (isVertical ? length - barMargin - radius + strokeWidth / 2 : width / 2));\n    var dx = isVertical && !(options.hasLeft && options.hasRight) ? (options.hasRight ? -1 : 1) * TICKS_WIDTH * width : 0;\n    var dy = !isVertical && !(options.hasLeft && options.hasRight) ? (options.hasRight ? -1 : 1) * TICKS_WIDTH * width : 0;\n\n    //noinspection JSUndefinedPropertyAssignment\n    context.barDimensions = {\n        isVertical: isVertical,\n        width: width,\n        length: length,\n        barWidth: barWidth,\n        barLength: barLength,\n        strokeWidth: strokeWidth,\n        barMargin: barMargin,\n        radius: radius,\n        pixelRatio: pixelRatio,\n        barOffset: null,\n        titleMargin: hasTitle ? titleMargin : 0,\n        unitsMargin: hasUnits ? unitsMargin : 0,\n        get ticksLength() {\n            return this.barLength - this.barOffset - this.strokeWidth;\n        },\n        X: x + dx,\n        Y: y + dy,\n        x0: x0 + dx,\n        y0: y0 + dy,\n        baseX: x,\n        baseY: y\n    };\n\n    return context.barDimensions;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws bar shape from the given options on a given canvas context\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {string} type\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearBarShape(context, options, type, x, y, w, h) {\n    var _barDimensions = barDimensions(context, options, x, y, w, h);\n\n    var isVertical = _barDimensions.isVertical;\n    var width = _barDimensions.width;\n    var barWidth = _barDimensions.barWidth;\n    var barLength = _barDimensions.barLength;\n    var strokeWidth = _barDimensions.strokeWidth;\n    var barMargin = _barDimensions.barMargin;\n    var radius = _barDimensions.radius;\n    var x0 = _barDimensions.x0;\n    var y0 = _barDimensions.y0;\n    var X = _barDimensions.X;\n    var Y = _barDimensions.Y;\n\n\n    context.save();\n    context.beginPath();\n\n    if (options.barBeginCircle) {\n        var direction = drawings.radians(isVertical ? 270 : 0);\n        var alpha = Math.asin(barWidth / 2 / radius);\n        var cosAlpha = Math.cos(alpha);\n        var sinAlpha = Math.sin(alpha);\n\n        var x1 = x0 + (isVertical ? radius * sinAlpha : radius * cosAlpha - strokeWidth / 2);\n        var y1 = isVertical ? y0 - radius * cosAlpha : y0 + radius * sinAlpha;\n        var cutRadius = isVertical ? abs(y1 - y0) : abs(x1 - x0);\n        // let radiusOffset = round(radius - cutRadius);\n        //\n        // if (isVertical) {\n        //     y0 -= radiusOffset;\n        //     y1 -= radiusOffset;\n        // }\n        //\n        // else {\n        //     x0 -= radiusOffset;\n        //     x1 -= radiusOffset;\n        // }\n        // barLength -= radiusOffset;\n\n        context.barDimensions.barOffset = round(cutRadius + radius);\n\n        // bottom point\n        var x2 = isVertical ? round(x0 - radius * sinAlpha) : x1;\n        var y2 = isVertical ? y1 : round(y0 - radius * sinAlpha);\n\n        if (type === 'progress') {\n            barLength = context.barDimensions.barOffset + (barLength - context.barDimensions.barOffset) * (options.value - options.minValue) / (options.maxValue - options.minValue);\n        }\n\n        // bar ends at\n        var x3 = round(x1 + barLength - context.barDimensions.barOffset + strokeWidth / 2); // h\n        var y3 = round(y1 - barLength + context.barDimensions.barOffset - strokeWidth / 2); // v\n\n        context.arc(x0, y0, radius, direction + alpha, direction - alpha);\n\n        if (isVertical) {\n            context.moveTo(x1, y2);\n            context.lineTo(x1, y3);\n            context.lineTo(x2, y3);\n            context.lineTo(x2, y2);\n        } else {\n            context.moveTo(x1, y2);\n            context.lineTo(x3, y2);\n            context.lineTo(x3, y1);\n            context.lineTo(x1, y1);\n        }\n    } else {\n        // simply rectangle\n        var rx = round(isVertical ? X + (width - barWidth) / 2 : X + barMargin);\n        var ry = round(isVertical ? Y + barLength + barMargin : Y + (width - barWidth) / 2);\n\n        if (type === 'progress') {\n            barLength *= (options.value - options.minValue) / (options.maxValue - options.minValue);\n        }\n\n        if (isVertical) context.rect(rx, ry, barWidth, -barLength);else context.rect(rx, ry, barLength, barWidth);\n    }\n\n    if (type !== 'progress' && options.barStrokeWidth) {\n        context.lineWidth = strokeWidth;\n        context.strokeStyle = options.colorBarStroke;\n        //context.lineJoin = 'round';\n        context.stroke();\n    }\n\n    if (type !== 'progress' && options.colorBar) {\n        context.fillStyle = options.colorBarEnd ? drawings.linearGradient(context, options.colorBar, options.colorBarEnd, barLength) : options.colorBar;\n        context.fill();\n    } else if (type === 'progress' && options.colorBarProgress) {\n        context.fillStyle = options.colorBarProgressEnd ? drawings.linearGradient(context, options.colorBarProgress, options.colorBarProgressEnd, barLength) : options.colorBarProgress;\n        context.fill();\n    }\n\n    context.closePath();\n\n    // fix dimensions for further usage\n    if (options.barBeginCircle) context.barDimensions.radius += strokeWidth;\n\n    context.barDimensions.barWidth += strokeWidth;\n    context.barDimensions.barLength += strokeWidth;\n}\n\n/**\n * Draws gauge bar\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBar(context, options, x, y, w, h) {\n    drawLinearBarShape(context, options, '', x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Helper function to calculate bar ticks presence on the sides\n *\n * @param {string} notWhich\n * @param {LinearGaugeOptions} options\n * @return {boolean}\n */\nfunction hasTicksBar(notWhich, options) {\n    return options.needleSide !== notWhich || options.tickSide !== notWhich || options.numberSide !== notWhich;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar progress\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x x-coordinate of the top-left corner of the gauge\n * @param {number} y y-coordinate of the top-left corner of the gauge\n * @param {number} w width of the gauge\n * @param {number} h height of the gauge\n */\nfunction drawLinearBarProgress(context, options, x, y, w, h) {\n    options.barProgress && drawLinearBarShape(context, options, 'progress', x, y, w, h);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws gauge bar highlighted areas\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarHighlights(context, options) {\n    var _context$barDimension = context.barDimensions;\n    var isVertical = _context$barDimension.isVertical;\n    var width = _context$barDimension.width;\n    var length = _context$barDimension.length;\n    var barWidth = _context$barDimension.barWidth;\n    var barOffset = _context$barDimension.barOffset;\n    var barMargin = _context$barDimension.barMargin;\n    var X = _context$barDimension.X;\n    var Y = _context$barDimension.Y;\n    var ticksLength = _context$barDimension.ticksLength;\n\n\n    if (!options.highlights) return;\n\n    var hasLeft = options.tickSide !== 'right';\n    var hasRight = options.tickSide !== 'left';\n    var i = 0;\n    var s = options.highlights.length;\n    var tickOffset = (width - barWidth) / 2;\n    var interval = options.maxValue - options.minValue;\n    var eX = round(isVertical ? X + tickOffset : X + barMargin + barOffset);\n    var eH = TICKS_WIDTH * width;\n    var eY = isVertical ? Y + length - barMargin - barOffset : Y + tickOffset;\n    var hLeft = round((TICKS_WIDTH + TICKS_PADDING) * width);\n    var hRight = round(barWidth + TICKS_PADDING * width);\n\n    context.save();\n\n    for (; i < s; i++) {\n        var entry = options.highlights[i];\n        var eW = ticksLength * abs((entry.to - entry.from) / interval);\n\n        context.beginPath();\n        context.fillStyle = entry.color;\n\n        if (isVertical) {\n            if (hasLeft) context.rect(eX - hLeft, eY, eH, -eW);\n\n            if (hasRight) context.rect(eX + hRight, eY, eH, -eW);\n\n            eY -= eW;\n        } else {\n            if (hasLeft) context.rect(eX, eY - hLeft, eW, eH);\n\n            if (hasRight) context.rect(eX, eY + hRight, eW, eH);\n\n            eX += eW;\n        }\n\n        context.fill();\n        context.closePath();\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws a tick line on a linear gauge\n *\n * @param {Canvas2DContext} context\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n */\nfunction drawLinearTick(context, x1, y1, x2, y2) {\n    context.beginPath();\n\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n\n    context.closePath();\n    context.save();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks\n *\n * @param {Canvas2DContext} context\n * @param {string} color\n * @param {number} ticksSize\n * @param {number} deltaLen\n * @param {boolean} hasLeft\n * @param {boolean} hasRight\n * @param {number} lineWidth\n * @param {number} lineLength\n */\nfunction drawLinearTicks(context, color, ticksSize, deltaLen, hasLeft, hasRight, lineWidth, lineLength) {\n    var _context$barDimension2 = context.barDimensions;\n    var isVertical = _context$barDimension2.isVertical;\n    var length = _context$barDimension2.length;\n    var barWidth = _context$barDimension2.barWidth;\n    var barOffset = _context$barDimension2.barOffset;\n    var barMargin = _context$barDimension2.barMargin;\n    var pixelRatio = _context$barDimension2.pixelRatio;\n    var width = _context$barDimension2.width;\n    var X = _context$barDimension2.X;\n    var Y = _context$barDimension2.Y;\n    var ticksLength = _context$barDimension2.ticksLength;\n\n    var tickOffset = (width - barWidth) / 2;\n    var tickX = void 0,\n        tickY = void 0;\n    var i = 0;\n    var tickLen = lineLength * width;\n    var tickLeft = tickOffset - TICKS_PADDING * width;\n    var tickRight = tickOffset + barWidth + tickLen + TICKS_PADDING * width;\n    var tickSpace = ticksLength / (ticksSize - deltaLen);\n\n    context.lineWidth = lineWidth * pixelRatio;\n    context.strokeStyle = color;\n    context.save();\n\n    for (; i < ticksSize; i++) {\n        if (isVertical) {\n            tickY = Y + length - barMargin - barOffset - i * tickSpace;\n\n            if (hasLeft) {\n                tickX = X + tickLeft;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen), tickY);\n            }\n\n            if (hasRight) {\n                tickX = X + tickRight;\n                drawLinearTick(context, tickX, tickY, round(tickX - tickLen), tickY);\n            }\n        } else {\n            tickX = X + barMargin + barOffset + i * tickSpace;\n\n            if (hasLeft) {\n                tickY = Y + tickLeft;\n                drawLinearTick(context, tickX, tickY, tickX, round(tickY - tickLen));\n            }\n\n            if (hasRight) {\n                tickY = Y + tickRight;\n                drawLinearTick(context, tickX, round(tickY), tickX, tickY - tickLen);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Prepares major ticks data\n *\n * @access private\n * @param {LinearGaugeOptions} options\n * @return {[boolean, boolean]}\n */\nfunction prepareTicks(options) {\n    if (!options.majorTicks.length) {\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.minValue, options));\n        options.majorTicks.push(drawings.formatMajorTickNumber(options.maxValue, options));\n    }\n\n    return [options.tickSide !== 'right', options.tickSide !== 'left'];\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicks(context, options) {\n    var _prepareTicks = prepareTicks(options);\n\n    var _prepareTicks2 = _slicedToArray(_prepareTicks, 2);\n\n    var hasLeft = _prepareTicks2[0];\n    var hasRight = _prepareTicks2[1];\n\n    var lineWidth = 2;\n\n    drawLinearTicks(context, options.colorMajorTicks, options.majorTicks.length, 1, hasLeft, hasRight, lineWidth, TICKS_WIDTH);\n\n    if (options.strokeTicks) {\n        var _context$barDimension3 = context.barDimensions;\n        var isVertical = _context$barDimension3.isVertical;\n        var length = _context$barDimension3.length;\n        var width = _context$barDimension3.width;\n        var barWidth = _context$barDimension3.barWidth;\n        var barMargin = _context$barDimension3.barMargin;\n        var barOffset = _context$barDimension3.barOffset;\n        var X = _context$barDimension3.X;\n        var Y = _context$barDimension3.Y;\n        var ticksLength = _context$barDimension3.ticksLength;\n        var pixelRatio = _context$barDimension3.pixelRatio;\n\n        var rightTicks = (width - barWidth) / 2 + barWidth + TICKS_PADDING * width;\n        var leftTicks = (width - barWidth) / 2 - TICKS_PADDING * width;\n        var sX = void 0,\n            sY = void 0,\n            eX = void 0,\n            eY = void 0;\n\n        lineWidth *= pixelRatio;\n\n        if (isVertical) {\n            sY = Y + length - barMargin - barOffset + lineWidth / 2;\n            eY = sY - ticksLength - lineWidth;\n\n            if (hasLeft) {\n                eX = sX = round(X + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eX = sX = round(X + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        } else {\n            sX = X + barMargin + barOffset - lineWidth / 2;\n            eX = sX + ticksLength + lineWidth;\n\n            if (hasLeft) {\n                eY = sY = round(Y + leftTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n\n            if (hasRight) {\n                eY = sY = round(Y + rightTicks);\n                drawLinearTickStroke(context, sX, sY, eX, eY);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws ticks stroke\n *\n * @param {Canvas2DContext} context\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n */\nfunction drawLinearTickStroke(context, sX, sY, eX, eY) {\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws minor ticks\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMinorTicks(context, options) {\n    var _prepareTicks3 = prepareTicks(options);\n\n    var _prepareTicks4 = _slicedToArray(_prepareTicks3, 2);\n\n    var hasLeft = _prepareTicks4[0];\n    var hasRight = _prepareTicks4[1];\n\n\n    drawLinearTicks(context, options.colorMajorTicks, options.minorTicks * (options.majorTicks.length - 1), 0, hasLeft, hasRight, 1, TICKS_WIDTH_MINOR);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws major tick numbers\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearMajorTicksNumbers(context, options) {\n    var _context$barDimension4 = context.barDimensions;\n    var isVertical = _context$barDimension4.isVertical;\n    var length = _context$barDimension4.length;\n    var width = _context$barDimension4.width;\n    var barWidth = _context$barDimension4.barWidth;\n    var barMargin = _context$barDimension4.barMargin;\n    var barOffset = _context$barDimension4.barOffset;\n    var X = _context$barDimension4.X;\n    var Y = _context$barDimension4.Y;\n    var ticksLength = _context$barDimension4.ticksLength;\n\n    var ticks = options.majorTicks.length;\n    var hasLeft = options.numberSide !== 'right';\n    var hasRight = options.numberSide !== 'left';\n    var textHeight = FONT_NUMBERS * width / 200;\n    var i = 0;\n    var ticksWidth = (TICKS_WIDTH + TICKS_PADDING * 2) * width;\n    var numLeft = (width - barWidth) / 2 - ticksWidth;\n    var numRight = (width - barWidth) / 2 + barWidth + ticksWidth;\n    var textX = void 0,\n        textY = void 0,\n        textWidth = void 0,\n        numberOffset = void 0,\n        tick = void 0;\n\n    context.font = textHeight + 'px ' + options.fontNumbers;\n    context.fillStyle = options.colorNumbers;\n    context.lineWidth = 0;\n    context.textAlign = 'center';\n\n    for (; i < ticks; i++) {\n        tick = options.majorTicks[i];\n        numberOffset = i * ticksLength / (ticks - 1);\n\n        if (isVertical) {\n            textY = Y + length - barMargin - barOffset - numberOffset + textHeight / 3;\n\n            if (hasLeft) {\n                context.textAlign = 'right';\n                context.fillText(tick, X + numLeft, textY);\n            }\n\n            if (hasRight) {\n                context.textAlign = 'left';\n                context.fillText(tick, X + numRight, textY);\n            }\n        } else {\n            textWidth = context.measureText(tick).width;\n            textX = X + barMargin + barOffset + numberOffset;\n\n            if (hasLeft) {\n                context.fillText(tick, textX, Y + numLeft);\n            }\n\n            if (hasRight) {\n                context.fillText(tick, textX, Y + numRight + textHeight);\n            }\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge title\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearTitle(context, options) {\n    if (!options.title) return;\n\n    var _context$barDimension5 = context.barDimensions;\n    var isVertical = _context$barDimension5.isVertical;\n    var width = _context$barDimension5.width;\n    var length = _context$barDimension5.length;\n    var baseX = _context$barDimension5.baseX;\n    var baseY = _context$barDimension5.baseY;\n    var titleMargin = _context$barDimension5.titleMargin;\n\n    var textHeight = FONT_TITLE * width / 200;\n    var textX = round(baseX + (isVertical ? width : length) / 2);\n    var textY = round(baseY + titleMargin / 2 - (isVertical ? textHeight : textHeight / 2) - .025 * (isVertical ? length : width));\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontTitle;\n    context.lineWidth = 0;\n    context.fillText(options.title, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge units\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearUnits(context, options) {\n    if (!options.units) return;\n\n    var _context$barDimension6 = context.barDimensions;\n    var isVertical = _context$barDimension6.isVertical;\n    var width = _context$barDimension6.width;\n    var length = _context$barDimension6.length;\n    var baseX = _context$barDimension6.baseX;\n    var baseY = _context$barDimension6.baseY;\n    var unitsMargin = _context$barDimension6.unitsMargin;\n\n    var textHeight = FONT_UNITS * width / 200;\n    var textX = round(baseX + (isVertical ? width : length) / 2);\n    var textY = round(baseY + (isVertical ? length : width) + unitsMargin / 2 - textHeight / 2);\n\n    context.save();\n    context.textAlign = 'center';\n    context.fillStyle = options.colorTitle;\n    context.font = textHeight + 'px ' + options.fontUnits;\n    context.lineWidth = 0;\n    context.fillText(options.units, textX, textY, isVertical ? width : length);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge needles\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n */\nfunction drawLinearBarNeedle(context, options) {\n    if (!options.needle) return;\n\n    var _context$barDimension7 = context.barDimensions;\n    var isVertical = _context$barDimension7.isVertical;\n    var width = _context$barDimension7.width;\n    var length = _context$barDimension7.length;\n    var barWidth = _context$barDimension7.barWidth;\n    var barOffset = _context$barDimension7.barOffset;\n    var barMargin = _context$barDimension7.barMargin;\n    var ticksLength = _context$barDimension7.ticksLength;\n    var X = _context$barDimension7.X;\n    var Y = _context$barDimension7.Y;\n\n    var hasLeft = options.needleSide !== 'right';\n    var hasRight = options.needleSide !== 'left';\n    var position = ticksLength * (options.value - options.minValue) / (options.maxValue - options.minValue);\n    var tickWidth = (TICKS_WIDTH + TICKS_PADDING) * width;\n    var baseLength = barWidth / 2 + tickWidth;\n    var needleLength = baseLength * (options.needleEnd / 100);\n    var sX = void 0,\n        eX = void 0,\n        sY = void 0,\n        eY = void 0;\n    var draw = options.needleType.toLowerCase() === 'arrow' ? drawLinearArrowNeedle : drawLinearLineNeedle;\n    var barStart = (width - barWidth) / 2;\n    var needleStart = baseLength * (options.needleStart / 100);\n    var nLeft = barStart - tickWidth - needleStart;\n    var nRight = barStart + barWidth + tickWidth + needleStart;\n\n    drawings.drawNeedleShadow(context, options);\n\n    context.save();\n\n    if (isVertical) {\n        sY = round(Y + length - barMargin - barOffset - position);\n\n        if (hasLeft) {\n            sX = round(X + nLeft);\n            eX = sX + needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength);\n        }\n\n        if (hasRight) {\n            sX = round(X + nRight);\n            eX = sX - needleLength;\n            draw(context, options, sX, sY, eX, sY, needleLength);\n        }\n    } else {\n        sX = round(X + barMargin + barOffset + position);\n\n        if (hasLeft) {\n            sY = round(Y + nLeft);\n            eY = sY + needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength);\n        }\n\n        if (hasRight) {\n            sY = round(Y + nRight);\n            eY = sY - needleLength;\n            draw(context, options, sX, sY, sX, eY, needleLength);\n        }\n    }\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Returns needle color style\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} length\n * @return {CanvasGradient|string}\n */\nfunction needleStyle(context, options, length) {\n    return options.colorNeedleEnd ? drawings.linearGradient(context, options.colorNeedleStart, options.colorNeedleEnd, length) : options.colorNeedleStart;\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws line needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n */\nfunction drawLinearLineNeedle(context, options, sX, sY, eX, eY, length) {\n    context.lineWidth = options.needleWidth;\n    context.strokeStyle = needleStyle(context, options, length);\n\n    context.beginPath();\n    context.moveTo(sX, sY);\n    context.lineTo(eX, eY);\n    context.stroke();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws arrow needle shape\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} sX\n * @param {number} sY\n * @param {number} eX\n * @param {number} eY\n * @param {number} length\n */\nfunction drawLinearArrowNeedle(context, options, sX, sY, eX, eY, length) {\n    var peakLength = round(length * .4);\n    var bodyLength = length - peakLength;\n    var isVertical = sX === eX;\n    var halfWidth = options.needleWidth / 2;\n\n    context.fillStyle = needleStyle(context, options, length);\n\n    context.beginPath();\n\n    if (isVertical) {\n        if (sY > eY) bodyLength *= -1;\n\n        context.moveTo(sX - halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY);\n        context.lineTo(sX + halfWidth, sY + bodyLength);\n        context.lineTo(sX, eY);\n        context.lineTo(sX - halfWidth, sY + bodyLength);\n        context.lineTo(sX - halfWidth, sY);\n    } else {\n        if (sX > eX) bodyLength *= -1;\n\n        context.moveTo(sX, sY - halfWidth);\n        context.lineTo(sX, sY + halfWidth);\n        context.lineTo(sX + bodyLength, sY + halfWidth);\n        context.lineTo(eX, sY);\n        context.lineTo(sX + bodyLength, sY - halfWidth);\n        context.lineTo(sX, sY - halfWidth);\n    }\n\n    context.fill();\n    context.closePath();\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws value box for linear gauge\n *\n * @access private\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} value\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearValueBox(context, options, value, x, y, w, h) {\n    // currently value box is available only for vertical linear gauge,\n    // as far as by design it is hard to find a proper place for\n    // horizontal ones\n    context.barDimensions.isVertical && drawings.drawValueBox(context, options, value, x + w / 2, y + h - 40 * (w / 300), w);\n}\n\n/* istanbul ignore next: private, not testable */\n/**\n * Draws linear gauge plate\n *\n * @param {Canvas2DContext} context\n * @param {LinearGaugeOptions} options\n * @param {number} x\n * @param {number} y\n * @param {number} w\n * @param {number} h\n */\nfunction drawLinearPlate(context, options, x, y, w, h) {\n    context.save();\n\n    var r = options.borderRadius;\n\n    var w1 = w - options.borderShadowWidth;\n    var w2 = w1 - options.borderOuterWidth * 2;\n    var w3 = w2 - options.borderMiddleWidth * 2;\n    var w4 = w3 - options.borderInnerWidth * 2;\n\n    var h1 = h - options.borderShadowWidth * 2;\n    var h2 = h1 - options.borderOuterWidth * 2;\n    var h3 = h2 - options.borderMiddleWidth * 2;\n    var h4 = h3 - options.borderInnerWidth * 2;\n\n    var x2 = x - (w2 - w1) / 2;\n    var x3 = x2 - (w3 - w2) / 2;\n    var x4 = x3 - (w4 - w3) / 2;\n\n    var y2 = y - (h2 - h1) / 2;\n    var y3 = y2 - (h3 - h2) / 2;\n    var y4 = y3 - (h4 - h3) / 2;\n\n    if (options.glow) {\n        context.shadowBlur = options.borderShadowWidth;\n        context.shadowColor = options.colorBorderShadow;\n    }\n\n    if (options.borderOuterWidth) {\n        drawRectangle(context, r, x, y, w1, h1, options.colorBorderOuterStart, options.colorBorderOuterEnd);\n    }\n\n    context.shadowBlur = null;\n    context.shadowColor = '';\n\n    if (options.borderMiddleWidth) {\n        drawRectangle(context, --r, x2, y2, w2, h2, options.colorBorderMiddleStart, options.colorBorderMiddleEnd);\n    }\n\n    if (options.borderInnerWidth) {\n        drawRectangle(context, --r, x3, y3, w3, h3, options.colorBorderInnerStart, options.colorBorderInnerEnd);\n    }\n\n    drawRectangle(context, r, x4, y4, w4, h4, options.colorPlate);\n\n    return [x4, y4, w4, h4];\n}\n\n/**\n * Minimalistic HTML5 Canvas Linear Gauge\n */\n\nvar LinearGauge = function (_BaseGauge2) {\n    _inherits(LinearGauge, _BaseGauge2);\n\n    /**\n     * @constructor\n     * @param {LinearGaugeOptions} options\n     */\n    function LinearGauge(options) {\n        _classCallCheck(this, LinearGauge);\n\n        /* istanbul ignore else */\n        if (!options.width) options.width = defaultLinearGaugeOptions.width;\n        /* istanbul ignore else */\n        if (!options.height) options.height = defaultLinearGaugeOptions.height;\n\n        /* istanbul ignore else */\n        if (!options.orientation) {\n            options.orientation = options.width > options.height ? 'horizontal' : 'vertical';\n        }\n\n        options = Object.assign({}, defaultLinearGaugeOptions, options || {});\n\n        if (options.ticksWidth) TICKS_WIDTH = options.ticksWidth / 100;\n        if (options.ticksWidthMinor) TICKS_WIDTH_MINOR = options.ticksWidthMinor / 100;\n        if (options.ticksPadding) TICKS_PADDING = options.ticksPadding / 100;\n        if (options.barLength) BAR_LENGTH = options.barLength / 100;\n        if (options.fontNumbersSize) FONT_NUMBERS = options.fontNumbersSize / 100;\n        if (options.fontTitleSize) FONT_TITLE = options.fontTitleSize / 100;\n        if (options.fontUnitsSize) FONT_UNITS = options.fontUnitsSize / 100;\n\n        /* istanbul ignore else */\n        if (options.barStrokeWidth >= options.barWidth) {\n            options.barStrokeWidth = round(options.barWidth / 2);\n        }\n\n        //noinspection JSUndefinedPropertyAssignment\n        options.hasLeft = hasTicksBar('right', options);\n        //noinspection JSUndefinedPropertyAssignment\n        options.hasRight = hasTicksBar('left', options);\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(LinearGauge).call(this, options));\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Triggering linear gauge render on a canvas.\n     *\n     * @returns {LinearGauge}\n     */\n\n\n    _createClass(LinearGauge, [{\n        key: 'draw',\n        value: function draw() {\n            var canvas = this.canvas;\n            var x = -canvas.drawX;\n            var y = -canvas.drawY;\n            var w = canvas.drawWidth;\n            var h = canvas.drawHeight;\n\n            var options = this.options;\n\n            if (!canvas.elementClone.initialized) {\n                var context = canvas.contextClone;\n\n                // clear the cache\n                context.clearRect(x, y, w, h);\n                context.save();\n\n                this.drawBox = drawLinearPlate(context, options, x, y, w, h);\n\n                drawLinearBar.apply(undefined, [context, options].concat(_toConsumableArray(this.drawBox)));\n\n                canvas.context.barDimensions = context.barDimensions;\n\n                drawLinearBarHighlights(context, options);\n                drawLinearMinorTicks(context, options);\n                drawLinearMajorTicks(context, options);\n                drawLinearMajorTicksNumbers(context, options);\n                drawLinearTitle(context, options);\n                drawLinearUnits(context, options);\n\n                canvas.elementClone.initialized = true;\n            }\n\n            this.canvas.commit();\n\n            // clear the canvas\n            canvas.context.clearRect(x, y, w, h);\n            canvas.context.save();\n\n            canvas.context.drawImage(canvas.elementClone, x, y, w, h);\n            canvas.context.save();\n\n            drawLinearBarProgress.apply(undefined, [canvas.context, options].concat(_toConsumableArray(this.drawBox)));\n            drawLinearBarNeedle(canvas.context, options);\n            drawLinearValueBox.apply(undefined, [canvas.context, options, this.value].concat(_toConsumableArray(this.drawBox)));\n\n            return this;\n        }\n    }]);\n\n    return LinearGauge;\n}(BaseGauge);\n\nwindow['LinearGauge'] = LinearGauge;\n\nBaseGauge.initialize('LinearGauge', defaultLinearGaugeOptions);}());"],"sourceRoot":"/source/"}